Object subclass: #GdsNullTool	instanceVariableNames: 'morph event userInfo clickCount lastPoint referencePoint lastDeltaPoint deltaPoint stopCE oldRubberBandBounds'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsNullTool commentStamp: 'kf 11/14/2008 20:12' prior: 0!A GdsNullTool is xxxxxxxxx.Instance Variables	clickCount:		<Integer>	deltaPoint:		<Point>	event:		<MouseEvent>	lastDeltaPoint:		<Point>	lastPoint:		<Point>	morph:		<GdsStructureMorph>	referencePoint:		<Point>	stopCE:		<Boolean>	userInfo:		<Object>clickCount	- xxxxxdeltaPoint	- xxxxxevent	- xxxxxlastDeltaPoint	- xxxxxlastPoint	- xxxxxmorph	- xxxxxreferencePoint	- xxxxxstopCE	- xxxxxuserInfo	- xxxxx!!GdsNullTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:54'!afterSecondAction	self subclassResponsibility.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 10/29/2008 21:38'!consoleOut	| resultPoint |	resultPoint := self snapedWorldPoint.	GdsFeel ifDebugOn: [:s |		s nextPutAll: event printString.		s cr.		s nextPutAll: (self worldPoint) printString]! !!GdsNullTool methodsFor: 'action' stamp: 'kf 7/13/2009 16:24'!eachAction	self subclassResponsibility.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:10'!evenAction	self subclassResponsibility.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 9/20/2008 15:36'!eventAction	self consoleOut.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/13/2008 09:30'!eventActionAt: aWorldPoint element: aGdsElement	self subclassResponsibility.	! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/13/2009 16:13'!finish	morph clearTool.	morph hideRubberbandLocationPanes.	! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:54'!firstAction	self subclassResponsibility.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:10'!oddAction	self subclassResponsibility.! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:36'!stopCE	self subclassResponsibility! !!GdsNullTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:30'!upCount	clickCount := clickCount + 1.! !!GdsNullTool methodsFor: 'testing' stamp: 'kf 11/28/2008 00:00'!autoFinishAfterPut	^false! !!GdsNullTool methodsFor: 'testing' stamp: 'kf 11/18/2008 09:37'!canFinish	^false! !!GdsNullTool methodsFor: 'testing' stamp: 'kf 10/27/2008 20:54'!rubberBandEnabled	^false! !!GdsNullTool methodsFor: 'event handling' stamp: 'kf 12/4/2009 00:09'!changeCursor	morph changeCursorToCross.! !!GdsNullTool methodsFor: 'event handling' stamp: 'kf 10/14/2012 15:00'!mouseDown: anEvent	self setEvent: anEvent.	self eventAction. 	GdsFeelMorphic clickSoundEnabled 		ifTrue: ["SoundService default playSoundNamed: 'click' "].	! !!GdsNullTool methodsFor: 'event handling' stamp: 'kf 10/28/2008 22:40'!toolDidChange! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/14/2008 14:30'!clickCount	clickCount ifNil: [clickCount := 0].	^clickCount.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/14/2008 22:26'!currentItem	^self structure currentItem.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/15/2008 00:09'!findNearestElementByPoint: resultPoint	^morph findNearestElementByPoint: resultPoint.	! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 9/20/2008 15:28'!globalPoint	^event cursorPoint.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/14/2008 22:27'!idSelection	^self structure idSelection.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 9/20/2008 15:29'!localPoint	^morph morhicPointFromGlobal:  self globalPoint.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 10/28/2008 22:59'!prompt: aStringOrBlock	(aStringOrBlock isKindOf: BlockClosure )		ifTrue: [			Transcript cr; show: (String streamContents: [:stream |				aStringOrBlock value: stream])]		ifFalse: [Transcript cr; show: aStringOrBlock].! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/14/2008 15:18'!relativeOffset	^deltaPoint - lastDeltaPoint! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 10/3/2008 22:42'!snapedWorldPoint	^self snapedWorldPoint: self worldPoint.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 6/9/2009 18:37'!snapedWorldPoint: aWorldPoint	^morph viewport snapedWorldPoint:  aWorldPoint.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/15/2008 00:03'!structure	^morph structure! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/13/2008 11:03'!userInfo	^userInfo! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 11/13/2008 11:03'!userInfo: anObject	userInfo := anObject.! !!GdsNullTool methodsFor: 'accessing' stamp: 'kf 9/27/2008 00:56'!worldPoint	^morph viewport worldPointFromGlobal:  self globalPoint.! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 11/4/2008 13:55'!drawFeedbackOn: aLocalCanvas.! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 11/18/2008 13:38'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 10/14/2012 16:31'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint boundsBlock: aBoundsBlock	| bounds |	referencePoint ifNil: [^self].	bounds := Rectangle encompassing: { referencePoint . aPoint }.		morph 		showLocationPane: morph deltaLocationPane 		at: bounds center		contents: ('W:{1} H:{2} L:{3}' format: {bounds width . bounds height . referencePoint dist: aPoint}).		aBoundsBlock value: bounds.			oldRubberBandBounds ifNotNil: [morph invalidBounds: oldRubberBandBounds].	morph invalidBounds: bounds.	oldRubberBandBounds := bounds copy.		! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 11/13/2009 15:30'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint segmentBlock: aSegmentBlock	self 		drawRubberBandOn:  aLocalCanvas 		currentPoint:  aPoint 		boundsBlock: [:b | "ignore bounds"			aSegmentBlock value: referencePoint value: aPoint.] .		! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 11/16/2008 17:08'!markOffsetFeedbackOn: aLocalCanvas	self clickCount = 0 ifTrue: [^self].	referencePoint  ifNotNil: [morph drawOn: aLocalCanvas markDiamondPointAt: referencePoint].	self clickCount >= 2 ifTrue: [.		lastPoint ifNotNil: [morph drawOn: aLocalCanvas markDiamondPointAt: lastPoint].].! !!GdsNullTool methodsFor: 'drawing' stamp: 'kf 11/14/2008 14:36'!markUpdateBounds: aPoint	self subclassResponsibility! !!GdsNullTool methodsFor: 'action-pattern' stamp: 'kf 11/15/2008 00:10'!elementDetectAction	| found resultPoint | 	resultPoint := self snapedWorldPoint.	found := self findNearestElementByPoint: resultPoint.	self eventActionAt: resultPoint element: found.	! !!GdsNullTool methodsFor: 'action-pattern' stamp: 'kf 11/13/2009 16:19'!evenOddAction	self upCount.	self canFinish ifTrue: [^self finish].		self clickCount = 1		ifTrue: [self firstAction].	self clickCount \\ 2 = 0		ifTrue: [			self evenAction.			morph hideRubberbandLocationPanes.]		ifFalse: [self oddAction].! !!GdsNullTool methodsFor: 'action-pattern' stamp: 'kf 11/14/2008 14:51'!firstAndSecondAction	self upCount.	self canFinish ifTrue: [^self finish].		self clickCount = 1		ifTrue: [self firstAction]		ifFalse: [self afterSecondAction].! !!GdsNullTool methodsFor: 'action-pattern' stamp: 'kf 7/13/2009 17:54'!repeatEachAction	self upCount.	self canFinish ifTrue: [^self finish].		self eachAction.	self canFinish ifTrue: [^self finish].	! !!GdsNullTool methodsFor: 'initialize-release' stamp: 'kf 11/14/2008 15:26'!initialize	super initialize.	clickCount := 0.	lastPoint := 0@0.! !!GdsNullTool methodsFor: 'offset action' stamp: 'kf 11/14/2008 15:32'!offsetAction: aBlock	self prompt: self afterSecondMessage.	deltaPoint := self snapedWorldPoint - referencePoint.	aBlock value. "using #relativeOffset"	lastDeltaPoint := deltaPoint copy.	lastPoint := self snapedWorldPoint.! !!GdsNullTool methodsFor: 'offset action' stamp: 'kf 11/13/2009 16:05'!saveReferencePoint	referencePoint := self snapedWorldPoint.	lastDeltaPoint := 0@0.	morph 		showLocationPane: morph referenceLocationPane 		at: referencePoint! !!GdsNullTool methodsFor: 'prompt message' stamp: 'kf 11/14/2008 23:32'!referenceMessage	^'Enter Reference Coordinate:'.! !!GdsNullTool methodsFor: 'private' stamp: 'kf 9/20/2008 15:22'!setEvent: aEvent	event := aEvent.	! !!GdsNullTool methodsFor: 'private' stamp: 'kf 9/20/2008 15:21'!setMorph: aMorph	morph := aMorph.	! !GdsNullTool subclass: #GdsMovePointTool	instanceVariableNames: 'analisysResult replaceVertexIndex moveToPoint'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsMovePointTool commentStamp: 'kf 11/14/2008 20:13' prior: 0!A GdsMovePointTool is xxxxxxxxx.Instance Variables	analisysResult:		<Dictionary>	moveToPoint:		<Point>	replaceVertexIndex:		<Integer>analisysResult	- xxxxxmoveToPoint	- xxxxxreplaceVertexIndex	- xxxxx!!GdsMovePointTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:48'!afterSecondAction	self moveToVertex.		! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 7/14/2009 13:39'!calcUpdateBounds	| p1 p2 p3 p4 |	p1 := nil.	p2 := nil.	replaceVertexIndex >=2 		ifTrue: [p1 := self currentItem vertices at: (replaceVertexIndex - 1)].	replaceVertexIndex <=  (self currentItem vertices size - 1)		ifTrue: [p2 := self currentItem vertices at: (replaceVertexIndex + 1)].	(self currentItem isBoundary and:[		replaceVertexIndex = 1 or: [replaceVertexIndex = self currentItem vertices size]])			ifTrue: [				p1 := self currentItem vertices at: 2.				p2 := self currentItem vertices at: (self currentItem vertices size - 1).].	 		p3 := referencePoint.	p4 := moveToPoint.	^GeometryUtils lookupDataBounds: ({ p1 . p2 . p3 . p4 } reject: [:each | each isNil]).	! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 11/16/2008 22:47'!eventAction	self firstAndSecondAction.	self prompt: self moveToMessage.	morph invalidBounds: self calcUpdateBounds .! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:45'!firstAction	analisysResult := GeometryUtils 		analisysSegmentsAt: (self snapedWorldPoint) pointArray: self currentItem vertices.	"analisysResult explore."	replaceVertexIndex := self lookupReplaceVertexIndex. 	(self currentItem holdsElement)		ifTrue: [referencePoint := self currentItem vertices at: replaceVertexIndex]		! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 7/15/2009 15:42'!lookupReplaceVertexIndex	^GeometryUtils lookupVertexIndex: analisysResult! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 7/14/2009 13:39'!moveToVertex	moveToPoint := self snapedWorldPoint.	self currentItem 		verticesAt: replaceVertexIndex  		put: moveToPoint copy 		fixClosed: (self currentItem isBoundary).	! !!GdsMovePointTool methodsFor: 'action' stamp: 'kf 11/6/2008 21:25'!toolDidChange	self prompt: self coodinateMessage.! !!GdsMovePointTool methodsFor: 'testing' stamp: 'kf 11/28/2008 00:01'!autoFinishAfterPut	^true! !!GdsMovePointTool methodsFor: 'testing' stamp: 'kf 11/6/2008 16:37'!multiMoveSupported	^false! !!GdsMovePointTool methodsFor: 'prompt message' stamp: 'kf 11/6/2008 16:54'!coodinateMessage	^self multiMoveSupported 		ifTrue: ['Coordinate(s):']		ifFalse: ['Coordinate:']! !!GdsMovePointTool methodsFor: 'prompt message' stamp: 'kf 11/6/2008 16:55'!moveToMessage	^'Move to:'! !!GdsMovePointTool methodsFor: 'drawing' stamp: 'kf 11/6/2008 22:16'!drawFeedbackOn: aLocalCanvas	analisysResult ifNil: [^self].	({ referencePoint . moveToPoint } reject: [:each | each isNil])		do: [:each | morph drawOn: aLocalCanvas markDiamondPointAt: each].! !GdsNullTool subclass: #GdsVertexInputTool	instanceVariableNames: 'lastRubberBandPoint'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsVertexInputTool methodsFor: 'testing' stamp: 'kf 11/28/2008 00:01'!autoFinishAfterPut	^true! !!GdsVertexInputTool methodsFor: 'testing' stamp: 'kf 11/10/2008 10:49'!canFinish	^((self currentItem putEnabled) and: [(self currentItem vertices last) = self snapedWorldPoint])! !!GdsVertexInputTool methodsFor: 'testing' stamp: 'kf 10/27/2008 20:56'!rubberBandEnabled	stopCE ifNil: [stopCE := false].	^stopCE not.! !!GdsVertexInputTool methodsFor: 'drawing' stamp: 'kf 5/13/2009 16:40'!drawFeedbackOn: aLocalCanvas	self currentItem isReferenceType 		ifTrue: [morph drawItemReferencesOn: aLocalCanvas.]		ifFalse: [morph drawItemVerticesOn: aLocalCanvas.].	! !!GdsVertexInputTool methodsFor: 'drawing' stamp: 'kf 6/8/2009 16:53'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	| points wp1 vwp  |	self structure currentItem editElement ifNotNil: [^self].	self structure currentItem  isReferenceType  ifTrue: [^self].	points := (self structure currentItem vertices).	points ifEmpty: [		morph removeFeedbackCanvas.		^self.].	wp1 :=  points last.	vwp := self structure currentItem completionPointFrom: wp1 to: aPoint.	vwp 		ifNil: [morph drawOn: aLocalCanvas lineFrom: wp1 to: aPoint.] 		ifNotNil: [			vwp := self snapedWorldPoint: vwp.			morph drawOn: aLocalCanvas lineFrom: wp1 to: vwp.			(self structure currentItem digitaizingMode = #octagonal)				ifFalse: [					morph drawOn: aLocalCanvas lineFrom: vwp to: aPoint.].].	lastRubberBandPoint 		ifNotNil: [			morph invalidBoundsFromPoint1: wp1 point2: lastRubberBandPoint].	morph invalidBoundsFromPoint1: wp1 point2: aPoint.	lastRubberBandPoint := aPoint copy.! !!GdsVertexInputTool methodsFor: 'drawing' stamp: 'kf 11/24/2009 15:29'!markUpdateBounds: aPoint	| upBounds |	upBounds := Rectangle center: (morph activeViewport xy2hv: aPoint) extent: 10@10.	upBounds := upBounds translateBy: morph pixelBounds origin.	^upBounds! !!GdsVertexInputTool methodsFor: 'action' stamp: 'kf 6/8/2009 16:54'!eventAction	|vPoint ce1 points |	points := self currentItem vertices.	"points ifEmpty: [self item boundary.].	"	self canFinish		ifTrue: [						"self item put.			morph removeOffCanvas.			morph changed."			self stopCE.			^self finish].	ce1 := self snapedWorldPoint.	(points isEmpty)		ifTrue: [self currentItem ce: ce1]		ifFalse: [			(self currentItem digitaizingMode = #straight)				ifTrue: [					self currentItem ce: ce1.					morph invalidBoundsFromPoint1: ce1 point2: points last.].			vPoint := self  currentItem completionPointFrom: points last to: ce1.			vPoint ifNotNil:[				vPoint := self snapedWorldPoint: vPoint.								self currentItem ce: vPoint.				(self currentItem digitaizingMode = #orthint)					ifTrue: [						morph invalidBoundsFromPoint1: vPoint point2: points last.						self currentItem ce: ce1.						morph invalidBoundsFromPoint1: ce1 point2: points last.]					ifFalse: [						morph invalidBoundsFromPoint1: vPoint point2: points last.].]].				.	morph invalidRect: (self markUpdateBounds: ce1).! !!GdsVertexInputTool methodsFor: 'action' stamp: 'kf 10/27/2008 20:53'!stopCE	stopCE := true.! !!GdsVertexInputTool methodsFor: 'initialization' stamp: 'kf 10/27/2008 20:53'!initialize	super initialize.	stopCE := false.	! !GdsMovePointTool subclass: #GdsDeleteVertexTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/13/2009 17:41'!canFinish	^morph itemDeleteVertexEnabled not.! !!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/14/2009 15:58'!drawFeedbackOn: aLocalCanvas	morph drawItemLineSegmentsOn: aLocalCanvas width: 2.! !!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/13/2009 16:35'!eachAction	analisysResult := GeometryUtils 		analisysSegmentsAt: (self snapedWorldPoint) pointArray: self currentItem vertices.	"analisysResult explore."	replaceVertexIndex := self lookupReplaceVertexIndex. 	self currentItem removeVertexAt: replaceVertexIndex.! !!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/13/2009 16:27'!eventAction	self repeatEachAction.	self prompt: self promptMessage.	morph invalidBounds: self calcUpdateBounds .! !!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/13/2009 16:27'!promptMessage	^'Identify the Vertex to Delete:'.! !!GdsDeleteVertexTool methodsFor: 'as yet unclassified' stamp: 'kf 7/13/2009 16:28'!toolDidChange	self prompt: self promptMessage.! !GdsNullTool subclass: #GdsStretchTool	instanceVariableNames: 'analisysResult moveToSeg offsetSeg crossPointToPreSeg crossPointToPostSeg nonEditUpdateBounds lastUpdateBounds'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsStretchTool commentStamp: 'kf 11/14/2008 20:16' prior: 0!A GdsStretchTool is xxxxxxxxx.Instance Variables	analisysResult:		<Dictionary>	crossPointToPostSeg:		<Point>	crossPointToPreSeg:		<Point>	lastUpdateBounds:		<Rectangle>	moveToSeg:		<LineSegment>	nonEditUpdateBounds:		<Rectangle>	offsetSeg:		<LineSegment>analisysResult	- xxxxxcrossPointToPostSeg	- xxxxxcrossPointToPreSeg	- xxxxxlastUpdateBounds	- xxxxxmoveToSeg	- xxxxxnonEditUpdateBounds	- xxxxxoffsetSeg	- xxxxx!!GdsStretchTool methodsFor: 'testing' stamp: 'kf 11/28/2008 00:01'!autoFinishAfterPut	^true! !!GdsStretchTool methodsFor: 'testing' stamp: 'kf 11/5/2008 21:02'!vertexStrechSupported	"Sorry: current implements only Segment stretch"	^false! !!GdsStretchTool methodsFor: 'prompt message' stamp: 'kf 11/4/2008 14:15'!chooserMessage	^self vertexStrechSupported 		ifTrue: ['Point Near Segment or Vertex:']		ifFalse: ['Point Near Segment:'].! !!GdsStretchTool methodsFor: 'prompt message' stamp: 'kf 11/4/2008 14:17'!moveToMessage	^self moveTarget == #vertex 		ifTrue: ['Point to Pull Vertex to:']		ifFalse: ['Point to Stretch Edge To:'].! !!GdsStretchTool methodsFor: 'drawing' stamp: 'kf 11/2/2009 13:45'!drawFeedbackOn: aLocalCanvas	| segInfo crossPoint seg |	analisysResult ifNil: [^self].	segInfo := (analisysResult at: #infos) at: (analisysResult at: #index).	seg := (segInfo last at: #seg).	self clickCount \\ 2 = 1		ifTrue: [			morph drawOn: aLocalCanvas  lineSegment: seg  width: 2.			self drawSegmentEndPointByDiamondOn:  aLocalCanvas segment: seg.].	GdsFeelMorphic debugStretchFeedback ifFalse: [^self].		self markCrossPoint ifTrue:[		crossPoint := (segInfo last at: #crossPoint).		morph drawOn: aLocalCanvas centerCircleAt: crossPoint.].	morph invalidBoundsForSegment: seg.	moveToSeg ifNotNil: [		self drawOn: aLocalCanvas segment: moveToSeg].	offsetSeg ifNotNil: [		self drawOn: aLocalCanvas segment: offsetSeg].	self drawVirtualCrossPointOn: aLocalCanvas.! !!GdsStretchTool methodsFor: 'drawing' stamp: 'kf 11/5/2008 14:47'!drawOn: aLocalCanvas segment: segment	morph drawOn: aLocalCanvas  lineSegment: segment.	self drawSegmentEndPointByDiamondOn:  aLocalCanvas segment: segment.	morph invalidBoundsForSegment: segment.! !!GdsStretchTool methodsFor: 'drawing' stamp: 'kf 11/5/2008 09:52'!drawSegmentEndPointByCircleOn: aLocalCanvas segment: seg	morph drawOn: aLocalCanvas  centerCircleAt: seg start.	morph drawOn: aLocalCanvas  centerCircleAt: seg end.! !!GdsStretchTool methodsFor: 'drawing' stamp: 'kf 11/5/2008 09:53'!drawSegmentEndPointByDiamondOn: aLocalCanvas segment: seg	morph drawOn: aLocalCanvas  markDiamondPointAt:  seg start.	morph drawOn: aLocalCanvas  markDiamondPointAt: seg end.! !!GdsStretchTool methodsFor: 'drawing' stamp: 'kf 11/5/2008 15:00'!drawVirtualCrossPointOn: aLocalCanvas	crossPointToPreSeg ifNotNil: [		morph drawOn: aLocalCanvas markPointAt: crossPointToPreSeg].	crossPointToPostSeg ifNotNil: [		morph drawOn: aLocalCanvas markPointAt: crossPointToPostSeg].! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:59'!evenAction	"TODO:  Move to segment or vertices"				self moveToSegment.	"Next Message"	self prompt: self chooserMessage! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:37'!eventAction	self evenOddAction.! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:18'!firstAction	nonEditUpdateBounds := 		GeometryUtils 			lookupDataBounds: (self currentItem editElement dataOutlinePoints).! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/4/2008 14:16'!moveTarget	^#segment! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 7/14/2009 13:38'!moveToSegment	| segs fromDistanceMap segInfo seg toPoint preSeg postSeg toDistanceMap  circulerAllowed preSegIndex postSegIndex replaceVirtexPreIndex replaceVirtexPostIndex|	toPoint := self snapedWorldPoint.	analisysResult ifNil: [^self].	segInfo := (analisysResult at: #infos) at: (analisysResult at: #index).	fromDistanceMap := segInfo last.	seg := fromDistanceMap at: #seg.	toDistanceMap := GeometryUtils distanceMapAt: toPoint segment: seg.	offsetSeg := LineSegment 		from: (toDistanceMap at: #virtualCrossPoint) 		to: toPoint.	moveToSeg := LineSegment 		from: (seg start + offsetSeg direction) 		to: (seg end + offsetSeg direction).	circulerAllowed := (self currentItem isBoundary).	segs := GeometryUtils lineSegmentsFormPointArray: self currentItem vertices.	segs size = 1		ifTrue: [			self currentItem verticesAt: 1 put: moveToSeg start fixClosed: circulerAllowed.			self currentItem verticesAt: 2 put: moveToSeg end fixClosed: circulerAllowed.			^self updateInvalidArea].		"PREvious Segment"	preSegIndex := (analisysResult at: #index) - 1.	circulerAllowed ifTrue: [		preSegIndex := GeometryUtils 			asCirculerIndex:  preSegIndex segments: segs.].	preSeg := segs at: preSegIndex ifAbsent: nil.	replaceVirtexPreIndex := preSegIndex + 1.	preSeg ifNotNil: [		crossPointToPreSeg := preSeg intersectionWith: moveToSeg virtualAllowed: true].			"POST Segment"	postSegIndex := (analisysResult at: #index) + 1.	circulerAllowed ifTrue: [		postSegIndex := GeometryUtils 			asCirculerIndex:  postSegIndex segments: segs.].	postSeg := segs at: postSegIndex ifAbsent: nil.	replaceVirtexPostIndex := postSegIndex.	postSeg ifNotNil: [		crossPointToPostSeg := postSeg intersectionWith: moveToSeg virtualAllowed: true.].	circulerAllowed ifTrue: [		(crossPointToPreSeg isNil or: [crossPointToPostSeg isNil])			ifTrue:[^self updateInvalidArea].].		preSeg ifNil: [		crossPointToPreSeg := crossPointToPostSeg - moveToSeg direction].	postSeg ifNil: [		crossPointToPostSeg := crossPointToPreSeg + moveToSeg direction].	self currentItem 		verticesAt: replaceVirtexPreIndex 		put: crossPointToPreSeg copy		fixClosed: circulerAllowed.		self currentItem 		verticesAt: replaceVirtexPostIndex 		put: crossPointToPostSeg copy 		fixClosed: circulerAllowed.				self updateInvalidArea.! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/18/2008 09:58'!oddAction	"TODO: Test Segment of vertex analisysresult"	analisysResult := 		GeometryUtils 			analisysSegmentsAt: (self snapedWorldPoint) 			pointArray: self currentItem vertices.	moveToSeg := nil.	offsetSeg := nil.	crossPointToPostSeg := nil.	crossPointToPreSeg := nil.	"Next Message"	self prompt: self moveToMessage.! !!GdsStretchTool methodsFor: 'action' stamp: 'kf 11/16/2008 23:29'!updateInvalidArea		| currentUpdateBounds |	currentUpdateBounds := GeometryUtils lookupDataBounds: (self currentItem vertices) .	currentUpdateBounds := currentUpdateBounds merge: nonEditUpdateBounds.	lastUpdateBounds		ifNotNil: [currentUpdateBounds := currentUpdateBounds merge: lastUpdateBounds.].	morph invalidBounds: currentUpdateBounds.	lastUpdateBounds := currentUpdateBounds copy.! !!GdsStretchTool methodsFor: 'private' stamp: 'kf 11/5/2008 15:52'!itemSegmentAt: segIndex	^self itemSegmentAt:  segIndex circurlerAllowed: false.! !!GdsStretchTool methodsFor: 'private' stamp: 'kf 11/10/2008 10:58'!itemSegmentAt: segIndex circurlerAllowed: aBoolean	| segs|	segs := GeometryUtils lineSegmentsFormPointArray:  self currentItem vertices. 	aBoolean ifFalse: [^segs at: segIndex ifAbsent: [nil.]].	^segs at: (GeometryUtils asCirculerIndex: segIndex segments: segs).! !!GdsStretchTool methodsFor: 'debugging-use-only' stamp: 'kf 11/4/2008 16:14'!markCrossPoint	^false.! !!GdsStretchTool methodsFor: 'event handling' stamp: 'kf 11/4/2008 14:15'!toolDidChange	self prompt: self chooserMessage ! !GdsNullTool subclass: #GdsItemMoveTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsItemMoveTool methodsFor: 'action' stamp: 'kf 11/14/2008 15:17'!afterSecondAction	self offsetAction: [		self currentItem translate: self relativeOffset]! !!GdsItemMoveTool methodsFor: 'action' stamp: 'kf 11/14/2008 14:50'!eventAction	self firstAndSecondAction.	super eventAction.	"TODO: caluc update bounds"	morph invalidRect: (morph bounds).! !!GdsItemMoveTool methodsFor: 'action' stamp: 'kf 11/14/2008 15:00'!firstAction	self saveReferencePoint.! !!GdsItemMoveTool methodsFor: 'prompt message' stamp: 'kf 11/8/2008 15:45'!afterSecondMessage	^self moveToMessage. ! !!GdsItemMoveTool methodsFor: 'prompt message' stamp: 'kf 11/8/2008 15:46'!firstMessage	^self referenceMessage.! !!GdsItemMoveTool methodsFor: 'prompt message' stamp: 'kf 11/6/2008 16:40'!moveToMessage	^'Coordinate to Move to:'.! !!GdsItemMoveTool methodsFor: 'testing' stamp: 'kf 11/28/2008 00:00'!autoFinishAfterPut	^true! !!GdsItemMoveTool methodsFor: 'testing' stamp: 'kf 11/10/2008 11:04'!canFinish	self currentItem holdsElement ifFalse: [^true].	^((self currentItem putEnabled) and: [lastPoint = self snapedWorldPoint])! !!GdsItemMoveTool methodsFor: 'testing' stamp: 'kf 10/29/2008 00:15'!rubberBandEnabled	^true.! !!GdsItemMoveTool methodsFor: 'drawing' stamp: 'kf 11/14/2008 23:35'!drawFeedbackOn: aLocalCanvas	self markOffsetFeedbackOn: aLocalCanvas.! !!GdsItemMoveTool methodsFor: 'event handling' stamp: 'kf 11/6/2008 16:44'!toolDidChange	self prompt: self referenceMessage.! !GdsNullTool subclass: #GdsQuickPointsTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:59'!acceptFromPoint: aPoint1 toPoint: aPoint2	self subclassResponsibility.! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 12/3/2009 22:50'!evenAction	referencePoint ifNil: [ ^ self ].	lastPoint := self snapedWorldPoint.	self samePointEnabled		ifFalse: [			lastPoint = referencePoint ifTrue: [ ^ self ]].	(self isAcceptableFromPoint: referencePoint toPoint: lastPoint)  		ifTrue: [			self acceptFromPoint: referencePoint toPoint: lastPoint]		ifFalse: [			self rejectFromPoint: referencePoint toPoint: lastPoint].			morph removeFeedbackCanvas.	referencePoint := nil.	self prompt: 'Ce 1:'		! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:51'!eventAction	self evenOddAction.! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:51'!firstAction! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:54'!isAcceptableFromPoint: aPoint1 toPoint: aPoint2	^aPoint1 ~= aPoint2.! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:52'!oddAction	self  saveReferencePoint.	self prompt: 'Ce 2:'	! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 12/3/2009 22:34'!rejectFromPoint: aPoint1 toPoint: aPoint2	"self subclassResponsibility."! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:52'!rubberBandEnabled	^true! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 12/3/2009 22:50'!samePointEnabled	^false	! !!GdsQuickPointsTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:52'!toolDidChange	self prompt: 'Ce 1:'! !GdsQuickPointsTool subclass: #GdsQuickBoundsTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsQuickBoundsTool methodsFor: 'action' stamp: 'kf 5/6/2009 16:55'!acceptBoundsAction: aRectangle	self subclassResponsibility! !!GdsQuickBoundsTool methodsFor: 'action' stamp: 'kf 7/8/2009 10:00'!acceptFromPoint: aPoint1 toPoint: aPoint2	| bounds |	bounds := Rectangle encompassing: {  aPoint1.  aPoint2  }.	self acceptBoundsAction: bounds.! !!GdsQuickBoundsTool methodsFor: 'drawing' stamp: 'kf 5/8/2009 23:58'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	self		drawRubberBandOn: aLocalCanvas		currentPoint: aPoint		boundsBlock: [:bounds | morph drawOn: aLocalCanvas strokeBounds: bounds]	! !!GdsQuickBoundsTool methodsFor: 'testing' stamp: 'kf 5/6/2009 16:58'!isAcceptableBounds: aRectangle	^(aRectangle area = 0) not.	! !!GdsQuickBoundsTool methodsFor: 'testing' stamp: 'kf 7/8/2009 09:58'!isAcceptableFromPoint: aPoint1 toPoint: aPoint2	| bounds |	bounds := Rectangle encompassing: {  aPoint1.  aPoint2  }.	^self isAcceptableBounds: bounds.! !GdsQuickBoundsTool subclass: #GdsDirectRectangleTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsDirectRectangleTool methodsFor: 'action' stamp: 'kf 5/4/2009 23:56'!acceptBoundsAction: aRectangle	self putBoundary: aRectangle	! !!GdsDirectRectangleTool methodsFor: 'action' stamp: 'kf 5/9/2009 14:35'!putBoundary: aRectangle	self currentItem putRectangle: aRectangle.	! !GdsQuickBoundsTool subclass: #GdsViewingTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsViewingTool methodsFor: 'as yet unclassified' stamp: 'kf 12/4/2009 13:03'!acceptBoundsAction: aRectangle	morph viewport viewBounds: aRectangle.		! !!GdsViewingTool methodsFor: 'as yet unclassified' stamp: 'kf 12/4/2009 13:03'!changeCursor	morph changeCursorToViewing.! !!GdsViewingTool methodsFor: 'as yet unclassified' stamp: 'kf 12/4/2009 13:03'!rejectBoundsAction: aRectangle	morph viewport viewCenter: aRectangle center.! !!GdsViewingTool methodsFor: 'as yet unclassified' stamp: 'kf 12/4/2009 13:03'!rejectFromPoint: aPoint1 toPoint: aPoint2	| bounds |	bounds := Rectangle encompassing: {  aPoint1.  aPoint2  }.	self rejectBoundsAction: bounds.! !!GdsViewingTool methodsFor: 'as yet unclassified' stamp: 'kf 12/4/2009 13:03'!samePointEnabled	^true! !GdsQuickBoundsTool subclass: #GdsDirectBoxTextTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsDirectBoxTextTool methodsFor: 'action' stamp: 'kf 5/6/2009 17:03'!acceptBoundsAction: aRectangle	self putBoxText:  aRectangle	! !!GdsDirectBoxTextTool methodsFor: 'drawing' stamp: 'kf 5/9/2009 00:19'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	self		drawRubberBandOn: aLocalCanvas		currentPoint: aPoint		boundsBlock: [:bounds | 			| drawer | 			morph drawOn: aLocalCanvas strokeBounds: bounds.			morph				drawOn: aLocalCanvas				fittingStrokeString: self currentItem text				bounds: bounds]! !!GdsDirectBoxTextTool methodsFor: 'private' stamp: 'kf 5/6/2009 17:18'!putBoxText: aRectangle	self currentItem boxtext.	self currentItem ce: aRectangle origin.	self currentItem ce: aRectangle corner.	self currentItem put.! !GdsNullTool subclass: #GdsGetTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsGetTool methodsFor: 'action' stamp: 'kf 11/13/2008 09:35'!eventAction	self elementDetectAction.	self finish. "one shot command".	super eventAction.	! !!GdsGetTool methodsFor: 'action' stamp: 'kf 11/2/2009 13:44'!eventActionAt: aWorldPoint element: aGdsElement	aGdsElement ifNotNil: [self currentItem get: aGdsElement ].	GdsFeelMorphic debugFindElement 		ifTrue: [			aGdsElement ifNotNil: [(aGdsElement analisys: aWorldPoint) explore]].		! !!GdsGetTool methodsFor: 'prompt message' stamp: 'kf 11/6/2008 17:00'!nearestPointMessage	^'Enter nearest point for element.'.! !!GdsGetTool methodsFor: 'event handling' stamp: 'kf 11/6/2008 17:00'!toolDidChange	self prompt: self nearestPointMessage.! !GdsNullTool subclass: #GdsAbstractIdTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsAbstractIdTool methodsFor: 'action' stamp: 'kf 11/13/2008 17:29'!eventAction	self elementDetectAction.	super eventAction.	! !!GdsAbstractIdTool methodsFor: 'action' stamp: 'kf 11/13/2008 10:43'!eventActionAt: aWorldPoint element: aGdsElement	| keyNumber |	keyNumber := aGdsElement ifNil: [0] ifNotNil: [aGdsElement keyNumber].	(keyNumber > 0 and: [aGdsElement state = #inItem])		ifTrue: [Transcript cr; show: '*** WARNING *** can''t id select when in item.']		ifFalse: [self eventActionAt: aWorldPoint elementId: keyNumber.].	! !!GdsAbstractIdTool methodsFor: 'action' stamp: 'kf 11/13/2008 10:44'!eventActionAt: aWorldPoint elementId: aKeyNumber	self subclassResponsibility.! !!GdsAbstractIdTool methodsFor: 'accessing' stamp: 'kf 11/18/2008 14:21'!idEnabledElements	^self idEnabledElementsInverted: false.! !!GdsAbstractIdTool methodsFor: 'accessing' stamp: 'kf 6/8/2009 16:48'!idEnabledElementsInverted: aBoolean 	| targetElements |	targetElements := morph visibleElements.	^aBoolean 		ifTrue: [ targetElements select: [ :each | each state = #inId ] ]		ifFalse: 			[ targetElements reject: [ :each | each state = #inId or: [ each state = #inItem ] ] ]! !!GdsAbstractIdTool methodsFor: 'prompt message' stamp: 'kf 11/13/2008 09:18'!nearestPointMessage	^'Enter nearest point for element.'.! !!GdsAbstractIdTool methodsFor: 'event handling' stamp: 'kf 11/13/2008 09:17'!toolDidChange	self prompt: self nearestPointMessage.! !GdsAbstractIdTool subclass: #GdsIdWindowTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsIdWindowTool methodsFor: 'drawing' stamp: 'kf 11/18/2008 13:40'!drawFeedbackOn: aLocalCanvas! !!GdsIdWindowTool methodsFor: 'drawing' stamp: 'kf 5/8/2009 23:58'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	self		drawRubberBandOn: aLocalCanvas		currentPoint: aPoint		boundsBlock: [:bounds | morph drawOn: aLocalCanvas strokeBounds: bounds]! !!GdsIdWindowTool methodsFor: 'action' stamp: 'kf 11/13/2009 16:19'!evenAction	| bounds idElements |	referencePoint ifNil: [ ^ self ].	lastPoint := self snapedWorldPoint.	lastPoint = referencePoint ifTrue: [ ^ self ].	bounds := Rectangle encompassing: {  referencePoint. lastPoint  }.	idElements := (self idEnabledElementsInverted: (self idSelecter = #unId:)) 		select: [ :each | each dataBounds intersects: bounds ].	idElements do: [:each |		 self structure idSelection perform: self idSelecter with: each keyNumber].		morph removeFeedbackCanvas.	referencePoint := nil.	! !!GdsIdWindowTool methodsFor: 'action' stamp: 'kf 11/18/2008 10:52'!eventAction	self evenOddAction.! !!GdsIdWindowTool methodsFor: 'action' stamp: 'kf 11/18/2008 11:38'!firstAction	! !!GdsIdWindowTool methodsFor: 'action' stamp: 'kf 11/18/2008 10:55'!oddAction	self  saveReferencePoint.	! !!GdsIdWindowTool methodsFor: 'accessing' stamp: 'kf 11/18/2008 14:28'!idSelecter	^userInfo! !!GdsIdWindowTool methodsFor: 'testing' stamp: 'kf 11/18/2008 13:47'!rubberBandEnabled	^true! !GdsAbstractIdTool subclass: #GdsIdOffsetTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsIdOffsetTool methodsFor: 'action' stamp: 'kf 11/17/2008 10:33'!afterSecondAction	self offsetAction: [		self structure perform: self offsetOperation with: self relativeOffset]! !!GdsIdOffsetTool methodsFor: 'action' stamp: 'kf 11/14/2008 23:41'!eventAction	self firstAndSecondAction.	"TODO: caluc update bounds"	morph invalidRect: (morph bounds).	! !!GdsIdOffsetTool methodsFor: 'action' stamp: 'kf 11/14/2008 21:40'!firstAction	self saveReferencePoint.! !!GdsIdOffsetTool methodsFor: 'prompt message' stamp: 'kf 11/17/2008 10:40'!afterSecondMessage	^self offsetOperation = #idCopyOffset: 		ifTrue: [self copyToMessage]		ifFalse: [self moveToMessage]. ! !!GdsIdOffsetTool methodsFor: 'prompt message' stamp: 'kf 11/17/2008 10:38'!copyToMessage	^'Copy to: '.! !!GdsIdOffsetTool methodsFor: 'prompt message' stamp: 'kf 11/14/2008 23:33'!firstMessage	^self referenceMessage.! !!GdsIdOffsetTool methodsFor: 'prompt message' stamp: 'kf 11/17/2008 10:38'!moveToMessage	^'Move to: '.! !!GdsIdOffsetTool methodsFor: 'prompt message' stamp: 'kf 11/14/2008 23:39'!toolDidChange	self prompt: self firstMessage .! !!GdsIdOffsetTool methodsFor: 'drawing' stamp: 'kf 11/14/2008 23:35'!drawFeedbackOn: aLocalCanvas	self markOffsetFeedbackOn: aLocalCanvas.! !!GdsIdOffsetTool methodsFor: 'accessing' stamp: 'kf 11/17/2008 10:29'!offsetOperation	^userInfo! !GdsAbstractIdTool subclass: #GdsIdTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsIdTool methodsFor: 'action' stamp: 'kf 11/13/2008 11:37'!eventActionAt: aWorldPoint elementId: aKeyNumber	morph structure idSelection perform: self idSelecter with: aKeyNumber.	! !!GdsIdTool methodsFor: 'accessing' stamp: 'kf 11/18/2008 14:21'!findNearestElementByPoint: resultPoint 	^ self structure 		findNearestElementByPoint: resultPoint		elements: (self idEnabledElementsInverted: self idSelecter = #unId:)! !!GdsIdTool methodsFor: 'accessing' stamp: 'kf 11/13/2008 11:37'!idSelecter	^userInfo! !GdsQuickPointsTool subclass: #GdsDirectSegmentTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Tools'!!GdsDirectSegmentTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:48'!acceptFromPoint: aPoint1 toPoint: aPoint2	self putPathFrom: aPoint1 to: aPoint2! !!GdsDirectSegmentTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 10:14'!drawRubberBandOn: aLocalCanvas currentPoint: aPoint 	self 		drawRubberBandOn: aLocalCanvas 		currentPoint: aPoint 		segmentBlock: [			:pt1 :pt2 |			morph drawOn: aLocalCanvas lineFrom: pt1 to: pt2.].! !!GdsDirectSegmentTool methodsFor: 'as yet unclassified' stamp: 'kf 7/8/2009 09:43'!putPathFrom: aPoint1 to: aPoint2	self currentItem putPathFrom: aPoint1 to: aPoint2! !