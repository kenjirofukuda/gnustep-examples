Model subclass: #GdsIdContext	instanceVariableNames: 'structure ids'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-EditSpace'!!GdsIdContext commentStamp: 'kf 11/12/2008 13:38' prior: 0!A GdsIdContext is element identify selection context.Instance Variables!!GdsIdContext methodsFor: 'accessing' stamp: 'kf 11/12/2008 14:14'!elements	self isEmpty ifTrue: [^#() copy].	^structure liveElements select: [:each | ids includes: each keyNumber].! !!GdsIdContext methodsFor: 'accessing' stamp: 'kf 11/13/2008 14:31'!keyNumbers	self isEmpty ifTrue: [^#() copy].	^ids! !!GdsIdContext methodsFor: 'accessing' stamp: 'kf 11/12/2008 14:06'!structure: aGdsStructure	aGdsStructure		ifNil: [structure ifNotNil: [self removeDependent: structure]]		ifNotNil: [self addDependent: aGdsStructure].	structure := aGdsStructure.	self changed: #structure.		! !!GdsIdContext methodsFor: 'testing' stamp: 'kf 11/12/2008 14:11'!enabled	^self isEmpty not.! !!GdsIdContext methodsFor: 'testing' stamp: 'kf 11/13/2008 16:00'!idClearEnabled	^self notEmpty.! !!GdsIdContext methodsFor: 'testing' stamp: 'kf 11/14/2008 22:47'!idDeleteEnabled	^self notEmpty.! !!GdsIdContext methodsFor: 'testing' stamp: 'kf 11/13/2008 13:43'!isEmpty	structure ifNil: [^true].	ids ifNil: [^true].	^ids  isEmpty.! !!GdsIdContext methodsFor: 'testing' stamp: 'kf 11/13/2008 15:38'!notEmpty	^self isEmpty not.! !!GdsIdContext methodsFor: 'private' stamp: 'kf 11/13/2008 15:13'!forgetStructure	self idClear.	structure ifNotNil: [self removeDependent: structure].	structure := nil.	! !!GdsIdContext methodsFor: 'private' stamp: 'kf 11/12/2008 14:03'!privateIdClear	ids := nil.! !!GdsIdContext methodsFor: 'id operation' stamp: 'kf 11/13/2008 15:44'!id: keyNumber 	self privateIdClear.	self idAdd: keyNumber.	self changed: #id! !!GdsIdContext methodsFor: 'id operation' stamp: 'kf 11/14/2008 22:28'!idAdd: keyNumber 	self assert: [keyNumber isKindOf: Integer].	ids ifNil: [ ids := Set new ].	ids add: keyNumber.	self changed: #id! !!GdsIdContext methodsFor: 'id operation' stamp: 'kf 11/12/2008 14:03'!idClear	self privateIdClear.	self changed: #id! !!GdsIdContext methodsFor: 'id operation' stamp: 'kf 11/14/2008 23:27'!idDelete	structure idDelete.	 	structure updateIdState.	self privateIdClear.	self changed: #tstructEnabed.	self changed: #idDelete.	self changed: #id! !!GdsIdContext methodsFor: 'id operation' stamp: 'kf 11/13/2008 11:55'!unId: keyNumber 	ids ifNil: [ ^ self ].	ids remove: keyNumber ifAbsent: [Transcript cr; show: '*** WARNING ***' , 'UNID: ',keyNumber printString, ' not in id selection'].	self changed: #id! !Model subclass: #GdsItemContext	instanceVariableNames: 'structure elementType colVertices digitaizingDirection digitaizingMode editElement itemNumber offset width text structureName wire datatype layerNumber ashape strans'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-EditSpace'!!GdsItemContext commentStamp: 'kf 5/4/2009 11:40' prior: 0!A GdsItemContext is attribute holder for ITEM edit.Instance Variables	colVertices:		<Array<Point>>	digitaizingDirection:		<Symbol>	digitaizingMode:		<Symbol>	editElement:		<GdsElement>	elementType:		<Symbol>	itemNumber:		<SmallInteger>	layer:		<SmallInteger>	width:		<Float>	structure:		<GdsStructure>colVertices	- xxxxxdigitaizingDirection	- xxxxxdigitaizingMode	- xxxxxeditElement	- xxxxxelementType	- xxxxxitemNumber	- xxxxxlayer	- xxxxxstructure	- xxxxx!!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/10/2009 09:59'!angle	^strans angle	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/16/2009 11:01'!angle: aDegrees	| newAngle oldAngle |	oldAngle := self angle360: self angle.  	newAngle := self angle360: aDegrees.	oldAngle = newAngle ifTrue: [^self].	self privateAngle: newAngle.	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/9/2009 12:09'!ashape	^ashape! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 13:20'!datatype	^datatype		! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 13:29'!datatype: anInteger	datatype  = anInteger ifTrue: [^self].	datatype := anInteger.	self changed: #datatype.	"TODO: remove this change. Model not known GUI"	"self changed: #chooseDataTypeLabel.	"	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/21/2008 17:36'!digitaizingMode	digitaizingMode ifNil: [self digitaizingMode: #straight].	^digitaizingMode! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/16/2009 10:56'!digitaizingMode: aSymbol	digitaizingMode = aSymbol ifTrue: [^self].	digitaizingMode := aSymbol.	self orthintActivated 		ifTrue:[			self changed: #vertfirstActivated.			self changed: #horizfirstActivated.].			self changed: #vertfirstEnabled.	self changed: #horizfirstEnabled.		self changed: #straightActivated.	self changed: #octagonalActivated.	self changed: #orthintActivated.! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/26/2008 14:45'!editElement	^editElement! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/5/2008 15:58'!elementType	^elementType! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/12/2009 18:10'!elementType: aSymbol	elementType = aSymbol ifTrue: [^self].	elementType := aSymbol.	self changed: #elementType.	self changed: #boundaryActivated.	self changed: #pathActivated.	self changed: #srefActivated.		self changed: #arefActivated.		self putGetDependentSelectors do: [:each |		self changed: each].! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 10:40'!layerNumber	^layerNumber.! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 13:32'!layerNumber: aInteger	layerNumber = aInteger ifTrue: [^self].	layerNumber := aInteger.	self changed: #layerNumber.	"TODO: remove this change. Model not known GUI"		self changed: #chooseLayerLabel.	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/10/2009 10:00'!mag	^strans mag.	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/16/2009 11:04'!mag: aFactor	| oldValue newValue |	oldValue := self fixMag: self mag.	newValue := self fixMag: aFactor.	oldValue = newValue ifTrue: [^self].	self privateMag: newValue.	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 11/10/2008 14:23'!number	^itemNumber! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 11:33'!pathtype	^wire pathtype		! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 11:32'!pathtype: anInteger	wire pathtype  = anInteger ifTrue: [^self].	wire pathtype: anInteger.	self changed: #pathtype.	"TODO: remove this change. Model not known GUI"	self changed: #choosePathTypeLabel.			! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/12/2009 15:27'!structureName	^structureName! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/14/2009 23:14'!structureName: aString	structureName := aString.	self changed: #sname.	self changed: #srefEnabled.	self changed: #ceEnabled.	self changed: #chooseStructureNameLabel. "BAD BUT..."! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/7/2009 14:51'!text	text ifNil: [text := 'UNTITLED'].	^text	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 5/16/2009 10:55'!text: aString	text = aString ifTrue: [^self].	text := aString.	self changed: #text.	! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 11:32'!width	^wire width		! !!GdsItemContext methodsFor: 'accessing' stamp: 'kf 10/27/2009 12:01'!width: aFloat	wire width  = aFloat ifTrue: [^self].	wire width: aFloat.	self changed: #width.	"TODO: remove this change. Model not known GUI"	self changed: #requestWidthLabel.	! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 5/16/2009 10:59'!angle360: aDegree	| rem |	rem := aDegree asFloat rem: 360.0.	^aDegree negative ifTrue: [360.0 + rem] ifFalse: [rem].	! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 7/13/2009 17:28'!feedbackElements	| el |	el := self  editElement.	el ifNotNil: [		el := el copy.		[el fromItemContext: self]			on: Error do: [:ex | ^#() copy].		^Array with: el ].		^[self isReferenceType			ifTrue: [self  createElements] 			ifFalse: [ Array with: self createElement ]]		on: Error do:  [:ex | #() copy].! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 5/16/2009 11:02'!fixMag: aFactor	^(aFactor asFloat <= 0.0) ifTrue: [1.0] ifFalse: [aFactor asFloat].	! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 7/8/2009 09:42'!putPathFrom: aPoint1 to: aPoint2	self  path.	self  ce: aPoint1.	self  ce: aPoint2.	self  put.! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 5/9/2009 14:34'!putRectangle: aRectangle	self  boundary.	(GeometryUtils verticesFromBounds: aRectangle)		do: [:each | self  ce: each].	self  put.! !!GdsItemContext methodsFor: 'utility' stamp: 'kf 11/10/2009 14:36'!toggleReflect	self  setReflected: self  isReflected not.! !!GdsItemContext methodsFor: 'command-elementKind' stamp: 'kf 10/21/2008 17:49'!boundary	self elementType: #boundary.	! !!GdsItemContext methodsFor: 'command-elementKind' stamp: 'kf 5/6/2009 17:04'!boxtext	self elementType: #boxtext.	! !!GdsItemContext methodsFor: 'command-elementKind' stamp: 'kf 10/21/2008 17:49'!path	self elementType: #path.	! !!GdsItemContext methodsFor: 'command-elementKind' stamp: 'kf 5/12/2009 11:35'!sref	self elementType: #sref.	! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 11/9/2009 14:10'!ashapeInstalled	^(Smalltalk 		at: #GdsAShapeContext		ifAbsent: [ nil ]) notNil! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/14/2009 13:38'!boundaryActivated	^self isBoundary.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/15/2009 11:36'!boundaryClosed	^(self isBoundary) and: [	(self colVertices size > 3) and:	[self colVertices first = self colVertices last]].! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/21/2008 17:13'!boundaryEnabled	^true! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/7/2009 14:52'!enterTextEnabled	^true! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/26/2008 22:21'!getEnabled	^editElement isNil and: [self vertices isEmpty].! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/28/2008 22:16'!holdsElement	^editElement isNil not.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/14/2009 15:39'!isAbsAngle	^false "should implement."	! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/14/2009 15:40'!isAbsMag	^false "should implement."	! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/14/2009 13:37'!isBoundary	^elementType == #boundary.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 11/10/2008 15:10'!isEmpty	^self colVertices isEmpty! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/13/2009 11:58'!isPrimitiveType	^self isReferenceType not! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/13/2009 11:58'!isReferenceType	^self elementClass isReference! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/15/2009 10:19'!itemReverseEnabled	^ self vertexCount >= 2! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/23/2008 20:27'!layerEnabled	self elementClass ifNil: [^false].	^self elementClass hasLayer.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/15/2009 11:07'!needsCloseBoundary	self isBoundary ifFalse: [^false].	self colVertices size < 3 ifTrue: [^false].	^(self colVertices first ~= self colVertices last).! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/21/2008 17:52'!pathActivated	^elementType == #path.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/21/2008 17:13'!pathEnabled	^true! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/27/2009 11:22'!pathTypeEnabled	self elementClass ifNil: [^false].	^self elementClass = GdsPath.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 7/14/2009 14:53'!putEnabled	self elementClass ifNil: [^false].	^(self vertexCount >= self elementClass requiredVertexCount)! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/12/2009 11:43'!snameSpecified	^structureName isEmpty not.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/12/2009 11:40'!srefActivated	^elementType == #sref.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 8/16/2009 17:54'!srefEnabled	structure ifNil: [ ^ false ].	structure database ifNil: [ ^ false ].	^ structure  referenceEnabledStructureNames isEmpty not! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 11/8/2008 15:00'!ungetEnabled	^self holdsElement! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 5/13/2009 11:14'!widthEnabled	self elementClass ifNil: [^false].	^self elementClass hasWidth.! !!GdsItemContext methodsFor: 'testing' stamp: 'kf 10/28/2008 22:17'!wipeEnabled	^self holdsElement! !!GdsItemContext methodsFor: 'command-points' stamp: 'kf 6/8/2009 17:10'!ce: aPoint	| absPoint |	aPoint class = Point		ifFalse: [self error: 'ce: require Point instance.'].	offset ifNil: [offset := 0@0].	absPoint := offset + aPoint.	(self colVertices isEmpty not)		ifTrue: [			(self colVertices last = absPoint)				ifTrue: [^self.]].	self colVertices add: absPoint.	self changedPutGetDpendent.		! !!GdsItemContext methodsFor: 'command-points' stamp: 'kf 11/27/2008 21:06'!ceMove: deltaPoint	deltaPoint class = Point		ifFalse: [self error: 'ceMove: require Point instance.'].	offset := offset + deltaPoint.	! !!GdsItemContext methodsFor: 'command-points' stamp: 'kf 11/27/2008 21:06'!ceMoveTo: aPoint	aPoint class = Point		ifFalse: [self error: 'ceMoveTo: require Point instance.'].	offset := aPoint.	! !!GdsItemContext methodsFor: 'command-points' stamp: 'kf 10/28/2008 23:51'!translate: aPoint	| col |	aPoint class = Point		ifFalse: [self error: 'ce: require Point instance.'].	(self colVertices size <= 0)		ifTrue: [self error: 'empty vertices'.].	col := colVertices copy.	col doWithIndex: [ :p :i |		colVertices at: i put: p + aPoint.].	self changed: #geometry.! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/6/2008 17:37'!changedPutGetDpendent	self putGetDependentSelectors do: [:each | self changed: each].! !!GdsItemContext methodsFor: 'private' stamp: 'kf 9/20/2008 14:12'!colVertices	colVertices ifNil: [colVertices := OrderedCollection  new].	 ^colVertices.! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/17/2009 10:41'!completionPointFrom: aPoint1 to: aPoint2	| deltaPoint r theta roundedTheta |	(self digitaizingMode = #straight)		ifTrue: [^nil.].	(self digitaizingMode = #octagonal)		ifTrue: [			deltaPoint := aPoint2 - aPoint1.			r := deltaPoint r.			theta := deltaPoint theta.			roundedTheta := GeometryUtils octagonalRoundTheta: theta.			^(Point r: r degrees: roundedTheta radiansToDegrees) + aPoint1.].	(self digitaizingMode = #orthint)		ifTrue: [			^(self digitaizingDirection = #vertfirst)				ifTrue: [(aPoint1 x)@(aPoint2 y)]				ifFalse: [(aPoint2 x)@(aPoint1 y)]].	^nil.! !!GdsItemContext methodsFor: 'private' stamp: 'kf 10/31/2009 20:13'!forgetStructure	structure ifNotNil: [		"self removeDependent: structure."		structure := nil]	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 11:36'!isReflected	^strans isReflected	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2008 11:35'!number: aNumber	itemNumber := aNumber.	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 09:59'!privateAngle: aDegree	strans angle: aDegree.	self changed: #angle.	"TODO: remove this change. Model not known GUI"	self changed: #requestAngleLabel.		! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 10:00'!privateMag: aFloat	strans mag: aFloat.	self changed: #mag.	"TODO: remove this change. Model not known GUI"	self changed: #requestMagLabel.		! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 14:39'!privateReflected: aBoolean	strans setReflected: aBoolean.	self changed: #reflected.	self changed: #toggleReflectLabel.	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/13/2008 10:14'!privateUnget	editElement ifNil: [self error: 'item is not holds element'].	self colVertices ifEmpty: [ self error: 'empty vertices' ].	self elementClass ifNil: [ self error: 'element type not set' ].	self privateWipe.		editElement statusNumber: GdsElement inDatabaseStausNumber.	editElement := nil.! !!GdsItemContext methodsFor: 'private' stamp: 'kf 10/27/2008 23:12'!privateWipe	colVertices := nil.	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/12/2009 18:13'!putGetDependentSelectors	| col |	col := OrderedCollection new.	col add: #boundaryEnabled.	col add: #pathEnabled.	col add: #srefEnabled.	col add: #arefEnabled.		col add: #putEnabled.	col add: #ungetEnabled.	col add: #ceEnabled.	col add: #getElementEnabled.	col add: #confirmWipeEnabled.	col add: #itemMoveEnabled.	col add: #itemStretchEnabled.	col add: #itemMovePointEnabled.	col add: #itemDeleteVertexEnabled.	col add: #itemReverseEnabled.		col add: #chooseLayerEnabled.	col add: #requestWidthEnabled.	col add: #choosePathTypeEnabled.	col add: #chooseStructureNameEnabled.	col add: #requestAngleEnabled.	col add: #requestMagEnabled.	col add: #toggleReflectEnabled.	col add: #requestArrayShapeEnabled.	col add: #tstructEnabled.	col add: #holdsElement.	"dizitizing direction"	col add: #vertfirstEnabled.	col add: #horizfirstEnabled.	col add: #octagonalEnabled.	col add: #straightEnabled.	col add: #orthintEnabled.	^ col asArray! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/6/2009 18:00'!refreshBounds	"dummy"! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 14:16'!safeReset	structureName := ''.	strans safeReset.			! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 11:31'!setReflected: aBoolean	self privateReflected: aBoolean.	! !!GdsItemContext methodsFor: 'private' stamp: 'kf 11/10/2009 14:16'!structure: aGdsStructure	self assert: [aGdsStructure isNil not].	self safeReset.	structure := aGdsStructure.	self addDependent: structure.	! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 7/15/2009 11:06'!closeVertex	(self needsCloseBoundary)		ifTrue: [colVertices add: (self colVertices first copy)].! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 7/14/2009 14:36'!removeVertexAt: anIndex		| savedSize closed |	savedSize := self colVertices size.	savedSize = 0 ifTrue: [^self].	closed := (savedSize >= 4) and: [self colVertices first = self colVertices last].	colVertices removeAt: anIndex.	(self isBoundary and: [closed])		ifTrue: [			anIndex = 1				ifTrue: [colVertices removeLast].			anIndex = savedSize				ifTrue: [colVertices removeFirst].			self closeVertex].	self changed: #geometry.! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 7/14/2009 14:52'!vertexCount	(self isBoundary and: [self vertices size > 1])		ifTrue: [			self vertices first = self vertices last				ifTrue: [^self vertices size - 1]].	^self vertices size! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 9/20/2008 14:12'!vertices	^self colVertices asArray.! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 7/14/2009 14:29'!verticesAt: index put: aPoint	self verticesAt:  index put: aPoint  fixClosed: self isBoundary.! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 11/5/2008 16:55'!verticesAt: index put: aPoint fixClosed: aBoolean.	(aBoolean and: [index = 1 or: [colVertices size = index]])		ifFalse: [colVertices at: index put: aPoint]		ifTrue: [			colVertices at: 1 put: aPoint.			colVertices at: (colVertices size) put: aPoint].	self changed: #geometry.! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 5/6/2009 17:17'!verticesBounds	^GeometryUtils lookupDataBounds: self vertices.! !!GdsItemContext methodsFor: 'accessing-points' stamp: 'kf 7/15/2009 11:09'!verticesWithoutClosePoint	self boundaryClosed		ifTrue: [^self vertices allButLast].		^self vertices! !!GdsItemContext methodsFor: 'copying' stamp: 'kf 5/15/2009 10:02'!copyTo: aGdsItemContext	aGdsItemContext privateWipe.	aGdsItemContext vertices: self vertices.	! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/8/2008 22:18'!createElement	^self elementClass fromItemContext: self.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 5/12/2009 16:54'!createElements	| elements |	elements := OrderedCollection new.	1 to: self vertices size do: [:index |		elements add: (self elementClass fromItemContext: self atIndex: index).].	^elements asArray.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 9/23/2008 23:16'!digitaizingDirection	digitaizingDirection ifNil: [digitaizingDirection := #vertfirst.].	^digitaizingDirection.	! !!GdsItemContext methodsFor: 'command' stamp: 'kf 10/21/2008 18:14'!digitaizingDirection: aSymbol	digitaizingDirection := aSymbol.	self changed: #vertfirstActivated.	self changed: #horizfirstActivated.	! !!GdsItemContext methodsFor: 'command' stamp: 'kf 10/23/2008 20:10'!elementClass	^GdsElement classForType: elementType.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/13/2008 10:14'!get: aGdsElement	self colVertices ifNotEmpty: [^self error: 'item not empty'].	self importAttribute: aGdsElement.	aGdsElement statusNumber: itemNumber.	editElement := aGdsElement.	self changed.	self changedPutGetDpendent.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/10/2009 11:33'!importAttribute: aGdsElement	aGdsElement hasLayer ifTrue: [self layerNumber: aGdsElement layerNumber].	aGdsElement hasDataType ifTrue: [self pathtype: aGdsElement datatype].	aGdsElement hasPathType ifTrue: [self pathtype: aGdsElement pathtype].	aGdsElement hasWidth ifTrue: [self width: aGdsElement width].	(aGdsElement isMemberOf: GdsBoxText ) ifTrue: [self text: aGdsElement contents].	(aGdsElement isKindOf: GdsStructureReference)		ifTrue: [			self structureName: aGdsElement structureName.			self angle: aGdsElement angle.			self mag: aGdsElement mag .			self setReflected: aGdsElement isReflected].	self colVertices addAll: aGdsElement vertices.	(aGdsElement type = #aref)		ifTrue: [			ashape xStep: aGdsElement xStep.			ashape yStep: aGdsElement yStep.			ashape columnCount: aGdsElement columnCount.			ashape rowCount: aGdsElement rowCount.			colVertices := nil.			self colVertices add: aGdsElement xy.].	wire removeGeometryCache.	self elementType: aGdsElement type.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 5/12/2009 15:20'!put	self colVertices ifEmpty: [ self error: 'empty vertices' ].	self elementClass ifNil: [ self error: 'element type not set' ].	(self elementClass isReference)		ifTrue: [ self putReference]		ifFalse: [ self putPrimitive].! !!GdsItemContext methodsFor: 'command' stamp: 'kf 10/30/2009 11:19'!putEpilogue: newElement	self privateWipe.	editElement := nil.	self changed.	newElement ifNotNil: [self changed: #newElement].	self changed: #put.	self changedPutGetDpendent.	! !!GdsItemContext methodsFor: 'command' stamp: 'kf 5/15/2009 10:04'!putPrimitive	| targetElement newElement|	newElement := editElement isNil.	newElement		ifTrue: [			targetElement := self createElement.			structure addElement: targetElement.]		ifFalse: [			targetElement := editElement.			targetElement fromItemContext: self].	targetElement statusNumber: GdsElement inDatabaseStausNumber.	self putEpilogue: newElement.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/10/2009 13:14'!putReference	| targetElement newElement targetElements removeElements |	newElement := false.	removeElements := #().	editElement		ifNil: [newElement := true]		ifNotNil: [			elementType ~= editElement type				ifTrue: [					newElement := true.					removeElements := Array with: editElement]].	newElement		ifTrue: [			targetElements := self createElements.			targetElements do: [:each |				structure addElement: each.]]		ifFalse: [			targetElement := editElement.			targetElement fromItemContext: self atIndex: 1.			targetElements := Array with: targetElement].	targetElements 		do: [:each |			each statusNumber: GdsElement inDatabaseStausNumber.].	removeElements 		do: [:each |			each statusNumber: GdsElement inTrushStausNumber.].	self putEpilogue: newElement	! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/8/2008 21:48'!unget	self privateUnget.	self changed.	self changed: #unget.	self changedPutGetDpendent.! !!GdsItemContext methodsFor: 'command' stamp: 'kf 11/8/2008 17:05'!wipe	self privateWipe.	editElement 		ifNotNil: [			editElement wipe.			structure removeElement: editElement.			editElement := nil.].	self changed.	self changed: #wipe.	self changedPutGetDpendent.	! !!GdsItemContext methodsFor: 'command-digitaizingMode' stamp: 'kf 10/21/2008 18:12'!horizfirst	self digitaizingDirection: #horizfirst.		! !!GdsItemContext methodsFor: 'command-digitaizingMode' stamp: 'kf 10/21/2008 17:33'!octagonal	self digitaizingMode: #octagonal.! !!GdsItemContext methodsFor: 'command-digitaizingMode' stamp: 'kf 10/21/2008 17:33'!orthint	self digitaizingMode: #orthint.! !!GdsItemContext methodsFor: 'command-digitaizingMode' stamp: 'kf 10/21/2008 17:33'!straight	self digitaizingMode: #straight.	! !!GdsItemContext methodsFor: 'command-digitaizingMode' stamp: 'kf 10/21/2008 18:12'!vertfirst	self digitaizingDirection: #vertfirst.! !!GdsItemContext methodsFor: 'initialization' stamp: 'kf 11/10/2009 10:01'!initWithNumber: anInteger 	super initialize.	itemNumber := anInteger.	offset := 0 @ 0.	layerNumber := 1.	datatype := 0.	structureName := ''.	wire := GdsWireContext new.	strans := GdsStructureTransform new.	ashape := nil.	(Smalltalk 		at: #GdsAShapeContext		ifAbsent: [ nil ]) ifNotNilDo: [ :clazzAref | ashape := clazzAref new propertyOwner: self ].	self digitaizingMode: #straight.	self elementType: #boundary! !!GdsItemContext methodsFor: 'initialization' stamp: 'kf 11/6/2009 15:45'!release	ashape ifNotNil: 		[ ashape removeDependent: self.		ashape := nil ].	super release! !!GdsItemContext methodsFor: 'printing' stamp: 'kf 11/10/2008 14:15'!printOn: aStream	aStream nextPutAll: 'ITEM: '.	aStream nextPutAll: itemNumber printString.! !!GdsItemContext methodsFor: 'develop-now' stamp: 'kf 7/15/2009 09:34'!reverseVertices	self vertexCount < 2 ifTrue: [^self].	colVertices := colVertices reversed.	self changed: #geometry.	! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 10/21/2008 17:55'!horizfirstActivated	^digitaizingDirection == #horizfirst.		! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 11/9/2009 16:29'!horizfirstEnabled	^self isPrimitiveType and: [digitaizingMode == #orthint].		! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 10/21/2008 17:54'!octagonalActivated	^digitaizingMode == #octagonal.! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 11/9/2009 16:28'!octagonalEnabled	^self isPrimitiveType ! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 10/21/2008 17:54'!orthintActivated	^digitaizingMode == #orthint.! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 11/9/2009 16:28'!orthintEnabled	^self isPrimitiveType ! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 10/21/2008 17:53'!straightActivated	^digitaizingMode == #straight.	! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 11/9/2009 16:28'!straightEnabled	^self isPrimitiveType 	! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 10/21/2008 17:55'!vertfirstActivated	^digitaizingDirection == #vertfirst.! !!GdsItemContext methodsFor: 'testing - dizitizing' stamp: 'kf 11/9/2009 16:28'!vertfirstEnabled	^self isPrimitiveType and: [digitaizingMode == #orthint].! !!GdsItemContext methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 13:39'!aref	self elementType: #aref.	! !!GdsItemContext methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 13:40'!arefActivated	^elementType == #aref.! !!GdsItemContext methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 13:41'!arefEnabled	^ self srefEnabled "and: [more]"! !!GdsItemContext methodsFor: 'as yet unclassified' stamp: 'kf 11/12/2009 13:24'!update: anObject	(#(columnCount rowCount) includes: anObject)		ifTrue: [^self changed: #requestArrayShapeLabel].	super update: anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsItemContext class	instanceVariableNames: ''!!GdsItemContext class methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 13:56'!new	^self error: 'only use #newWithNumber: '.! !!GdsItemContext class methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 13:54'!newWithNumber: anInteger	^self basicNew initWithNumber: anInteger! !Model subclass: #GdsItems	instanceVariableNames: 'items structure zeroBasedIndex'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-EditSpace'!!GdsItems commentStamp: 'kf 11/12/2008 11:49' prior: 0!A GdsItems is collection of GdsItem.activate only one of item from 0 to 9.Instance Variables	items:		<Array<GdsItemContext>>	structure:		<GdsStructure>	zeroBasedIndex:		<SmallInteger>items	- xxxxxstructure	- xxxxxzeroBasedIndex	- xxxxx!!GdsItems methodsFor: 'accessing' stamp: 'kf 11/10/2008 11:45'!atNumber: aZeroBasedItemIndex	^items detect: [:each | each number = aZeroBasedItemIndex] ifNone:[]	! !!GdsItems methodsFor: 'accessing' stamp: 'kf 11/10/2008 13:51'!current: aZeroBasedIndex	zeroBasedIndex := aZeroBasedIndex.	self changed: #current.	^self current.		! !!GdsItems methodsFor: 'accessing' stamp: 'kf 11/10/2008 11:48'!structure: aGdsStructure	structure := aGdsStructure.	items do: [ :each |  each structure: aGdsStructure].	! !!GdsItems methodsFor: 'actions' stamp: 'kf 11/10/2008 11:50'!current	^self atNumber: zeroBasedIndex	! !!GdsItems methodsFor: 'private' stamp: 'kf 11/10/2008 14:39'!forgetStructure	items do: [ :each |  each forgetStructure].	! !!GdsItems methodsFor: 'initialization' stamp: 'kf 11/6/2009 13:56'!initialize	super initialize.	items := OrderedCollection new.	zeroBasedIndex := GdsCompatibility default itemNumberMin.	GdsCompatibility default itemNumberRange  do: [:each | 		| item |		item := GdsItemContext newWithNumber: each.		items add: item]	! !