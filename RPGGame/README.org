#+TITLE: RPGGame

This Document generated by:
https://github-com.translate.goog/kenjirofukuda/gnustep-examples/blob/main/RPGGame/README_ja.org?_x_tr_sl=ja&_x_tr_tl=en&_x_tr_hl=ja&_x_tr_pto=wapp

* RPGGame

this application is copy of RyiSnow's playlist implement by GNUstep (Objective-C).

* overview
This application was implemented in GNUstep (Objective-C) following RyiSnow's playlist.

- Playlist :: [[https://www.youtube.com/playlist?list=PL_QPQmz5C6WUF-pOQDsbsKbaBZqXj4qSq][How to Make a 2D Game in Java ]]

All images and audio in the Resources/ folder are made publicly available by RyiSnow.

* What's great about RyiSnow
- He refrains from selling himself (showing his face) and focuses on explaining things.
- Do not hide any mistakes (encourage viewers to notice them)
- By avoiding the optimization that advanced users often do and instead coding steadily, beginners are not left behind.
- Despite having the skill, he chooses to hold it back.
- They accept suggestions in the comments section and respond to all error reports from beginners.
- Rather than relying on the theories that are all over the place, we teach the joy of thinking for oneself and devising new ideas.

I could never imitate him. He is a man of great character.

* Main differences with Java
** Coordinate system
In a typical device coordinate system, the increasing direction of Y is downwards, but NSView defines the increasing direction of Y, which is closer to the real world Postscript system, as upwards. Therefore, the numerical representation of ROW is upside down.

Originally, we supported the flip coordinate system, but we stopped using it and marked it as deprecated.

* Animation Differences
I don't understand how to use NSAnimation, so I'm using NSTimer.

The course includes various measures to achieve accurate FPS, but I compromised in this area and cut corners.

* Differences from Apple Cocoa
GNUstep has announced that its API level is quite close to Apple's, but this is only for Foundation.
AppKit is not implemented. Or, even if there is an API in the header,
it is an empty implementation, or it is full of TODO and FIXME and has not been boiled down.
Therefore, it relies on a fairly old API that Apple has treated as deprecated a long time ago.

I don't have the equipment to run Cocoa, so I don't support Apple.

* Notes
** Renaissance
GUI resources are defined using Renaissance.

The original Renaissance has not been maintained for a long time and does not work properly. Therefore, when using it ,
please use the repository https://github.com/kenjirofukuda/libs-renaissance.git which has been cloned and modified .

I'm not familiar with git, so I haven't made any pull requests to upstream.

** compiler
Requires clang and libobjc2.

Since it uses some features of Objective-C 2.0, it does not support gobjc.

Memory management basically makes extensive use of GNUstep macros to minimize modifications when compiling with ARC.

Some blocks are used.

** Coding style
Currently we use the GNU style, but this may change in the future.

Properties have not yet been actively adopted, and we still use the traditional redundant setter/getter methods.

I don't like the dot notation for property expressions.
I'm avoiding this confusing notation to be aware of the difference with structures (for now).
