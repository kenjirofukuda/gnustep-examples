Model subclass: #GdsElement	instanceVariableNames: 'vertices dataBounds keyNumber statusNumber owner'	classVariableNames: 'TypeToClassMap'	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsElement commentStamp: 'kf 11/14/2008 22:13' prior: 0!A GdsElement is top level abstruct GDS II's element class.Instance Variables	colVertices:		<Array<Point>>	dataBounds:		<Rectangle<Float>>	keyNumber:		<Integer>	statusNumber:		<SmallInteger>colVertices	- xxxxxdataBounds	- xxxxxkeyNumber	- xxxxxstatusNumber	- in item: 0 - 9	- in id:	-1	- in database: -2!!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 14:27'!absoluteAngle: aTheta	| theta |	theta := aTheta.	^theta negative		ifTrue: [(Float pi * 2) + theta]		ifFalse:[theta].! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 10:42'!collectFor: aSegemntMessage	^self lineSegments collect: [:seg | seg perform: aSegemntMessage].! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/3/2008 23:12'!dataBounds	dataBounds ifNil: [dataBounds := self lookupDataBounds].	^dataBounds. ! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/26/2008 12:04'!dataOutlinePoints	^ self vertices! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 10:43'!directions	^self collectFor: #direction.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 11:09'!directionsPacked	^(self directions inject: OrderedCollection new into: [:subtotal :each | 		subtotal ifEmpty: [subtotal add: each; yourself]				ifNotEmpty: [subtotal add: (each - subtotal last); yourself]]) asArray.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/26/2008 12:04'!dist: aPoint 	| col p distP |	col := OrderedCollection new.	GeometryUtils 		pointArray: self dataOutlinePoints		lineSegmentsDo: 			[ :seg | 			p := aPoint 				nearestPointOnLineFrom: seg start				to: seg end.			distP := p dist: aPoint.			col add: distP ].	^ col min! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 10:40'!lineSegments	| col |	col := OrderedCollection new.	self lineSegmentsDo: [:seg |		col add: seg].	^col asArray.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/17/2008 21:47'!lineSegmentsDo: aLineSegmentBlock	GeometryUtils  pointArray: self vertices  lineSegmentsDo: aLineSegmentBlock.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 11/5/2008 17:11'!lookupDataBounds	^GeometryUtils lookupDataBounds:  self dataOutlinePoints! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 5/15/2009 14:36'!moveRelative: aPoint	self moveRelative: aPoint from: self! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 5/15/2009 14:36'!moveRelative: aPoint from: aOtherElement	| translatedPoints |	translatedPoints := aOtherElement vertices collect: [:p | p + aPoint].	self privateWipe.	self vertices: translatedPoints.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 10:45'!thetas	^self lineSegments collect: [:seg | seg direction theta].! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 10/24/2008 14:42'!thetasPacked	| col thetas prevSeg |	col := OrderedCollection new.	prevSeg := nil.	self lineSegmentsDo: [:seg |		prevSeg ifNotNil: [ 			| to from |			to := self absoluteAngle: seg direction theta.			from := self absoluteAngle: prevSeg reversed direction theta.			col add: (self absoluteAngle: (to - from))].		prevSeg := seg].	^col asArray.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 7/14/2009 14:56'!vertexCount	^self vertices size! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 11/22/2009 16:57'!vertices	vertices ifNil: [vertices := #()].	^vertices.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 11/22/2009 16:54'!vertices: aPointArray	vertices := aPointArray.	self removeGeometryCache.	self refreshBounds.! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 6/8/2009 17:07'!xy	^self vertices first.	! !!GdsElement methodsFor: 'accessing-points' stamp: 'kf 5/12/2009 16:47'!xy: aPoint	self vertices: (Array with: aPoint).! !!GdsElement methodsFor: 'analisys' stamp: 'kf 11/5/2008 10:45'!analisys: aPoint 	^GeometryUtils analisysSegmentsAt: aPoint pointArray: self vertices.! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 10/14/2012 15:30'!asXmlElement	| elmt attrDict vertsElmt |	attrDict := Dictionary new.	self attributesOn: attrDict.	elmt := XMLElement name: 'element' attributes: attrDict.	vertsElmt := XMLElement named: 'vertices'.	self vertices do: [:xy |		vertsElmt addElement: (self xyXmlElement: xy)]. 	elmt addElement: vertsElmt. 	^elmt.! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 10/28/2009 10:29'!attributesFrom: aDictionary	| key |	self hasDataType		ifTrue: [self datatype: (aDictionary at: 'datatype' ifAbsent: [self missingDataTypeNumber]) asNumber].	self hasLayer		ifTrue: [			self layerNumber: 				(aDictionary 					at: 'layerNumber' 					ifAbsent: [(aDictionary 					at: 'layer' "compatibility" 					ifAbsent: [self missingLayerNumber])]) asInteger].	self hasWidth		ifTrue: [self width: (aDictionary at: 'width' ifAbsent: [self missingWidthNumber]) asNumber].	self hasPathType		ifTrue: [self pathtype: (aDictionary at: 'pathtype' ifAbsent: [self missingPathTypeNumber]) asNumber].	key := aDictionary at: 'keyNumber' ifAbsent:[nil].	key ifNotNil: [keyNumber := key asInteger].! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 11/11/2009 09:39'!attributesOn: aDictionary	aDictionary at: 'type' put: self type asString.	(self hasDataType and: [self datatype ~= self missingDataTypeNumber])		ifTrue: [aDictionary at: 'datatype' put: self datatype asString.].	self hasLayer		ifTrue: [aDictionary at: 'layerNumber' put: self layerNumber asString.].	(self hasWidth and: [self width ~= self missingWidthNumber])		ifTrue: [aDictionary at: 'width' put: self width asString.].	(self hasPathType and: [self pathtype ~= self missingPathTypeNumber ])		ifTrue: [aDictionary at: 'pathtype' put: self pathtype asString.].	self keyNumberFilled 		ifTrue: [aDictionary at: 'keyNumber' put: self keyNumber asString.].! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 11/7/2009 21:42'!loadFromXmlNode: aXMLNode	self protectedLoadFromXmlNode: aXMLNode.! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 10/27/2009 21:57'!missingDataTypeNumber	^0.	! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 5/4/2009 11:26'!missingLayerNumber	^1.	! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 10/27/2009 21:57'!missingPathTypeNumber	^0.	! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 5/4/2009 11:26'!missingWidthNumber	^1.0.	! !!GdsElement methodsFor: 'objects from disk' stamp: 'kf 10/14/2012 15:25'!protectedLoadFromXmlNode: aXMLNode	| col |	self attributesFrom: aXMLNode attributes. 	col := OrderedCollection new.	(aXMLNode findElementNamed: #vertices) elementsDo: [:xyNode |		| words xy |		words := xyNode stringNodes first string findTokens: ' '.		xy := (words first asNumber)@(words last asNumber).		col add: xy.].	self assert: [col isEmpty not].	self vertices: col asArray.! !!GdsElement methodsFor: 'copying' stamp: 'kf 5/15/2009 13:19'!copyVertices	| points |	points := (self vertices collect: [:each | each copy ]).	self privateWipe.	self vertices: points.	! !!GdsElement methodsFor: 'copying' stamp: 'kf 11/22/2009 16:51'!postCopy	super postCopy.	self copyVertices.	! !!GdsElement methodsFor: 'testing' stamp: 'kf 7/14/2009 14:58'!damaged	^self vertexCount < self requiredVertexCount.! !!GdsElement methodsFor: 'testing' stamp: 'kf 10/27/2009 11:02'!hasDataType	^self class hasDataType.! !!GdsElement methodsFor: 'testing' stamp: 'kf 10/23/2008 21:54'!hasLayer	^self class hasLayer.! !!GdsElement methodsFor: 'testing' stamp: 'kf 10/27/2009 13:16'!hasPathType	^self class hasPathType.! !!GdsElement methodsFor: 'testing' stamp: 'kf 5/4/2009 09:34'!hasWidth	^self class hasWidth.! !!GdsElement methodsFor: 'testing' stamp: 'kf 5/12/2009 16:26'!isReference	^self class isReference.! !!GdsElement methodsFor: 'testing' stamp: 'kf 5/8/2009 15:19'!isStrictGds	^true! !!GdsElement methodsFor: 'testing' stamp: 'kf 10/27/2009 15:50'!isVisible	owner ifNil: [^true].	self hasLayer ifFalse: [^true].	^(owner layers atNumber: self layerNumber) isVisible.! !!GdsElement methodsFor: 'testing' stamp: 'kf 11/12/2008 09:05'!keyNumberFilled	^keyNumber isNil not! !!GdsElement methodsFor: 'other' stamp: 'kf 11/18/2008 10:20'!fixGeometryError! !!GdsElement methodsFor: 'other' stamp: 'kf 10/28/2008 23:53'!removeGeometryCache! !!GdsElement methodsFor: 'other' stamp: 'kf 10/13/2012 11:04'!stringNodeClass	^Smalltalk at: #XMLStringNode ifAbsent: [^Smalltalk at: #XMLString].! !!GdsElement methodsFor: 'initialization' stamp: 'kf 11/22/2009 16:56'!fromItemContext: aGdsItemContext 	vertices := nil.	self vertices: 		(self 			validateVertices: aGdsItemContext vertices			editorContext: aGdsItemContext).	self hasDataType ifTrue: [ self datatype: aGdsItemContext datatype ].	self hasLayer ifTrue: [ self layerNumber: aGdsItemContext layerNumber ].	self hasPathType ifTrue: [ self pathtype: aGdsItemContext pathtype ].	self hasWidth ifTrue: [ self width: aGdsItemContext width ].	self statusNumber: aGdsItemContext number ! !!GdsElement methodsFor: 'initialization' stamp: 'kf 9/19/2008 18:15'!initialize	super initialize.! !!GdsElement methodsFor: 'initialization' stamp: 'kf 11/22/2009 16:55'!release	vertices := nil.		owner := nil.	super release.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 11/12/2008 09:22'!keyNumber	^keyNumber! !!GdsElement methodsFor: 'accessing' stamp: 'kf 5/13/2009 09:56'!owner	^owner! !!GdsElement methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:18'!requiredVertexCount	^self class requiredVertexCount.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 11/13/2008 10:26'!state	^GdsElement statusSymbolOf: self statusNumber.	! !!GdsElement methodsFor: 'accessing' stamp: 'kf 11/13/2008 10:25'!statusNumber	"in item: 0 - 9	in id:	-1	in database: -2"	statusNumber ifNil: [statusNumber := GdsElement inDatabaseStausNumber].	^statusNumber! !!GdsElement methodsFor: 'accessing' stamp: 'kf 11/13/2008 17:40'!statusNumber: aInteger	"in item: 0 - 9	in id:	-1	in database: -2"	self assert: [GdsElement enabledStateNumbers includes: aInteger].	statusNumber := aInteger.	self changed: #statusNumber.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:50'!type	^self class type.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 10/21/2009 17:29'!typeString	^self type asString asUppercase! !!GdsElement methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:24'!validateVertices: aPointArray	(aPointArray size < self requiredVertexCount) 		ifTrue: [self error: 'required vertex count is ', self requiredVertexCount printString, 'but: ', aPointArray size printString].	^aPointArray.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 5/6/2009 17:33'!validateVertices: aPointArray editorContext: aGdsEditorContext	^self validateVertices: aPointArray.! !!GdsElement methodsFor: 'accessing' stamp: 'kf 11/13/2008 10:15'!wipe	self privateWipe.	self statusNumber: GdsElement inTrushStausNumber.	! !!GdsElement methodsFor: 'accessing' stamp: 'kf 10/13/2012 09:12'!xyXmlElement: aPoint	^((XMLElement named: 'xy') 		addContent: ((self stringNodeClass) string: 			(aPoint x asString, ' ', aPoint y asString))) ! !!GdsElement methodsFor: 'printing' stamp: 'kf 10/21/2009 17:29'!printOn: aStream	aStream nextPutAll: self typeString.	aStream nextPut: $(.	keyNumber ifNotNil: [		aStream nextPutAll: keyNumber asString].	self printSelfOn: aStream.	aStream nextPut: $).	! !!GdsElement methodsFor: 'printing' stamp: 'kf 5/13/2009 16:53'!printSelfOn: aStream	! !!GdsElement methodsFor: 'private' stamp: 'kf 11/22/2009 16:56'!privateWipe	vertices := nil.	self refreshBounds.	! !!GdsElement methodsFor: 'private' stamp: 'kf 6/24/2009 16:36'!refreshBounds	dataBounds := nil.! !!GdsElement methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:54'!drawerClass	^self class drawerClass! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsElement class	instanceVariableNames: ''!!GdsElement class methodsFor: 'private' stamp: 'kf 10/23/2008 19:56'!allCreatableClasses	^GdsElement allSubclasses reject: [:clazz | clazz type = #none]! !!GdsElement class methodsFor: 'private' stamp: 'kf 10/23/2008 20:04'!setupClassMap	TypeToClassMap := Dictionary new.	self allCreatableClasses do: [:clazz |		TypeToClassMap at: clazz type put: clazz].! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 10/23/2008 21:17'!classForType: aStringOrSymbol	| key |	key := aStringOrSymbol asLowercase asSymbol.	TypeToClassMap ifNil: [self setupClassMap].	^TypeToClassMap at: key ifAbsent:[].! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 11/13/2008 17:44'!enabledStateNumbers	" 0 - 9 : item number	       -1: id selected	       -2: in database	       -4: in trush (GdsFeel)"	^GdsCompatibility default itemNumberRange asArray, {		GdsElement inIdStausNumber .		GdsElement inDatabaseStausNumber. 		GdsElement inTrushStausNumber} ! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:17'!requiredVertexCount	^1.! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 11/16/2008 17:23'!statusSymbolOf: statusNumber	(self inTrushStausNumber = statusNumber) ifTrue: [^#inTrush].	(self inIdStausNumber  = statusNumber) ifTrue: [^#inId].	(self inDatabaseStausNumber = statusNumber) ifTrue: [^#inStructure].	(GdsCompatibility default itemNumberRange includes: statusNumber)		ifTrue: [^#inItem].	^#error.	! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:49'!type	^#none! !!GdsElement class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:57'!typeString	^self type asString asUppercase.! !!GdsElement class methodsFor: 'initialization' stamp: 'kf 10/26/2008 11:22'!fromItemContext: aGdsEditorContext 	^ self new fromItemContext: aGdsEditorContext! !!GdsElement class methodsFor: 'initialization' stamp: 'kf 5/6/2009 21:32'!initialize	"GdsElement initialize"	self setupClassMap.	Smalltalk addToStartUpList: self.	! !!GdsElement class methodsFor: 'testing' stamp: 'kf 10/27/2009 11:02'!hasDataType	^false.! !!GdsElement class methodsFor: 'testing' stamp: 'kf 10/23/2008 20:25'!hasLayer	^false.! !!GdsElement class methodsFor: 'testing' stamp: 'kf 10/27/2009 13:15'!hasPathType	^false.! !!GdsElement class methodsFor: 'testing' stamp: 'kf 5/4/2009 09:35'!hasWidth	^false.! !!GdsElement class methodsFor: 'testing' stamp: 'kf 11/10/2009 10:24'!installedElementType: aSymbol	"self arefInstalled"	TypeToClassMap ifNil: [self setupClassMap].	^TypeToClassMap includesKey: aSymbol asLowercase asSymbol.! !!GdsElement class methodsFor: 'testing' stamp: 'kf 5/12/2009 16:25'!isReference	^false.! !!GdsElement class methodsFor: 'constants' stamp: 'kf 11/13/2008 10:02'!inDatabaseStausNumber	^-2.! !!GdsElement class methodsFor: 'constants' stamp: 'kf 11/13/2008 10:02'!inIdStausNumber	^-1.! !!GdsElement class methodsFor: 'constants' stamp: 'kf 11/13/2008 17:36'!inTrushStausNumber	"not presents original GDSII	can't use -3. reason: MSELECT no sort action number"	^-4.! !!GdsElement class methodsFor: 'system startup' stamp: 'kf 10/23/2008 20:06'!startUp	self setupClassMap.	! !!GdsElement class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:53'!drawerClass	^GdsElementDrawer! !GdsElement subclass: #GdsPrimitiveElement	instanceVariableNames: 'layer datatype layerNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsPrimitiveElement commentStamp: 'kf 11/12/2008 12:04' prior: 0!A GdsPrimitiveElement is GDS II's primitive element.Instance Variables	layer:		<SmallInteger>layer	- 0 to 255!!GdsPrimitiveElement methodsFor: 'accessing' stamp: 'kf 10/21/2009 16:38'!datatype	^datatype! !!GdsPrimitiveElement methodsFor: 'accessing' stamp: 'kf 10/21/2009 16:38'!datatype: aInteger	self assert: [aInteger isKindOf: Integer].	datatype := aInteger.	self changed: #datatype.! !!GdsPrimitiveElement methodsFor: 'accessing' stamp: 'kf 10/27/2009 10:41'!layerNumber	^layerNumber.	! !!GdsPrimitiveElement methodsFor: 'accessing' stamp: 'kf 10/27/2009 10:41'!layerNumber: aInteger	self assert: [aInteger isKindOf: Integer].	layerNumber := aInteger.	self changed: #layerNumber.! !!GdsPrimitiveElement methodsFor: 'accessing' stamp: 'kf 9/19/2008 18:57'!xy: aPoint	! !!GdsPrimitiveElement methodsFor: 'debugging' stamp: 'kf 7/14/2009 14:59'!fixGeometryError	| newPoints|	self vertexCount < self requiredVertexCount ifTrue: [^self].	newPoints := OrderedCollection new.	GeometryUtils removeDuplicatePoints:  self vertices on: newPoints.	self privateWipe.	self vertices: (self validateVertices: newPoints).	! !!GdsPrimitiveElement methodsFor: 'initialization' stamp: 'kf 9/19/2008 18:55'!initialize	super initialize.	layer := 1.	! !!GdsPrimitiveElement methodsFor: 'deprecated' stamp: 'kf 10/27/2009 10:35'!layer	self deprecated: 'use #layerNumber'.	^layer.	! !!GdsPrimitiveElement methodsFor: 'deprecated' stamp: 'kf 10/27/2009 10:34'!layer: aInteger	self deprecated: 'use #layerNumber:'.	self assert: [aInteger isKindOf: Integer].	layer := aInteger.	self changed: #layer.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsPrimitiveElement class	instanceVariableNames: ''!!GdsPrimitiveElement class methodsFor: 'testing' stamp: 'kf 10/27/2009 11:03'!hasDataType	^true.! !!GdsPrimitiveElement class methodsFor: 'testing' stamp: 'kf 10/23/2008 20:26'!hasLayer	^true.! !GdsPrimitiveElement subclass: #GdsBoundary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsBoundary commentStamp: 'kf 11/12/2008 11:59' prior: 0!A GdsBoundary is GDS II's BOUNDARY.Instance Variables!!GdsBoundary methodsFor: 'initialization' stamp: 'kf 9/19/2008 18:15'!initialize	super initialize.! !!GdsBoundary methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 16:22'!isVisible	^super isVisible and: [(owner kinds atKey: 'BD') isVisible ].! !!GdsBoundary methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:36'!validateVertices: aPointArray	| points |	points := super validateVertices: aPointArray.	(points first = points last)		ifFalse: [			points := aPointArray asOrderedCollection.			points add: points first].	^points asArray.! !!GdsBoundary methodsFor: 'accessing' stamp: 'kf 11/18/2008 10:17'!validateVertices: aPointArray editorContext: aGdsEditorContext	| points vPoint ce1 |	points := super validateVertices: aPointArray.	ce1 := points last.	(points first = ce1)		ifFalse: [			points := aPointArray asOrderedCollection.			vPoint := aGdsEditorContext completionPointFrom: ce1 to: points first.			vPoint ifNotNil:[				(aGdsEditorContext digitaizingMode = #orthint)					ifTrue: [						points last = vPoint							ifFalse:[points add: vPoint.]]]. 			points add: points first].	^points asArray.! !!GdsBoundary methodsFor: 'accessing' stamp: 'kf 7/14/2009 15:06'!vertexCount	((self vertices size >= 3) and:	[self vertices first = self vertices last])		ifTrue: [^self vertices size - 1].	^super vertexCount! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsBoundary class	instanceVariableNames: ''!!GdsBoundary class methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:18'!requiredVertexCount	^3.! !!GdsBoundary class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:52'!type	^#boundary! !!GdsBoundary class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:55'!drawerClass	^GdsBoundaryDrawer! !GdsPrimitiveElement subclass: #GdsPath	instanceVariableNames: 'wire'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsPath commentStamp: 'kf 11/12/2008 12:05' prior: 0!A GdsPath is GDS II's PATH.Instance Variables	boundaryPoints:		<Array<Point>>	outlineSegMap:		<Object>	width:		<Float>boundaryPoints	- xxxxxoutlineSegMap	- xxxxxwidth	- xxxxx!!GdsPath methodsFor: 'copying' stamp: 'kf 10/27/2009 22:22'!copy	| newElement |	newElement := super copy.	newElement copyWireContext.	(newElement instVarNamed: 'wire') element: newElement.	^newElement! !!GdsPath methodsFor: 'copying' stamp: 'kf 10/27/2009 22:14'!copyWireContext	wire := wire copy.! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/24/2009 20:22'!dataOutlinePoints	^ wire boundaryPoints! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/17/2008 22:30'!halfWidth	^self width / 2.0.! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/24/2009 20:28'!pathtype	^wire pathtype! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/24/2009 20:29'!pathtype: aInteger	wire pathtype: aInteger.	self changed: #pathtype.! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/1/2008 23:14'!validateVertices: aPointArray editorContext: aGdsEditorContext	| |	^super validateVertices: aPointArray.! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/24/2009 20:23'!width	^wire width! !!GdsPath methodsFor: 'accessing' stamp: 'kf 10/27/2009 21:45'!width: aNumber	wire width: aNumber.	self changed: #width.	! !!GdsPath methodsFor: 'initialization' stamp: 'kf 10/24/2009 20:45'!initialize	super initialize.	wire := GdsWireContext new element: self.! !!GdsPath methodsFor: 'testing' stamp: 'kf 12/8/2009 16:30'!isVisible	^super isVisible and: [(owner kinds atKey: 'PB') isVisible or: [(owner kinds atKey: 'PC') isVisible]].! !!GdsPath methodsFor: 'outline' stamp: 'kf 10/24/2009 20:28'!outlineSegmentsOf: aLineSegment offsetRadians: radians r: r	^wire outlineSegmentsOf: aLineSegment offsetRadians: radians r: r	! !!GdsPath methodsFor: 'other' stamp: 'kf 10/24/2009 21:03'!removeGeometryCache	wire removeGeometryCache.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsPath class	instanceVariableNames: ''!!GdsPath class methodsFor: 'testing' stamp: 'kf 10/27/2009 13:54'!hasPathType	^true.! !!GdsPath class methodsFor: 'testing' stamp: 'kf 5/4/2009 11:15'!hasWidth	^true.! !!GdsPath class methodsFor: 'accessing' stamp: 'kf 9/20/2008 14:18'!requiredVertexCount	^2.! !!GdsPath class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:53'!type	^#path! !!GdsPath class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:56'!drawerClass	^GdsPathDrawer! !GdsElement subclass: #GdsReferenceElement	instanceVariableNames: 'strans'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 5/14/2009 22:55'!angle	^strans angle! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 6/24/2009 16:37'!angle: aDegees	strans angle: aDegees.	self refreshBounds.	! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 6/24/2009 16:39'!dataOutlinePoints	^self lookupExtentPoints! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 5/15/2009 22:42'!mag	^strans mag! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 6/24/2009 16:37'!mag: aFactor	strans mag: aFactor.	self refreshBounds.	! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 5/15/2009 14:41'!moveRelative: aPoint from: aOtherElement	| translatedPoint |	translatedPoint := aOtherElement xy+ aPoint.	self privateWipe.	self xy: translatedPoint.! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 10/23/2009 21:35'!strans	^strans! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 5/12/2009 18:40'!transform	^strans asMatrix2x3! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 12/8/2009 17:54'!xy	^strans offset! !!GdsReferenceElement methodsFor: 'accessing' stamp: 'kf 6/24/2009 16:37'!xy: aPoint	self privateWipe.	super xy: aPoint.	strans offset: aPoint.	self refreshBounds.! !!GdsReferenceElement methodsFor: 'copying' stamp: 'kf 5/15/2009 14:52'!copyTransform	strans := strans copy.! !!GdsReferenceElement methodsFor: 'copying' stamp: 'kf 11/22/2009 16:52'!postCopy	super postCopy. 	self copyTransform.	! !!GdsReferenceElement methodsFor: 'initialization' stamp: 'kf 5/15/2009 11:45'!fromItemContext: aGdsItemContext	self fromItemContext: aGdsItemContext atIndex: 1.	 	! !!GdsReferenceElement methodsFor: 'initialization' stamp: 'kf 11/10/2009 11:34'!fromItemContext: aGdsItemContext atIndex: aVerticesIndex	| location |	self assert: aGdsItemContext structureName isEmpty not.	location := aGdsItemContext vertices at: aVerticesIndex.	self xy: location.	self angle: aGdsItemContext angle.	self mag: aGdsItemContext mag.	self setReflected: aGdsItemContext isReflected.	self statusNumber: aGdsItemContext number.	 	! !!GdsReferenceElement methodsFor: 'initialization' stamp: 'kf 5/12/2009 11:21'!initialize	super initialize.	strans := GdsStructureTransform new.	! !!GdsReferenceElement methodsFor: 'testing' stamp: 'kf 6/24/2009 16:10'!isPureTranslation	^self transform isPureTranslation! !!GdsReferenceElement methodsFor: 'testing' stamp: 'kf 11/10/2009 11:20'!isReflected	^strans isReflected! !!GdsReferenceElement methodsFor: 'testing' stamp: 'kf 11/26/2009 13:16'!setReflected: aBoolean	strans setReflected: aBoolean.	self refreshBounds.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsReferenceElement class	instanceVariableNames: ''!!GdsReferenceElement class methodsFor: 'as yet unclassified' stamp: 'kf 5/12/2009 15:33'!fromItemContext: aGdsEditorContext atIndex: anIndex	^ self new fromItemContext: aGdsEditorContext atIndex: anIndex.! !!GdsReferenceElement class methodsFor: 'as yet unclassified' stamp: 'kf 5/12/2009 16:26'!isReference	^true! !GdsReferenceElement subclass: #GdsText	instanceVariableNames: 'contents'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsText commentStamp: 'kf 11/12/2008 11:59' prior: 0!A GdsText is GDS II's TEXT.Instance Variables!!GdsText methodsFor: 'initialization' stamp: 'kf 9/19/2008 18:16'!initialize	super initialize.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsText class	instanceVariableNames: ''!!GdsText class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:53'!type	^#text.! !GdsReferenceElement subclass: #GdsStructureReference	instanceVariableNames: 'sname structure'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsStructureReference commentStamp: 'kf 11/12/2008 11:58' prior: 0!A GdsStructureReference is GDS II's SREF.Instance Variables!!GdsStructureReference methodsFor: 'objects from disk' stamp: 'kf 11/10/2009 16:16'!attributesFrom: aDictionary	super attributesFrom: aDictionary.	self structureName: (aDictionary at: 'sname' ifAbsent: ['ERRREF']) asString.	self angle: (aDictionary at: 'angle' ifAbsent: [0.0]) asNumber.	self mag: (aDictionary at: 'mag' ifAbsent: [1.0]) asNumber.		self setReflected: ((aDictionary at: 'reflected' ifAbsent: [false]) asString sameAs: 'true').		! !!GdsStructureReference methodsFor: 'objects from disk' stamp: 'kf 11/11/2009 09:47'!attributesOn: aDictionary	super attributesOn: aDictionary.	aDictionary at: 'sname' put: self structureName asString.	self angle = 0.0		ifFalse: [			aDictionary at: 'angle' put: self angle asString].		self mag = 1.0		ifFalse: [			aDictionary at: 'mag' put: self mag asString].	self isReflected 		ifTrue: [				aDictionary at: 'reflected' put: self isReflected asString].					! !!GdsStructureReference methodsFor: 'objects from disk' stamp: 'kf 11/6/2009 18:56'!loadFromXmlNode: aXmlNode	super loadFromXmlNode: aXmlNode.	self xy: self vertices first.! !!GdsStructureReference methodsFor: 'initialization' stamp: 'kf 5/12/2009 15:35'!fromItemContext: aGdsItemContext atIndex: aVerticesIndex	super fromItemContext:  aGdsItemContext atIndex: aVerticesIndex.	self structureName: aGdsItemContext structureName.! !!GdsStructureReference methodsFor: 'initialization' stamp: 'kf 11/6/2009 11:52'!initialize	super initialize.	sname := ''.! !!GdsStructureReference methodsFor: 'accessing' stamp: 'kf 11/5/2009 15:57'!localBounds	^self lookupLocalBounds.	 	 			! !!GdsStructureReference methodsFor: 'accessing' stamp: 'kf 5/13/2009 10:01'!structure	structure ifNil: [		structure := self owner database structureNamed: self structureName.].	^structure! !!GdsStructureReference methodsFor: 'accessing' stamp: 'kf 5/12/2009 16:32'!structureName	^sname	! !!GdsStructureReference methodsFor: 'accessing' stamp: 'kf 5/12/2009 11:23'!structureName: aString	sname := aString.	self changed: #sname.	! !!GdsStructureReference methodsFor: 'private' stamp: 'kf 11/5/2009 15:57'!lookupBasicExtentPoints	^GeometryUtils verticesFromBounds: self localBounds.	 	 			! !!GdsStructureReference methodsFor: 'private' stamp: 'kf 11/24/2009 16:29'!lookupExtentPoints	^self lookupBasicExtentPoints 			collect: [:each | self transform transformPoint: each ].! !!GdsStructureReference methodsFor: 'private' stamp: 'kf 11/5/2009 15:55'!lookupLocalBounds	^self structure dataExtentForElements.	 	 			! !!GdsStructureReference methodsFor: 'printing' stamp: 'kf 11/6/2009 11:29'!printSelfOn: aStream	sname ifNil: [^self].	aStream nextPut: $,.	aStream nextPutAll: self structureName! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsStructureReference class	instanceVariableNames: ''!!GdsStructureReference class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:53'!type	^#sref! !!GdsStructureReference class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:56'!drawerClass	^GdsStructureReferenceDrawer! !GdsStructureReference subclass: #GdsArrayedStructureReference	instanceVariableNames: 'ashape'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsArrayedStructureReference commentStamp: 'kf 11/12/2008 11:58' prior: 0!A GdsArrayedStructureReference is GDS II's AREF.Instance Variables!!GdsArrayedStructureReference methodsFor: 'objects from disk' stamp: 'kf 11/9/2009 16:07'!asXmlElement	| elmt|	elmt := super asXmlElement.	elmt addElement: ashape asXmlElement.	^elmt.	! !!GdsArrayedStructureReference methodsFor: 'objects from disk' stamp: 'kf 10/14/2012 15:31'!loadFromXmlNode: aXMLNode	super loadFromXmlNode: aXMLNode.	aXMLNode elementsDo: [:node |		node name = #ashape			ifTrue: [				ashape loadFromXmlNode: node].]! !!GdsArrayedStructureReference methodsFor: 'private' stamp: 'kf 11/6/2009 15:35'!baseLocalBounds	^super lookupLocalBounds.! !!GdsArrayedStructureReference methodsFor: 'private' stamp: 'kf 11/9/2009 15:36'!fromItemContext: aGdsItemContext atIndex: aVerticesIndex	super fromItemContext:  aGdsItemContext atIndex: aVerticesIndex.	self columnCount: aGdsItemContext ashape columnCount.	self rowCount: aGdsItemContext ashape rowCount.	self xStep: aGdsItemContext ashape xStep.	self yStep: aGdsItemContext ashape yStep.		! !!GdsArrayedStructureReference methodsFor: 'private' stamp: 'kf 11/6/2009 15:46'!lookupLocalBounds	^ ashape lookupLocalBounds: super lookupLocalBounds! !!GdsArrayedStructureReference methodsFor: 'private' stamp: 'kf 11/9/2009 15:37'!rebuildVertices! !!GdsArrayedStructureReference methodsFor: 'private' stamp: 'kf 11/6/2009 15:46'!relativeTransforms	^ ashape relativeTransforms! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!columnCount	^ ashape columnCount! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!columnCount: anInteger 	ashape columnCount: anInteger! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!rowCount	^ ashape rowCount! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!rowCount: anInteger 	ashape rowCount: anInteger! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 17:32'!stepToOwnSize	self xStepToOwnSize.	self yStepToOwnSize.	! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!xStep	^ ashape xStep! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 16:02'!xStep: aFloat 	ashape xStep: aFloat.	self rebuildVertices.	! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 17:31'!xStepToOwnSize	self xStep: self baseLocalBounds width.! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 15:46'!yStep	^ ashape yStep! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 16:02'!yStep: aFloat 	ashape yStep: aFloat.	self rebuildVertices.! !!GdsArrayedStructureReference methodsFor: 'accessing' stamp: 'kf 11/6/2009 17:32'!yStepToOwnSize	self yStep: self baseLocalBounds height.! !!GdsArrayedStructureReference methodsFor: 'initialization' stamp: 'kf 11/6/2009 21:53'!initialize	super initialize.	ashape := GdsAShapeContext new propertyOwner: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsArrayedStructureReference class	instanceVariableNames: ''!!GdsArrayedStructureReference class methodsFor: 'accessing' stamp: 'kf 10/23/2008 19:54'!type	^#aref.! !!GdsArrayedStructureReference class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:57'!drawerClass	^GdsArrayedStructureReferenceDrawer! !GdsPrimitiveElement subclass: #GdsBoxText	instanceVariableNames: 'contents'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Element'!!GdsBoxText commentStamp: 'kf 5/4/2009 22:29' prior: 0!A GdsBoxText is not GDSII's real font.Adhook Squeak's TrueType rendering.Instance Variables!!GdsBoxText methodsFor: 'objects from disk' stamp: 'kf 5/8/2009 15:10'!attributesFrom: aDictionary	super attributesFrom: aDictionary.	self contents: (aDictionary at: 'string' ifAbsent: ['UNTITLED']) asString! !!GdsBoxText methodsFor: 'objects from disk' stamp: 'kf 5/8/2009 15:08'!attributesOn: aDictionary	super attributesOn: aDictionary.	aDictionary at: 'string' put: self contents asString.! !!GdsBoxText methodsFor: 'accessing' stamp: 'kf 5/8/2009 15:20'!contents	^contents! !!GdsBoxText methodsFor: 'accessing' stamp: 'kf 5/8/2009 15:20'!contents: aByteString	contents := aByteString.	! !!GdsBoxText methodsFor: 'accessing' stamp: 'kf 5/7/2009 15:22'!fromItemContext: aGdsItemContext 	super fromItemContext: aGdsItemContext.	self contents: aGdsItemContext text.	! !!GdsBoxText methodsFor: 'other' stamp: 'kf 5/8/2009 15:21'!fixGeometryError! !!GdsBoxText methodsFor: 'initialization' stamp: 'kf 5/6/2009 17:42'!initialize	super initialize.	self contents: 'UNTITLED'.	! !!GdsBoxText methodsFor: 'testing' stamp: 'kf 5/8/2009 15:19'!isStrictGds	^false! !!GdsBoxText methodsFor: 'testing' stamp: 'kf 12/8/2009 20:45'!isVisible	^super isVisible and: [(owner kinds atKey: 'TX') isVisible or:  [(owner kinds atKey: 'TO') isVisible]].! !!GdsBoxText methodsFor: 'printing' stamp: 'kf 5/13/2009 16:57'!printSelfOn: aStream	aStream nextPut: $,.	aStream nextPutAll: self contents.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsBoxText class	instanceVariableNames: ''!!GdsBoxText class methodsFor: 'accessing' stamp: 'kf 5/6/2009 15:23'!type	^#boxtext! !!GdsBoxText class methodsFor: '*GdsFeel-Morphic-Extension' stamp: 'kf 11/17/2009 20:56'!drawerClass	^GdsBoxTextDrawer! !GdsElement initialize!