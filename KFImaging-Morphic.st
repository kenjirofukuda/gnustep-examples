RectangleMorph subclass: #TTBoxTextMorph	instanceVariableNames: 'ttContext'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Morphic'!!TTBoxTextMorph methodsFor: 'as yet unclassified' stamp: 'kf 5/7/2009 09:31'!drawOn: aCanvas	super drawOn: aCanvas.	ttContext drawOn: aCanvas string: ttContext string bounds: self innerBounds.	! !!TTBoxTextMorph methodsFor: 'as yet unclassified' stamp: 'kf 5/7/2009 09:30'!extent: aBounds	super extent: aBounds.	! !!TTBoxTextMorph methodsFor: 'as yet unclassified' stamp: 'kf 5/7/2009 09:27'!initialize	super initialize.	ttContext := TTBoxTextContext new.		! !RectangleMorph subclass: #ColorsMorph	instanceVariableNames: 'colors'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Morphic'!!ColorsMorph methodsFor: 'accessing' stamp: 'KJ 6/12/2004 21:12'!colors	^colors.! !!ColorsMorph methodsFor: 'accessing' stamp: 'KJ 6/12/2004 21:12'!colors: aColors	colors := aColors! !!ColorsMorph methodsFor: 'accessing' stamp: 'kf 9/27/2008 13:23'!defaultBounds	^10@10 extent: 500@60.! !!ColorsMorph methodsFor: 'drawing' stamp: 'KJ 6/12/2004 21:25'!drawOn: aCanvas	| itemWidth r |	self colors = nil ifTrue: [super drawOn: aCanvas].	itemWidth := (self width / colors size) asInteger.	colors doWithIndex: [ :c :index |		r := Rectangle origin: (0@0) extent: (itemWidth @ self height).		r := r translateBy: (((index - 1)*itemWidth) @ 0).		r := r translateBy: self bounds origin.		aCanvas fillRectangle: r color: c].		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ColorsMorph class	instanceVariableNames: ''!!ColorsMorph class methodsFor: 'example' stamp: 'kf 4/8/2008 23:51'!example	"ColorsMorph example"	((self new initialize) colors: (Color indexedColors)) openInWorld.! !MorphicModel subclass: #PluggableLayerMorph	instanceVariableNames: 'symbol drawOnBlock stepBlock stepTime updateBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Morphic'!!PluggableLayerMorph commentStamp: 'kf 11/14/2008 20:20' prior: 0!A PluggableLayerMorph is xxxxxxxxx.Instance Variables	drawOnBlock:		<BlockContext>	stepBlock:		<BlockContext>	stepTime:		<Integer>	symbol:		<Symbol>	updateBlock:		<BlockContext>drawOnBlock	- xxxxxstepBlock	- xxxxxstepTime	- xxxxxsymbol	- xxxxxupdateBlock	- xxxxx!!PluggableLayerMorph methodsFor: 'drawing' stamp: 'kf 10/29/2008 13:44'!drawLocalOn: aCanvas! !!PluggableLayerMorph methodsFor: 'drawing' stamp: 'kf 12/4/2009 16:07'!drawOn: aCanvas	super drawOn: aCanvas.	aCanvas 		translateBy:  (self innerBounds origin) 		clippingTo: self innerBounds 		during: [:offsetCanvas | 			drawOnBlock				ifNotNil: [					[drawOnBlock value: offsetCanvas value: self]						on: Error do: [:ex | "nop"]]						ifNil: [self drawLocalOn: offsetCanvas]]! !!PluggableLayerMorph methodsFor: 'event handling' stamp: 'kf 10/29/2008 15:35'!handlesMouseOver: anEvent	^true! !!PluggableLayerMorph methodsFor: 'event handling' stamp: 'kf 10/29/2008 15:36'!mouseEnter: anEvent	self startStepping.! !!PluggableLayerMorph methodsFor: 'event handling' stamp: 'kf 10/29/2008 15:36'!mouseLeave: anEvent	self stopStepping.! !!PluggableLayerMorph methodsFor: 'initialization' stamp: 'kf 10/29/2008 10:01'!initialize	super initialize.	self color: Color transparent.	! !!PluggableLayerMorph methodsFor: 'initialization' stamp: 'kf 10/31/2009 21:24'!release	self stopStepping.	drawOnBlock := nil.	stepBlock := nil.	stepTime := nil.	symbol := nil.	updateBlock := nil.	super release.	! !!PluggableLayerMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 12:13'!innerExtent	^self innerBounds extent.! !!PluggableLayerMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 12:13'!localInnerBounds	^0@0 extent: self innerExtent.! !!PluggableLayerMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 15:56'!localPointOf: aPoint	^aPoint - self innerBounds origin.! !!PluggableLayerMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 15:56'!localSensorPoint	^self localPointOf: Sensor cursorPoint.! !!PluggableLayerMorph methodsFor: 'testing' stamp: 'kf 10/29/2008 10:11'!name	^symbol asString.! !!PluggableLayerMorph methodsFor: 'testing' stamp: 'kf 11/3/2008 16:19'!stepTime	stepTime ifNil: [stepTime := 100000].	^stepTime.! !!PluggableLayerMorph methodsFor: 'addapter' stamp: 'kf 10/29/2008 10:45'!setDrawOnBlock: aBlock	"arg1: Canvas	 arg2: layerMorph"	drawOnBlock := aBlock.	! !!PluggableLayerMorph methodsFor: 'addapter' stamp: 'kf 10/29/2008 14:24'!setStepBlock: aBlock	stepBlock := aBlock.! !!PluggableLayerMorph methodsFor: 'addapter' stamp: 'kf 10/29/2008 19:43'!setUpdateBlock: aBlock	"arg1: aParameter	 arg2: layerMorph"	updateBlock := aBlock.	! !!PluggableLayerMorph methodsFor: 'stepping and presenter' stamp: 'kf 10/29/2008 14:18'!step	stepBlock ifNotNil: [stepBlock value: self].! !!PluggableLayerMorph methodsFor: 'accessing' stamp: 'kf 10/29/2008 15:12'!stepTime: aNumber	stepTime := aNumber! !!PluggableLayerMorph methodsFor: 'accessing' stamp: 'kf 10/29/2008 10:11'!symbol: aSymbol	symbol := aSymbol.		! !!PluggableLayerMorph methodsFor: 'updating' stamp: 'kf 10/29/2008 19:42'!update: aParameter	updateBlock ifNotNil: [updateBlock value: aParameter value: self].	super update: aParameter.! !Object subclass: #ImageTable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Morphic'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ImageTable class	instanceVariableNames: ''!!ImageTable class methodsFor: 'as yet unclassified' stamp: 'kf 10/2/2009 16:45'!openDisplayCenter: aMorph	aMorph extent: (Display extent * 0.7) rounded.	aMorph center: Display center.	aMorph openInWorld.! !!ImageTable class methodsFor: 'debugging' stamp: 'KJ 6/5/2004 22:50'!collectTopmostImagesExternalNamed: aExternalName	^ImageMorph allInstances		select: [:m | m owner class = PasteUpMorph				and: [m externalName = aExternalName]]! !!ImageTable class methodsFor: 'instance creation' stamp: 'KJ 6/7/2004 21:08'!createIconPanelMorph	"self  createIconPanelMorph openInWorld"	| layout |	layout :=AlignmentMorph new.	layout clipSubmorphs: true.	layout vResizing: #shrinkWarp.	layout hResizing: #shrinkWarp.	layout borderStyle: (BorderStyle complexAltFramed width: 5).	layout color: (TranslucentColor r: 0.972 g: 0.972 b: 0.788 alpha: 0.412).	layout layoutPolicy: TableLayout new.	layout wrapDirection: #leftToRight.	layout cellInset: 10@10.	^ layout.! !MorphicModel subclass: #PluggableLayersMorph	instanceVariableNames: 'layerMap'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Morphic'!!PluggableLayersMorph commentStamp: 'kf 11/14/2008 20:20' prior: 0!A PluggableLayersMorph is xxxxxxxxx.Instance Variables	layerMap:		<Dictionary<Symbol,PluggableLayerMorph>>layerMap	- xxxxx!!PluggableLayersMorph methodsFor: 'accessing' stamp: 'kf 10/29/2008 11:39'!borderWidth: aPoint	super borderWidth: aPoint.	layerMap valuesDo: [:each | each borderWidth: aPoint].! !!PluggableLayersMorph methodsFor: 'defaults' stamp: 'kf 10/29/2008 11:40'!defaultBounds	^0@0 extent: 512@342.! !!PluggableLayersMorph methodsFor: 'defaults' stamp: 'kf 10/29/2008 14:08'!defaultLayerClass	^PluggableLayerMorph! !!PluggableLayersMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 10:21'!extent: aPoint	super extent: aPoint.	layerMap valuesDo: [:each | each extent: aPoint].! !!PluggableLayersMorph methodsFor: 'geometry' stamp: 'kf 10/29/2008 10:21'!position: aPoint	super position: aPoint.	layerMap valuesDo: [:each | each position: aPoint].! !!PluggableLayersMorph methodsFor: 'initialization' stamp: 'kf 10/29/2008 21:13'!initialize	super initialize.	layerMap := Dictionary new.	self color: Color white.	! !!PluggableLayersMorph methodsFor: 'initialization' stamp: 'kf 10/31/2009 21:19'!release	layerMap ifNotNil: [layerMap valuesDo: [:each | each release]].	layerMap := nil.	super release.	! !!PluggableLayersMorph methodsFor: 'element control' stamp: 'kf 10/29/2008 12:04'!layerForKey: aSymbol 	^ layerMap 		at: aSymbol		ifAbsentPut: 			[ | m |			m := self newLayerForKey: aSymbol.			self addMorph: m.			m ]! !!PluggableLayersMorph methodsFor: 'element control' stamp: 'kf 11/11/2009 15:16'!newLayerForKey: aSymbol 	| m |	m := self defaultLayerClass  new.	m extent: self extent.	m symbol: aSymbol.	^ m! !!PluggableLayersMorph methodsFor: 'element control' stamp: 'kf 10/29/2008 10:15'!setVisible: aBoolean forKey: aSymbol 	^(self layerForKey: aSymbol) visible: aBoolean	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PluggableLayersMorph class	instanceVariableNames: ''!!PluggableLayersMorph class methodsFor: 'as yet unclassified' stamp: 'kf 10/29/2008 16:03'!example	"PluggableLayersMorph example"	| m |	m := self  new.	m color: (Color gray alpha: 0.2).	(m layerForKey: #blue) setDrawOnBlock: [:canvas :morph |		|box|		box := morph localInnerBounds insetBy: 10.		canvas frameRectangle: box width: 20 color: (Color blue alpha: 0.3)].	(m layerForKey: #red) setDrawOnBlock: [:canvas :morph |		|box|		box := morph localInnerBounds insetBy: 15.		canvas frameRectangle: box width: 20 color: (Color red alpha: 0.5)].		(m layerForKey: #yellow) setDrawOnBlock: [:canvas :morph |		|box|		box := morph localInnerBounds insetBy: 20.		canvas frameRectangle: box width: 20 color: (Color yellow alpha: 0.5)].		(m layerForKey: #line) setDrawOnBlock: [:canvas :morph |		|box|		box := morph localInnerBounds insetBy: 20.		canvas line: 0@0 to: morph localInnerBounds bottomRight width: 10 color: Color green ].		(m layerForKey: #circle) setStepBlock: [:morph |		| localPoint prevPoint|		localPoint := morph localSensorPoint .		prevPoint := morph valueOfProperty: #mouseLoc ifAbsent: 0@0. 		prevPoint = localPoint ifFalse:[			| localUpdateBounds |			morph setProperty: #mouseLoc toValue: localPoint.			localUpdateBounds := Rectangle encompassing: {  localPoint . prevPoint}.			localUpdateBounds := localUpdateBounds expandBy: 20@20.			morph invalidRect: (localUpdateBounds translateBy: morph innerBounds origin).			]		].	(m layerForKey: #circle) setDrawOnBlock: [:canvas :morph |		| p |		p := (morph valueOfProperty: #mouseLoc  ifAbsent: 0@0).				canvas fillOval:  (Rectangle center: p extent: 20@20 )color: Color cyan].		(m layerForKey: #circle) stepTime: 100.	m openInWorld.! !