RectangleMorph subclass: #GdsToolsMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/13/2008 17:11'!activateRadio: aSymbol	| radioItem |	self hideAllRadioItems.	radioItem := self valueOfProperty: aSymbol ifAbsent: [nil].	radioItem 		ifNotNil: [			radioItem visible: true.			self addMorphBack: radioItem.			radioItem fullUpdate].	self toolsTop fullUpdate.	! !!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/12/2008 21:48'!addRadioItem: aGroupPane forKey: aSymbol	self radioKeys add: aSymbol.	self setProperty: aSymbol toValue: aGroupPane.	aGroupPane visible: false.	self addMorphBack: aGroupPane.	! !!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/12/2008 23:28'!hideAllRadioItems	| radioItem |	self radioKeys do: [:each |		radioItem := self valueOfProperty: each ifAbsent: [nil].		radioItem ifNotNil: [			self removeMorph: radioItem. 			radioItem visible: false]].! !!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/12/2008 22:51'!radioButtonNamed: name key: aSymbol 	| button |	button := self 		commandNamed: name		selector: #activateRadio:		target: self.	button argumentsSymbol: aSymbol.	^ button! !!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/12/2008 22:22'!radioItemForKey: aSymbol	^self valueOfProperty: aSymbol ifAbsent: [nil].	! !!GdsToolsMorph methodsFor: 'radio' stamp: 'kf 11/12/2008 21:47'!radioKeys	^self valueOfProperty: #radioKeys ifAbsentPut: [Set new].	! !!GdsToolsMorph methodsFor: 'utility' stamp: 'kf 11/13/2009 11:31'!applyColorsToSubGroups: aMorph 	| colors |	colors := (Color  wheel: aMorph submorphCount).	aMorph submorphs doWithIndex: [:each :index | each color: (colors at: index)].! !!GdsToolsMorph methodsFor: 'ui factory' stamp: 'kf 11/4/2009 13:20'!commandNamed: aCommandName selector: aSelector target: aTarget	| button sel |	button := GdsToolsBuilder buttonNamed: aCommandName localizedGdsCaption.	(aCommandName localizedGdsHelpText)		ifNotEmpty: [			button setBalloonText: aCommandName localizedGdsHelpText].	(button isKindOf: PluggableButtonMorph)		ifTrue:[			button model: aTarget.			button action: aSelector]		ifFalse:[			button target: aTarget.			button actionSelector: aSelector].	(button isKindOf: PluggableButtonMorphPlus)		ifTrue:[			aSelector numArgs > 0 ifTrue: [^button].			sel := (aSelector, #Enabled) asSymbol.			(aTarget respondsTo: sel) ifFalse: [^button].			button getEnabledSelector: sel.			sel := (aSelector, #Activated) asSymbol.			((self hasActivatedSelectors includes: aSelector) or: [(aTarget respondsTo: sel)])				ifTrue: [					"can't find accessor method"					button instVarNamed: 'getStateSelector' put: sel]].	^button.! !!GdsToolsMorph methodsFor: 'ui factory' stamp: 'kf 11/12/2008 14:38'!extendedButtonNamed: aName	| button |	button := GdsToolButtonMorph new label: aName.	button onColor: Color lightGray offColor: Color white.	button hResizing: #spaceFill.	^button! !!GdsToolsMorph methodsFor: 'geometry' stamp: 'kf 2/1/2011 22:13'!constraintPosition: aPoint	| loc nX nY wld | 	loc := aPoint copy.		nX := loc x negative ifTrue: [0] ifFalse: [loc x ].	nY := loc y negative ifTrue: [0] ifFalse: [loc y ].	wld := self world ifNil: [self currentWorld].	nX = loc x 		ifTrue: [			nX := self right > wld width 				ifTrue: [wld width - self width] 				ifFalse: [loc x ]].	nY = loc y 		ifTrue: [			nY := self bottom > wld height 				ifTrue: [wld height - self height] 				ifFalse: [loc y]].				^nX@nY.! !!GdsToolsMorph methodsFor: 'geometry' stamp: 'kf 11/25/2008 12:05'!position: aPoint	| loc | 	loc := aPoint copy. 	self isFloatingWindow 		ifTrue: [			loc := self constraintPosition: aPoint].	super position: loc.! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 11/21/2008 20:38'!contentRegion	| container |	container := (self valueOfProperty: #gdsWindowContentRegion ifAbsent: [nil]).	container ifNil: [^nil].	^container submorphs first.! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 11/21/2008 20:35'!contentRegion: aMorph	aMorph borderWidth: 0.	(self valueOfProperty: #gdsWindowContentRegion) addMorphBack: aMorph! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 5/15/2009 14:07'!fillSelector	^self valueOfProperty: #fillSelector ifAbsent: [nil]! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 5/15/2009 14:06'!fillSelector: aSymbol	self setProperty: #fillSelector toValue: aSymbol.! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 21:23'!groupKey	^self valueOfProperty: #groupKey ifAbsent: [nil]! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 21:24'!groupKey: aSymbol	self setProperty: #groupKey toValue: aSymbol.! !!GdsToolsMorph methodsFor: 'accessing' stamp: 'kf 11/21/2008 20:00'!toolsTop	| toolsMorphs |	toolsMorphs := (self ownerChain select: [:each | each isKindOf: GdsToolsMorph]).	toolsMorphs ifNotEmpty: [^toolsMorphs last].	^self! !!GdsToolsMorph methodsFor: 'example' stamp: 'kf 11/12/2008 18:24'!dummyAction	Transcript cr; show: 'this is dummy action'.! !!GdsToolsMorph methodsFor: 'example' stamp: 'kf 11/12/2008 18:25'!dummyCommandNamed: aCommandName	^self commandNamed: aCommandName selector: #dummyAction target: self.! !!GdsToolsMorph methodsFor: 'example' stamp: 'kf 11/12/2008 18:22'!dummyEnabled	^true.! !!GdsToolsMorph methodsFor: 'example' stamp: 'kf 11/12/2008 21:14'!fillDummyIdButtons	self newDummyIdButtonsOn: self.! !!GdsToolsMorph methodsFor: 'example' stamp: 'kf 11/12/2008 21:14'!newDummyIdButtonsOn: aMorph	#('ID' 'IDADD' 'UNID' 'IDCLEAR' 'IDWINDOW' 'IDCOPY')		do: [:each |			self addMorphBack: (self dummyCommandNamed: each).]! !!GdsToolsMorph methodsFor: 'update' stamp: 'kf 11/4/2009 13:41'!fillButtons	self fillSelector		ifNotNil: [			self contentRegion perform: self fillSelector.			"self localizeGds."			self fullUpdate.].! !!GdsToolsMorph methodsFor: 'update' stamp: 'kf 5/28/2009 13:58'!fullUpdate	self extent: self extent + (1@1).	self currentWorld doOneCycle.	self extent: self extent - (1@1).	self currentWorld doOneCycle.! !!GdsToolsMorph methodsFor: 'update' stamp: 'kf 5/15/2009 14:16'!removeButtons	self contentRegion removeAllMorphs.! !!GdsToolsMorph methodsFor: 'initialization' stamp: 'kf 11/12/2008 15:20'!initialize	super initialize.	GdsToolsBuilder changeToolsGroup: self.	! !!GdsToolsMorph methodsFor: 'testing' stamp: 'kf 11/25/2008 11:34'!isFloatingWindow	^#floating = (GdsToolsBuilder gdsWindowClass: self)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsToolsMorph class	instanceVariableNames: ''!!GdsToolsMorph class methodsFor: 'examples' stamp: 'kf 11/21/2008 16:57'!exampleIdButtons	"self exampleIdButtons"	(self new fillDummyIdButtons) openInWorld. ! !!GdsToolsMorph class methodsFor: 'deprecated' stamp: 'kf 5/4/2009 09:57'!newFloatingWindow	self deprecated: 'Use #newFloatingWindowNamed:'.	^self newFloatingWindowNamed: ''.	! !!GdsToolsMorph class methodsFor: 'building-ui' stamp: 'kf 11/2/2009 12:01'!newFloatingWindowNamed: aString	"GdsToolsMorph newFloatingWindow openInWorld"	| topMorph contentRegion dragRegion |	topMorph := GdsToolsMorph new.	topMorph setNameTo: aString.	topMorph hResizing: #shrinkWrap.	contentRegion := GdsToolsMorph new.	dragRegion := GdsToolsMorph new.	dragRegion height: (GdsFeelMorphic controlCaptionFontSize + 1).	dragRegion color: GdsToolsBuilder toolWindowGripFill.	topMorph addMorphBack: dragRegion.	topMorph addMorphBack: contentRegion.	topMorph setProperty: #gdsWindowClass toValue:  #floating.	topMorph addDropShadow.	topMorph shadowColor: Color darkGray.	topMorph setProperty: #gdsWindowContentRegion toValue: contentRegion.	^topMorph	! !PluggableButtonMorphPlus subclass: #GdsToolButtonMorph	instanceVariableNames: 'argumentSymbol'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 22:55'!argumentSymbol 	^{ argumentSymbol }! !!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 22:53'!argumentsSymbol: aSymbol 	argumentSymbol := aSymbol.	self 		argumentsProvider: self		argumentsSelector: #argumentSymbol! !!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 11/9/2008 21:17'!enabled: aBool	| string |	super enabled: aBool.	string := self findDeeplyA: StringMorph.	"self changeSmallFont: string."	self enabled 		ifTrue: [			string color: Color black]		ifFalse:[			self color: Color white..			string color: Color veryVeryLightGray].! !!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 10/26/2008 22:48'!getLabelSelector: aSymbol	getLabelSelector := aSymbol.	self update: aSymbol.! !!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 10/21/2008 21:59'!getStateSelector: aSymbol	getStateSelector := aSymbol.	self update: aSymbol.! !!GdsToolButtonMorph methodsFor: 'accessing' stamp: 'kf 11/2/2009 09:56'!label: aString	super label: aString font: GdsToolsBuilder controlCaptionFont.! !!GdsToolButtonMorph methodsFor: 'drawing' stamp: 'kf 2/2/2011 21:06'!drawOn: aCanvas	"not use modan decorative border"	aCanvas fillRectangle: self bounds fillStyle: self fillStyle borderStyle: self borderStyle.! !!GdsToolButtonMorph methodsFor: 'updating' stamp: 'kf 10/28/2008 20:42'!model	^model! !!GdsToolButtonMorph methodsFor: 'updating' stamp: 'kf 11/2/2009 09:27'!update: what	what ifNotNil: [		what == getLabelSelector 			ifTrue:[self label: (model perform: getLabelSelector)]].	GdsToolsBuilder changeControlCaptionFont: (self findDeeplyA: StringMorph).				^super update: what! !GdsToolsMorph subclass: #GdsStructureToolsMorph	instanceVariableNames: 'structureMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStructureToolsMorph commentStamp: 'kf 11/14/2008 20:18' prior: 0!A GdsStructureToolsMorph is xxxxxxxxx.Instance Variables	structureMorph:		<GdsStructureMorph>structureMorph	- xxxxx!!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 11:10'!addButtonOn: groupPane named: commandName enabledSelector: enabledSelecter toolClass: toolClass 	self 		addButtonOn: groupPane		named: commandName		enabledSelector: enabledSelecter		toolClass: toolClass		userInfo: nil! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 11:15'!addButtonOn: groupPane named: commandName enabledSelector: enabledSelecter toolClass: toolClass userInfo: aPrameter 	| button |	button := self newButtonNamed: commandName enabledSelector: enabledSelecter  toolClass: toolClass userInfo: aPrameter.	groupPane addMorphBack: button! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 11:11'!addButtonOn: groupPane named: commandName selector: selector 	self 		addButtonOn: groupPane		named: commandName		selector: selector		labelSelector: nil! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 5/13/2009 11:27'!addButtonOn: groupPane named: commandName selector: selector labelSelector: labelSelector 	self addButtonOn: groupPane named: commandName selector: selector labelSelector: labelSelector enabledSelector: nil.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 5/13/2009 11:38'!addButtonOn: groupPane named: commandName selector: selector labelSelector: labelSelector enabledSelector: enabledSelector	| button |	button := self 		commandNamed: commandName		selector: selector		target: structureMorph.	labelSelector ifNotNil: [ button getLabelSelector: labelSelector ].	enabledSelector ifNotNil: [ button getEnabledSelector: enabledSelector ].	self registerDepend: button.	groupPane addMorphBack: button! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/14/2008 23:02'!idCommandNamed: aCommandName selector: aSelector	|b |	b := self commandNamed: aCommandName selector: aSelector target: structureMorph model idSelection.	self registerDepend: b.	^b.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 15:28'!idCommandSelector: aSelector	^self idCommandNamed: aSelector asString asUppercase selector: aSelector.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/12/2008 17:42'!itemCommandNamed: aCommandName selector: aSelector	^self commandNamed: aCommandName selector: aSelector target: structureMorph model currentItem.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/12/2008 17:43'!itemCommandSelector: aSelector	^self itemCommandNamed: aSelector asString asUppercase selector: aSelector.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/12/2008 15:41'!morphCommandNamed: aCommandName selector: aSelector	| button |	button := self commandNamed: aCommandName selector: aSelector target: self.	self model addDependent: button.	^button	! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/12/2008 15:41'!morphCommandSelector: aSelector	^self morphCommandNamed: aSelector asString asUppercase selector: aSelector.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 22:25'!newButtonNamed: commandName enabledSelector: enabledSelecter toolClass: toolClass userInfo: aPrameter 	| button |	button := self 		commandNamed: commandName		selector: #currentToolClass:userInfo:		target: structureMorph.	(button isKindOf: PluggableButtonMorphPlus) ifTrue: [ button getEnabledSelector: enabledSelecter ].	button arguments: {  toolClass. aPrameter  }.	self registerDepend: button.	^button.! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/13/2008 22:25'!newButtonNamed: commandName selector: selector labelSelector: labelSelector 	| button |	button := self 		commandNamed: commandName		selector: selector		target: structureMorph.	labelSelector ifNotNil: [ button getLabelSelector: labelSelector ].	self registerDepend: button.	^button! !!GdsStructureToolsMorph methodsFor: 'ui-basic' stamp: 'kf 11/14/2008 22:57'!registerDepend: button	structureMorph model currentItem addDependent: button.	structureMorph model idSelection addDependent: button.	structureMorph model addDependent: button.	structureMorph addDependent:  button.	^button! !!GdsStructureToolsMorph methodsFor: 'command-selectors' stamp: 'kf 11/12/2008 16:47'!digitaizingDirectionSelectors	^ #(#horizfirst #vertfirst )! !!GdsStructureToolsMorph methodsFor: 'command-selectors' stamp: 'kf 11/12/2008 16:47'!digitaizingModeSelectors	^ #(#straight #octagonal #orthint )	" , #(edge hardlocks)"! !!GdsStructureToolsMorph methodsFor: 'command-selectors' stamp: 'kf 11/6/2009 14:09'!elementKindSelectors	^Array 		streamContents: [:s |			s nextPut: #boundary.			s nextPut: #path.			s nextPut: #sref.			(Smalltalk at: #GdsArrayedStructureReference ifAbsent: [nil])				ifNotNil: [s nextPut: #aref]].! !!GdsStructureToolsMorph methodsFor: 'id group' stamp: 'kf 11/13/2009 20:35'!fillDigitizingTools	self newDigitizingToolsOn: self.! !!GdsStructureToolsMorph methodsFor: 'id group' stamp: 'kf 11/21/2008 22:00'!fillIdContextTools	self newIdContextToolsOn: self! !!GdsStructureToolsMorph methodsFor: 'id group' stamp: 'kf 11/26/2009 10:12'!newIdContextToolsOn: parentMorph	| groupPane | 	groupPane := self newToolsGroupPaneFramed.	self newIdButtonOn: groupPane.	self newIdAddButtonOn: groupPane.	self newIdWindowButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	groupPane := self newToolsGroupPaneFramed.	self newUnIdButtonOn: groupPane.	self newUnIdWindowButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	groupPane := self newToolsGroupPaneFramed.	self newIdClearButtonOn: groupPane.	self newIdCopyButtonOn: groupPane.	self newIdMoveButtonOn: groupPane.	self newIdDeleteButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	GdsFeelMorphic colorRiseToolsGroup 		ifTrue: [			self applyColorsToSubGroups: parentMorph].	^ parentMorph! !!GdsStructureToolsMorph methodsFor: 'goodies group' stamp: 'kf 11/12/2008 16:41'!fillGoodiesTools	^self newGoodiesToolsOn: self.! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 12/8/2009 14:30'!fillKinds	| kinds kindState  |	structureMorph ifNil: [^self].	(structureMorph model) ifNil: [^self].	kinds := (structureMorph model) kinds.	self removeAllMorphs .	kinds keys do: [:each |		kindState := GdsKindStateMorph new kind: (kinds atKey: each).		kindState addDependent: structureMorph.		self addMorphBack: kindState].	! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 10/30/2009 13:13'!fillLayers	| layers layerState localLayers |	structureMorph ifNil: [^self].	(structureMorph model) ifNil: [^self].	layers := (structureMorph model) layers.	localLayers := (structureMorph model) localLayers.	self removeAllMorphs .	layers numbers do: [:each |		layerState := GdsLayerStateMorph new layer: (layers atNumber: each).		layerState addDependent: structureMorph.		layerState bold: (localLayers numbers includes: each).		self addMorphBack: layerState].	! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 11/12/2008 17:36'!filltemContextTools	^self newItemContextToolsOn: self.! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 11/12/2009 11:43'!newArrayShapeButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ASHAPE'		selector: #requestArrayShape		labelSelector: #requestArrayShapeLabel! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 11/13/2009 20:30'!newDigitizingToolsOn: parentMorph 	self 		newItemGroupOn: parentMorph		selectors: self digitaizingModeSelectors.	self 		newItemGroupOn: parentMorph		selectors: self digitaizingDirectionSelectors.	parentMorph! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 11/27/2009 14:32'!newItemContextToolsOn: parentMorph 	| button groupPane |	groupPane := self newToolsGroupPaneFramed.	self newDirectSegmentButtonOn: groupPane.	self newDirectRectangleButtonOn: groupPane.	self newDirectBoxTextButtonOn: groupPane.	self newEnterTextButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	groupPane := self newToolsGroupPaneFramed.	self 		newItemGroupOn: groupPane		selectors: self elementKindSelectors.	parentMorph addMorphBack: groupPane.	false "move to separate tools window"		ifTrue: [			groupPane := self newToolsGroupPaneFramed.			self newDigitizingToolsOn: groupPane.			parentMorph addMorphBack: groupPane].	"REFERENCE ELEMENT GROUP"	groupPane := self newToolsGroupPaneFramed.	self newStructureNameButtonOn: groupPane.	self newAngleButtonOn: groupPane.	self newMagButtonOn: groupPane.	self newReflectButtonOn: groupPane.	(Smalltalk at: #GdsArrayedStructureReference ifAbsent: [nil])		ifNotNil: [self newArrayShapeButtonOn: groupPane].		parentMorph addMorphBack: groupPane.		groupPane := self newToolsGroupPaneFramed.	self newLayerButtonOn: groupPane.	self newWidthButtonOn: groupPane.	self newPathTypeButtonOn: groupPane.	parentMorph addMorphBack: groupPane.		groupPane := self newToolsGroupPaneFramed.	self newCeButtonOn: groupPane.	button := self itemCommandSelector: #put.	groupPane addMorphBack: button.	self newGetButtonOn: groupPane.	self newUngetButtonOn: groupPane.	self newWipeButtonOn: groupPane.	self newMoveButtonOn: groupPane.		parentMorph addMorphBack: groupPane.		groupPane := self newToolsGroupPaneFramed.	self newStretchButtonOn: groupPane.	self newMovePointButtonOn: groupPane.	self newDeleteVertexButtonOn: groupPane.	self newItemReverseButtonOn: groupPane.	parentMorph addMorphBack: groupPane.		GdsFeelMorphic colorRiseToolsGroup 		ifTrue: [			self applyColorsToSubGroups: parentMorph].		^ parentMorph! !!GdsStructureToolsMorph methodsFor: 'item group' stamp: 'kf 11/12/2009 16:45'!newItemGroupOn: parentMorph selectors: selectors 	| button |	selectors do: 		[ :each | 		button := self itemCommandSelector: each.		parentMorph addMorphBack: button ].! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/27/2009 14:39'!fillViewingTools	self newViewingToolsOn: self! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/27/2009 15:54'!newGridDisplayMultiplyButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'GRID'		selector: #requestGridDisplayMultiply		labelSelector: #requestGridDisplayMultiplyLabel! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/27/2009 14:42'!newGridScaleButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'GSCALE'		selector: #requestGridScale		labelSelector: #requestGridScaleLabel! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/28/2009 22:44'!newViewFitButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'FIT'		selector: #viewFit! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 12/2/2009 21:39'!newViewMoveDownButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'DOWN'		selector: #viewMoveDown! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 12/2/2009 21:39'!newViewMoveLeftButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'LEFT'		selector: #viewMoveLeft! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 12/2/2009 21:39'!newViewMoveRightButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'RIGHT'		selector: #viewMoveRight! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 12/2/2009 18:16'!newViewMoveUpButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'UP'		selector: #viewMoveUp! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/28/2009 22:47'!newViewZoomDoubleButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ZOOM 2.0'		selector: #viewZoomDouble! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 11/28/2009 22:47'!newViewZoomHalfButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ZOOM 0.5'		selector: #viewZoomHalf! !!GdsStructureToolsMorph methodsFor: 'buttons-viewing' stamp: 'kf 12/2/2009 21:41'!newViewingToolsOn: parentMorph	| groupPane block row spacer| 	groupPane := self newToolsGroupPaneFramed.	self newGridScaleButtonOn: groupPane.	self newGridDisplayMultiplyButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	groupPane := self newToolsGroupPaneFramed.	self newViewZoomDoubleButtonOn: groupPane.	self newViewFitButtonOn: groupPane.	self newViewZoomHalfButtonOn: groupPane.	parentMorph addMorphBack: groupPane.	block := [ | bar |		bar := AlignmentMorph newRow.		bar vResizing: #shrinkWrap.		bar color:  Color transparent.	bar].		spacer := [ | m |		m := RectangleMorph new extent: 16 asPoint.		m borderWidth: 0.		m color: Color transparent.		m].	groupPane := self newToolsGroupPaneFramed.	self newViewMoveUpButtonOn: groupPane.	row := (block value).	self newViewMoveLeftButtonOn: row.	self newViewMoveRightButtonOn: row.	groupPane addMorphBack: row.	self newViewMoveDownButtonOn: groupPane.				parentMorph addMorphBack: groupPane.	GdsFeelMorphic colorRiseToolsGroup 		ifTrue: [			self applyColorsToSubGroups: parentMorph].	^ parentMorph! !!GdsStructureToolsMorph methodsFor: 'testing' stamp: 'kf 11/12/2008 16:47'!hasActivatedSelectors	^ self digitaizingDirectionSelectors , self digitaizingModeSelectors , self elementKindSelectors! !!GdsStructureToolsMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 16:57'!model	^(self ownerThatIsA: GdsStationUI) model.! !!GdsStructureToolsMorph methodsFor: 'buttons-item-reference' stamp: 'kf 5/14/2009 22:11'!newAngleButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ANGLE'		selector: #requestAngle		labelSelector: #requestAngleLabel		enabledSelector: #requestAngleEnabled		! !!GdsStructureToolsMorph methodsFor: 'buttons-item-reference' stamp: 'kf 5/15/2009 22:48'!newMagButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'MAG'		selector: #requestMag		labelSelector: #requestMagLabel		enabledSelector: #requestMagEnabled		! !!GdsStructureToolsMorph methodsFor: 'buttons-item-reference' stamp: 'kf 11/10/2009 14:20'!newReflectButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'REFL'		selector: #toggleReflect		labelSelector: #toggleReflectLabel		enabledSelector: #toggleReflectEnabled		! !!GdsStructureToolsMorph methodsFor: 'buttons-item-reference' stamp: 'kf 5/14/2009 23:07'!newStructureNameButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'SNAME'		selector: #chooseStructureName		labelSelector: #chooseStructureNameLabel		enabledSelector: #chooseStructureNameEnabled		! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:10'!newCeButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'CE'		enabledSelector: #ceEnabled		toolClass: GdsVertexInputTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 7/13/2009 16:46'!newDeleteVertexButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'DVERT'		enabledSelector: #itemDeleteVertexEnabled		toolClass: GdsDeleteVertexTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 5/6/2009 17:29'!newDirectBoxTextButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'BOXTEXT'		enabledSelector: #everyEnabled		toolClass: GdsDirectBoxTextTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:10'!newGetButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'GET'		enabledSelector: #getElementEnabled		toolClass: GdsGetTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 7/15/2009 10:19'!newItemReverseButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ITEMREVERSE'		selector: #itemReverse! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 5/13/2009 11:28'!newLayerButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'LAYER'		selector: #chooseLayer		labelSelector: #chooseLayerLabel		enabledSelector: #chooseLayerEnabled! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:10'!newMoveButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'MOVE'		enabledSelector: #itemMoveEnabled		toolClass: GdsItemMoveTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:10'!newMovePointButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'MOVEPOINT'		enabledSelector: #itemMovePointEnabled		toolClass: GdsMovePointTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 10/27/2009 11:46'!newPathTypeButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'PATHTYPE'		selector: #choosePathType		labelSelector: #choosePathTypeLabel		enabledSelector: #choosePathTypeEnabled	! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:10'!newStretchButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'STRETCH'		enabledSelector: #itemStretchEnabled		toolClass: GdsStretchTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/12/2008 15:45'!newUngetButtonOn: groupPane 	groupPane addMorphBack: (self itemCommandSelector: #unget)! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 5/13/2009 11:28'!newWidthButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'WIDTH'		selector: #requestWidth		labelSelector: #requestWidthLabel		enabledSelector: #requestWidthEnabled	! !!GdsStructureToolsMorph methodsFor: 'buttons-item' stamp: 'kf 11/13/2008 11:11'!newWipeButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'WIPE'		selector: #confirmWipe! !!GdsStructureToolsMorph methodsFor: 'buttons-item-direct' stamp: 'kf 11/27/2008 23:45'!newDirectRectangleButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'RT'		enabledSelector: #everyEnabled		toolClass: GdsDirectRectangleTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item-direct' stamp: 'kf 7/8/2009 09:45'!newDirectSegmentButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'SEGS'		enabledSelector: #everyEnabled		toolClass: GdsDirectSegmentTool! !!GdsStructureToolsMorph methodsFor: 'buttons-item-direct' stamp: 'kf 5/7/2009 14:55'!newEnterTextButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ENTERTEXT'		selector: #requestEnterText	! !!GdsStructureToolsMorph methodsFor: 'ui factory' stamp: 'kf 11/11/2009 20:43'!newGoodiesToolsOn: parentMorph 	|  button |	button := self 		commandNamed: 'INVERT BKGND'		selector: #toggleBackgroundColor		target: structureMorph.	parentMorph addMorphBack: button.		button := self 		commandNamed: 'PNG OUT'		selector: #fileOutPicture		target: structureMorph.	parentMorph addMorphBack: button.		button := self 		commandNamed: 'EXPLORE ITEM'		selector: #exploreItem		target: structureMorph.	button getEnabledSelector: #holdsElement.	self registerDepend: button.	parentMorph addMorphBack: button.	button := self 		commandNamed: 'DRAW PROFILE'		selector: #runProfile		target: structureMorph.	parentMorph addMorphBack: button.		^ parentMorph! !!GdsStructureToolsMorph methodsFor: 'ui factory' stamp: 'kf 11/12/2008 16:44'!newToolsGroupPane	^self class fromStructureMorph: structureMorph.! !!GdsStructureToolsMorph methodsFor: 'ui factory' stamp: 'kf 11/12/2009 17:11'!newToolsGroupPaneFramed	| pane |	pane := self newToolsGroupPane.	pane borderStyle: BorderStyle complexFramed.	pane borderWidth: 4. 	^pane! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/27/2008 23:52'!newIdAddButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'IDADD'		enabledSelector: #everyEnabled		toolClass: GdsIdTool		userInfo: #idAdd:! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/27/2008 23:52'!newIdButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'ID'		enabledSelector: #everyEnabled		toolClass: GdsIdTool		userInfo: #id:! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/14/2008 22:57'!newIdClearButtonOn: groupPane 	| button|	button := (self idCommandSelector: #idClear).	groupPane addMorphBack: button! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/17/2008 10:28'!newIdCopyButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'IDCOPY'		enabledSelector: #idNotEmpty		toolClass: GdsIdOffsetTool		userInfo: #idCopyOffset:		! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/14/2008 22:57'!newIdDeleteButtonOn: groupPane 	| button|	button := (self idCommandSelector: #idDelete).	groupPane addMorphBack: button! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/17/2008 10:28'!newIdMoveButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'IDMOVE'		enabledSelector: #idNotEmpty		toolClass: GdsIdOffsetTool		userInfo: #idMoveOffset:		! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/27/2008 23:52'!newIdWindowButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'IDWINDOW'		enabledSelector: #everyEnabled		toolClass: GdsIdWindowTool		userInfo: #idAdd:! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/13/2008 15:25'!newUnIdButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'UNID'		enabledSelector: #unIdEnabled		toolClass: GdsIdTool		userInfo: #unId:! !!GdsStructureToolsMorph methodsFor: 'buttons-id' stamp: 'kf 11/18/2008 14:34'!newUnIdWindowButtonOn: groupPane 	self 		addButtonOn: groupPane		named: 'UNIDWINDOW'		enabledSelector: #unIdEnabled		toolClass: GdsIdWindowTool		userInfo: #unId:		! !!GdsStructureToolsMorph methodsFor: 'private' stamp: 'kf 11/12/2008 16:28'!structureMorph: aGdsStructureMorph 	structureMorph := aGdsStructureMorph! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsStructureToolsMorph class	instanceVariableNames: ''!!GdsStructureToolsMorph class methodsFor: 'as yet unclassified' stamp: 'kf 11/12/2008 16:28'!fromStructureMorph: aGdsStructureMorph 	^self new structureMorph: aGdsStructureMorph! !GdsStructureToolsMorph subclass: #GdsStationUIToolsMorph	instanceVariableNames: 'stationUI'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStationUIToolsMorph commentStamp: 'kf 11/14/2008 20:18' prior: 0!A GdsStationUIToolsMorph is xxxxxxxxx.Instance Variables	stationUI:		<GdsStationUI>stationUI	- xxxxx!!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 6/8/2009 17:20'!bstruct	| name ok default |	name := nil.	self station bstructName: [		ok := false.		default := ''.		[ok] 			whileFalse: [				name := UIManager default request: 'Enter structure:' initialAnswer: default . 				name := GdsCompatibility default coerceStructureName: name.				name = '' 					ifTrue: [						name := nil.						ok := true.]					ifFalse: [						(self station library hasStructureName: name)							ifTrue: [default := name]							ifFalse: [ok := true]].].		name].! !!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 11/4/2009 15:01'!closelib	self tstructEnabled ifTrue: [self tstruct].	Cursor wait showWhile: [self station closeLibrary].	structureMorph setupLibraryChooser: self station.	structureMorph setVisible: false forKey: #structureChooser. 	! !!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 10/8/2009 10:04'!initlib	| name unit msg reply lib|	name := self requestLibraryName.	name ifNil: [^self].	unit := self chooseUnit.	unit ifNil: [^self].	msg := 'initialize ok?DB: {1}UNIT: {2}' format: {name . unit}.	reply := UIManager default confirm: msg orCancel: [nil].	reply ifNil: [^self].	reply ifFalse: [^self].	lib := self station initlibNamed: name unitString: unit.	lib		ifNil: [self inform: 'initialize failed']		ifNotNil: [self inform: ('{1}initialized' format: {name})]. ! !!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 6/18/2009 16:33'!openlib	|  chooseIndex |	self station openlibNames: [:names |			chooseIndex := UIManager default chooseFrom: names.		chooseIndex = 0 			ifTrue: [nil]					ifFalse: [names at: chooseIndex]]			sortBlock: [:a :b | a  <  b ].	self comeToFront.! !!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 11/12/2008 17:12'!ostruct	|  chooseIndex |	self station ostructNames: [:names |			chooseIndex := UIManager default chooseFrom: names.		chooseIndex = 0 			ifTrue: [nil]					ifFalse: [names at: chooseIndex]]			sortBlock: [:a :b | a timeModified >=  b timeModified] .! !!GdsStationUIToolsMorph methodsFor: 'command-handler' stamp: 'kf 11/4/2009 14:49'!tstruct	structureMorph fileOutPreview.	self station tstruct.! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 11/12/2008 17:12'!bstructEnabled	^self station bstructEnabled.! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 6/22/2009 17:18'!closelibEnabled	self station structure		ifNotNil: [			self station structure closeEnabled				ifFalse: [^false].].	^self station library isNil not.! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 6/18/2009 10:44'!initlibEnabled	^true! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 6/18/2009 15:00'!openlibEnabled	GdsLibrary names ifEmpty: [^false].	^self station library isNil.! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 11/12/2008 17:13'!ostructEnabled	^self station ostructEnabled.! !!GdsStationUIToolsMorph methodsFor: 'testing' stamp: 'kf 11/12/2008 17:14'!tstructEnabled	^self station tstructEnabled.! !!GdsStationUIToolsMorph methodsFor: 'other' stamp: 'kf 8/16/2009 17:11'!chooseUnit	| index |	index := UIManager default 		chooseFrom: (GdsLibrary unitStrings) lines: #() title: 'Choose Unit:'.	index = 0 ifTrue: [^nil].	^GdsLibrary unitStrings at: index.! !!GdsStationUIToolsMorph methodsFor: 'other' stamp: 'kf 11/26/2009 10:12'!fillLibraryContextTools	| groupPane |	groupPane := self newToolsGroupPaneFramed.	self newStationContextToolsOn: groupPane.	self addMorphBack:  groupPane.		groupPane := self newToolsGroupPaneFramed.	self newLibraryContextToolsOn: groupPane.	self addMorphBack:  groupPane.	GdsFeelMorphic colorRiseToolsGroup 		ifTrue: [			self applyColorsToSubGroups: groupPane].! !!GdsStationUIToolsMorph methodsFor: 'other' stamp: 'kf 8/16/2009 17:57'!libraryControlsSelectors	^#(initlib openlib closelib)	! !!GdsStationUIToolsMorph methodsFor: 'other' stamp: 'kf 10/12/2012 20:14'!requestLibraryName	| name ok default |	name := nil.		ok := false.		default := ''.		[ok] 			whileFalse: [				name := UIManager default 					request: 'Enter libraryname:' initialAnswer: default . 				name := name trimOutsideSpace.				name := GdsCompatibility default coerceStructureName: name.				name = '' 					ifTrue: [						name := nil.						ok := true.]					ifFalse: [						(GdsLibrary existsBaseName:  name)							ifTrue: [default := name]							ifFalse: [ok := true]].].	^name	! !!GdsStationUIToolsMorph methodsFor: 'other' stamp: 'kf 11/12/2008 17:18'!structureControlsSelectors	^#(bstruct ostruct tstruct) 	"^#(bstruct ostruct estruct cstruct tstruct)" 	! !!GdsStationUIToolsMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 17:01'!model	^stationUI model.! !!GdsStationUIToolsMorph methodsFor: 'accessing' stamp: 'kf 11/12/2008 17:10'!station	^self model! !!GdsStationUIToolsMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 15:33'!stationUI: aGdsStationUI	stationUI := aGdsStationUI.	self structureMorph: (aGdsStationUI findDeeplyA: GdsFeelMorphic structureScreenClass ).! !!GdsStationUIToolsMorph methodsFor: 'building-ui' stamp: 'kf 11/12/2008 17:04'!newLibraryContextToolsOn: parentMorph 	| button |	self structureControlsSelectors do: 		[ :each | 		button := self morphCommandSelector: each.		parentMorph addMorphBack: button ].	^ parentMorph! !!GdsStationUIToolsMorph methodsFor: 'building-ui' stamp: 'kf 6/18/2009 10:39'!newStationContextToolsOn: parentMorph 	| button |	self libraryControlsSelectors do: 		[ :each | 		button := self morphCommandSelector: each.		parentMorph addMorphBack: button ].	^ parentMorph! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsStationUIToolsMorph class	instanceVariableNames: ''!!GdsStationUIToolsMorph class methodsFor: 'as yet unclassified' stamp: 'kf 11/12/2008 17:07'!fromStationUI: aGdsStationUI	^self new stationUI: aGdsStationUI! !PluggableLayersMorph subclass: #GdsStructureViewMorph	instanceVariableNames: 'penColor offCanvas viewport colClipBounds portStack viewRange'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStructureViewMorph commentStamp: 'kf 11/19/2009 10:56' prior: 0!A GdsStructureMorph is GDSII structures editor view morph.Instance Variables	offCanvas:		<FormCanvas>	penColor:		<Color>	viewport:		<GdsViewport>	portStack		<Array<GdsViewport>>			offCanvas	- xxxxxpenColor	- xxxxxviewport	- xxxxxportStack	- xxxxx!!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/13/2009 13:22'!activeViewport	| port |	port := self peekViewport.	^port ifNil: [self viewport] ifNotNil: [port].	! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/24/2009 16:15'!createViewport	| vp |	vp := GdsViewport new.	vp model: self model.	vp pixelBoundsSelector: #innerBounds.	vp pixelBoundsTarget: self.	^vp! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/11/2009 22:39'!insideViewLevels	viewRange ifNil: [^true].	^self viewRange includes: self portStack size - 1.	! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 5/12/2009 18:22'!peekViewport	^self portStack last. ! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/24/2009 16:50'!popViewport	| result |	result := self portStack last. 	 portStack := portStack allButLast.	^result.! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 5/12/2009 22:29'!portStack	portStack ifNil: [portStack := OrderedCollection new.].	^portStack! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/24/2009 16:50'!pushTransform: transform during: aBlock	| vp |	vp := self createViewport.	vp viewCenter: (self activeViewport viewCenter).	vp viewScale: (self activeViewport viewScale).	self portStack do: [:each |		vp composeNewTransform: each compositMatrix].	vp composeNewTransform:  transform.	self pushViewport: vp.	aBlock value.	self popViewport.		! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/24/2009 16:22'!pushViewport: aGdsViewport	self assert: aGdsViewport isNil not.	self portStack add: aGdsViewport.	"Transcript cr; show: aGdsViewport compositMatrix."	! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/11/2009 22:33'!viewRange	^viewRange	! !!GdsStructureViewMorph methodsFor: 'viewport' stamp: 'kf 11/11/2009 22:37'!viewRangeFrom: minValue to: maxValue	viewRange := Interval from: minValue to: maxValue.	self changed: #viewRange! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/1/2009 16:05'!clipedElements	^self clipedElements:  self activeViewport worldViewBounds.		! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/18/2008 21:36'!clipedElements: viewBounds	^model liveElements select: [:each |		each dataBounds intersects: viewBounds.].		! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/14/2009 15:19'!colorForElement: aGdsElement	(aGdsElement state = #inStructure) 		ifTrue: [			(aGdsElement hasLayer) 				ifTrue: [					^(self colorForLayer: aGdsElement layerNumber)]].	^self visiblePenColor.		! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 10/29/2009 11:03'!colorForLayer: aLayerNumber	| usingColor |	usingColor := (self model layers atNumber: aLayerNumber) color.	(usingColor = Color white) ifTrue: [^self visiblePenColor].	(usingColor = #white) ifTrue: [^self visiblePenColor].	^usingColor.! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 20:34'!drawInlineOn: aCanvas	super drawOn: aCanvas.	self drawOffOn: aCanvas! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/1/2009 00:22'!drawLocalIgnoreItemOn: aLocalCanvas	self drawLocalIgnoreItemOn: aLocalCanvas elements: self visibleElements! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/1/2009 00:21'!drawLocalIgnoreItemOn: aLocalCanvas elements: aElements	self 		drawLocalIgnoreItemOn: aLocalCanvas 		elements:  aElements 		drawBlock: [:canvas :element |			self drawOn: canvas element: element] ! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/24/2009 15:37'!drawLocalIgnoreItemOn: aLocalCanvas elements: aElements drawBlock: aDrawBlock	|  sElements pElements consumed|	sElements := OrderedCollection new.	pElements := OrderedCollection new.	aElements do: [:each |		each hasLayer 			ifTrue: [pElements add: each] 			ifFalse: [sElements add: each]].			sElements asArray do: [:e |					aDrawBlock value: aLocalCanvas value: e].		consumed := Set new.		pElements := pElements asArray. 	self structure layers numbers do: [:each| 		pElements asArray do: [:e |			((consumed includes: e keyNumber) not and: [ e layerNumber = each])				ifTrue: [					aDrawBlock value: aLocalCanvas value: e.					consumed add: e keyNumber]]]! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/13/2009 09:58'!drawOffOn: aCanvas	model ifNil: [^self].	offCanvas		ifNil: [			offCanvas := 				FormCanvas 					extent: (self pixelBounds extent) 					depth: (self defaultOffCanvasDepth ). 			offCanvas fillColor: self color.			self drawLocalIgnoreItemOn: offCanvas].	offCanvas 		ifNotNil: [			aCanvas drawImage: offCanvas form at: self pixelBounds origin.].! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/13/2009 13:24'!drawOn: aCanvas	self viewport ifNil: [^super drawOn: aCanvas].	self drawInlineOn: aCanvas.! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 5/13/2009 14:49'!drawOn: aCanvas element: aGdsElement 	self drawOn: aCanvas element: aGdsElement  color: (self colorForElement: aGdsElement)! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 21:20'!drawOn: aCanvas element: aGdsElement  color: aColor	| drawer |	self		penColor: aColor		during: [			drawer := GdsElementDrawer 				fromElement: aGdsElement				morph: self.			drawer fullDrawOn: aCanvas]! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 5/6/2009 15:02'!penColor	"penColor ifNil: [penColor := self visiblePenColor]."	^penColor.	! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 9/20/2008 16:11'!penColor: aColor	penColor := aColor.! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 21:13'!penColor: aColor during: aBlock	| savedColor |	savedColor := self penColor.	self penColor: aColor.		aBlock value.	self penColor: savedColor.! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/24/2009 15:26'!redrawElements	colClipBounds ifNil: [^self visibleElements].	colClipBounds ifEmpty: [^self visibleElements].	^self clipedElements:  self activeViewport worldViewBounds.		! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 10/31/2009 23:47'!strokeOn: aCanvas element: aGdsElement	self strokeOn:  aCanvas element: aGdsElement color: nil! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 21:21'!strokeOn: aCanvas element: aGdsElement  color: aColor	| drawer |	self		penColor: (aColor ifNil: [(self colorForElement: aGdsElement)] ifNotNil: [aColor])		during: [			drawer := GdsElementDrawer 				fromElement: aGdsElement				morph: self.				drawer strokeOutlineOn: aCanvas]! !!GdsStructureViewMorph methodsFor: 'drawing' stamp: 'kf 10/27/2009 15:51'!visibleElements	^self clipedElements select: [:el | el isVisible]		! !!GdsStructureViewMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 12:52'!color: aColor	super color: aColor.	self removeCachedCanvas.	self invalidRect: self bounds.! !!GdsStructureViewMorph methodsFor: 'accessing' stamp: 'kf 10/22/2008 22:20'!structure	^self model.! !!GdsStructureViewMorph methodsFor: 'accessing' stamp: 'kf 9/27/2008 00:55'!viewport	^viewport! !!GdsStructureViewMorph methodsFor: 'defaults' stamp: 'kf 9/21/2008 22:58'!defaultBounds	^0@0 corner: 512@342.			! !!GdsStructureViewMorph methodsFor: 'defaults' stamp: 'kf 11/13/2009 09:58'!defaultOffCanvasDepth	^32	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/4/2008 15:49'!drawOn: aCanvas centerCircleAt: aWorldPoint	self drawOn: aCanvas centerCircleAt: aWorldPoint  pixelUnit: 5.! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/4/2008 13:47'!drawOn: aCanvas centerCircleAt: aWorldPoint pixelUnit: unit 	self drawOn: aCanvas centerCircleAt: aWorldPoint  pixelUnit: unit width: 1.! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/12/2009 16:03'!drawOn: aCanvas centerCircleAt: aWorldPoint pixelUnit: unit width: width	| np1 box|	np1 := self activeViewport xy2hv: aWorldPoint.	box := Rectangle center: np1 extent: (unit * 2)@(unit * 2).	aCanvas frameOval: box width: width color: self penColor.! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/11/2009 10:00'!drawOn: aCanvas character: aCharacter at: aWorldPoint extent: aWorldExtent	| defaultTTDesc glyph ttHeight translatedContours finalTransform scaleTransform locationTransform ttWidth heightRatio widthRatio |	defaultTTDesc := TTFontDescription default.	glyph := defaultTTDesc at: aCharacter.	ttWidth := glyph bounds width.	ttHeight := glyph bounds height.	widthRatio :=  aWorldExtent x  asFloat  / ttWidth asFloat.	heightRatio :=  aWorldExtent y  asFloat  / ttHeight asFloat.	scaleTransform := MatrixTransform2x3 withScale: (widthRatio@heightRatio).	locationTransform := MatrixTransform2x3 withOffset: aWorldPoint.	finalTransform := MatrixTransform2x3 identity.	finalTransform := finalTransform composedWithLocal: locationTransform.	finalTransform := finalTransform composedWithLocal: scaleTransform.	translatedContours := glyph contours 		collect: [:ptArray| 			ptArray collect: [:pt | 				 finalTransform localPointToGlobal: pt]].	translatedContours do: [:ptArray |		self drawOn: aCanvas polyLineVertices: ptArray]! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/15/2009 17:45'!drawOn: aLocalCanvas elements: elements drawingSelector: aDrawSel	elements ifNil: [^self].	elements ifEmpty: [^self].	elements do: [:el | 			| drawer |		drawer := GdsElementDrawer fromElement: el morph: self. 		drawer perform: aDrawSel with: aLocalCanvas].	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 6/8/2009 17:13'!drawOn: aCanvas fillPolyLineVertices: aPointArray	| hvPoins |		aPointArray isEmpty ifTrue: [^self].	hvPoins := self activeViewport xy2hvPoints:  aPointArray.	aCanvas drawPolygon: hvPoins color: self penColor borderWidth: 0 borderColor: nil.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/9/2009 13:34'!drawOn: aCanvas fittingFillString: aObject at: aWorldPoint extent: aWorldExtent	self 		drawOn: aCanvas 		fittingString: aObject 		at: aWorldPoint 		extent: aWorldExtent 		pointsBlock: [:ptArray |			self drawOn: aCanvas fillPolyLineVertices: ptArray].	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 10/14/2012 16:04'!drawOn: aCanvas fittingString: aObject at: aWorldPoint extent: aWorldExtent pointsBlock: aBlock	| defaultTTDesc glyph translatedContours finalTransform scaleTransform locationTransform heightRatio widthRatio  ttBounds string xStart colPoints np1 skipBlock |	defaultTTDesc := TTFontDescription default.		defaultTTDesc ifNil: [^self].		string := aObject asString.	ttBounds := TTBoxTextPrimitive calcBoundsString: string fontDescription: defaultTTDesc.	widthRatio :=  aWorldExtent x  asFloat  / (ttBounds width) asFloat.	heightRatio :=  aWorldExtent y  asFloat  / (ttBounds height) asFloat.	scaleTransform := MatrixTransform2x3 withScale: (widthRatio@heightRatio).	locationTransform := MatrixTransform2x3 withOffset: (aWorldPoint).	finalTransform := MatrixTransform2x3 identity.	finalTransform := finalTransform composedWithLocal: locationTransform.	finalTransform := finalTransform composedWithLocal: scaleTransform.	xStart := 0.0.		skipBlock := [:ptArray|		| col |		col := OrderedCollection new.		1 to: ptArray size by: 3 do:[:i|				col add: (ptArray at: i). 				col add: (ptArray at: i+2).].			col asArray.].			string do: [:ch |		glyph := defaultTTDesc at: ch.			translatedContours := glyph contours 			collect: [:ptArray| 				| points |				points := skipBlock value: ptArray.				colPoints := OrderedCollection new.				colPoints addAll:					(points collect: [:pt | |newPt|						newPt := pt x asFloat @ pt y asFloat .						newPt := newPt + (xStart@0.0)  -  ttBounds origin.					 	np1 := finalTransform localPointToGlobal: newPt.]).				colPoints add: colPoints first copy.				colPoints.].		translatedContours do: [:ptArray |		aBlock value:  ptArray].		xStart := xStart + glyph advanceWidth asFloat]! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/9/2009 13:33'!drawOn: aCanvas fittingStrokeString: aObject at: aWorldPoint extent: aWorldExtent	self 		drawOn: aCanvas 		fittingString: aObject 		at: aWorldPoint 		extent: aWorldExtent 		pointsBlock: [:ptArray |			self drawOn: aCanvas polyLineVertices: ptArray].	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/9/2009 13:10'!drawOn: aCanvas fittingStrokeString: aObject bounds: aWorldBounds	self 		drawOn: aCanvas 		fittingStrokeString: aObject 		at: aWorldBounds origin 		extent: aWorldBounds extent.! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/9/2009 12:58'!drawOn: aCanvas fittingStrokeStringOrig: aObject at: aWorldPoint extent: aWorldExtent	| origin extent string  morphicBounds ttbox|	string := aObject asString.	extent := (self activeViewport viewScale * aWorldExtent) rounded.	origin := (self activeViewport xy2hv: aWorldPoint) - (0@extent y).	morphicBounds := origin extent: extent.	ttbox := TTBoxTextContext new.	ttbox aaLevel: 1.	ttbox fillColor: nil.	ttbox borderWidth: 1.	ttbox borderColor: self penColor.	ttbox drawOn: aCanvas string: string bounds: morphicBounds.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/4/2008 13:32'!drawOn: aCanvas lineFrom: aWorldPoint1 to: aWorldPoint2 	self drawOn: aCanvas lineFrom: aWorldPoint1 to: aWorldPoint2 width: 1.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/12/2009 16:01'!drawOn: aCanvas lineFrom: aWorldPoint1 to: aWorldPoint2 width: width	| np1 np2 |	np1 := self activeViewport xy2hv: aWorldPoint1.	np2 := self activeViewport xy2hv: aWorldPoint2.	aCanvas line: np1 to: np2 width: width color: self penColor.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/5/2008 14:46'!drawOn: aCanvas lineSegment: aLineSegment	self drawOn: aCanvas lineSegment: aLineSegment width: 1	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/5/2008 14:45'!drawOn: aCanvas lineSegment: aLineSegment width: width	self drawOn: aCanvas lineFrom: aLineSegment start to: aLineSegment end width: width.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/6/2008 11:14'!drawOn: aCanvas markDiamondPointAt: aWorldPoint	self drawOn: aCanvas markDiamondPointAt: aWorldPoint pixelUnit: 5.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/29/2009 23:14'!drawOn: aCanvas markDiamondPointAt: aWorldPoint pixelUnit: unit	| points |	points := self pixelPointsOfDiamondPointAt: aWorldPoint pixelUnit: unit.	aCanvas drawPolygon: points color: nil borderWidth: 1 borderColor: self penColor	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/4/2008 13:31'!drawOn: aCanvas markPointAt: aWorldPoint	self drawOn: aCanvas  markPointAt: aWorldPoint  pixelUnit: 4.		! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/12/2009 16:01'!drawOn: aCanvas markPointAt: aWorldPoint pixelUnit: unit	| center p1 p2 p3 p4|	center := self activeViewport xy2hv: aWorldPoint.	p1 := center + (unit negated@unit negated).	p2 := center + (unit@unit).	p3 := center + (unit@unit negated).	p4 := center + (unit negated@unit).	aCanvas line: p1 to: p2 width: 1 color: self penColor.	aCanvas line: p3 to: p4 width: 1 color: self penColor.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/12/2009 16:01'!drawOn: aCanvas pointAt: aWorldPoint	| np1 |	np1 := self activeViewport xy2hv: aWorldPoint.	aCanvas line: np1 to: np1 width: 1 color: self penColor.	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/14/2009 15:55'!drawOn: aCanvas polyLineVertices: aPointArray	self drawOn: aCanvas polyLineVertices: aPointArray width: 1.		! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 7/14/2009 15:55'!drawOn: aCanvas polyLineVertices: aPointArray width: aWidth	| p1 p2 |	aPointArray ifEmpty: [^self].	(1 to: aPointArray size - 1) do: [:index |		p1 := aPointArray at: index.		p2 := aPointArray at: index + 1.		self drawOn: aCanvas lineFrom: p1 to: p2 width: aWidth .].		! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 11/27/2008 23:43'!drawOn: aCanvas strokeBounds: aBounds	self drawOn:  aCanvas polyLineVertices: (GeometryUtils verticesFromBounds: aBounds).		! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/12/2009 16:00'!drawOn: aCanvas text: aObject at: aWorldPoint	| center |	center := self activeViewport xy2hv: aWorldPoint.	aCanvas drawString: aObject asString at: center font: nil color: self penColor	! !!GdsStructureViewMorph methodsFor: 'drawing-world' stamp: 'kf 5/29/2009 23:13'!pixelPointsOfDiamondPointAt: aWorldPoint pixelUnit: unit	| center p1 p2 p3 p4 points |	center := self activeViewport xy2hv: aWorldPoint.	p1 := center + (0@unit).	p2 := center + (unit@0).	p3 := center + (0@unit negated).	p4 := center + (unit negated@0).	points := { p1 . p2 . p3  . p4  }.	^points	! !!GdsStructureViewMorph methodsFor: 'geometry' stamp: 'kf 11/13/2009 13:22'!extent: aPoint	super extent: aPoint.	self removeCachedCanvas.	self viewport ifNotNil: [self viewport extent: aPoint.]! !!GdsStructureViewMorph methodsFor: 'updating' stamp: 'kf 11/15/2008 00:06'!findNearestElementByPoint: aPoint	^self structure findNearestElementByPoint: aPoint elements: self visibleElements. ! !!GdsStructureViewMorph methodsFor: 'updating' stamp: 'kf 5/16/2009 10:07'!isElementCollection: anObject	^((anObject isKindOf: Collection) and: [anObject notEmpty and: [anObject first isKindOf: GdsElement]])! !!GdsStructureViewMorph methodsFor: 'updating' stamp: 'kf 11/13/2009 13:21'!update: anObject	(anObject == #newLayer)		ifTrue: [self changed: #newLayer].	(anObject == self viewport)		ifTrue: [			self removeCachedCanvas.			^self changed].	(self isElementCollection: anObject)		ifTrue: [			colClipBounds ifNil: [colClipBounds := OrderedCollection new.].			anObject do: [:each | 				self invalidBounds: each dataBounds.				colClipBounds add: each dataBounds].			self removeOffCanvas.			self changed].			^super update: anObject.! !!GdsStructureViewMorph methodsFor: 'event handling' stamp: 'kf 11/13/2009 13:25'!handlesKeyboard: anEvent	self viewport ifNil: [^false].	^true.! !!GdsStructureViewMorph methodsFor: 'event handling' stamp: 'kf 11/13/2009 13:22'!handlesMouseDown: anEvent	self viewport ifNil: [^false].	^self pixelBounds containsPoint: anEvent cursorPoint.! !!GdsStructureViewMorph methodsFor: 'event handling' stamp: 'kf 11/13/2009 13:24'!handlesMouseOver: anEvent	self viewport ifNil: [^false].	^true! !!GdsStructureViewMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 13:51'!mouseEnter: anEvent	anEvent hand newKeyboardFocus: self.! !!GdsStructureViewMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 14:24'!mouseLeave: anEvent	anEvent hand newKeyboardFocus: nil.	! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 15:06'!initialize	super initialize.	self color: Color black.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 11:26'!initializeLayers! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:37'!model: aGdsStructure	self structureWillChange. 	super model: aGdsStructure.	aGdsStructure 		ifNil: [			self structureDidUnbind] 		ifNotNil: [						self structureDidBind].	self structureDidChanged.	self changed.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:48'!release	"self halt."	self submorphsDo: [:each | each release].	self removeAllMorphs.	offCanvas := nil.	viewport := nil.	self dependents do: [:each | 		self removeDependent: each.		each release].	super release.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:22'!releaseViewports	viewport := nil.	portStack := nil.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 19:11'!structureDidBind	viewport := self createViewport.				self model layers addDependent: self.	self portStack add: viewport.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:34'!structureDidChanged	self removeOffCanvas.	self changed.! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:28'!structureDidUnbind	self releaseViewports! !!GdsStructureViewMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:36'!structureWillChange	self model ifNotNil: [self model layers removeDependent: self].! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 11/5/2008 17:19'!invalidBounds: aRectangle	self invalidRect: (self updateBoundsFromWorldRectangle: aRectangle).! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 11/5/2008 11:49'!invalidBoundsForSegment: aLineSegment	self invalidBoundsFromPoint1:  aLineSegment start point2: aLineSegment end. ! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 10/2/2008 22:00'!invalidBoundsFromPoint1: aPoint1 point2: aPoint2	self invalidRect: (self updateBoundsFromPoint1: aPoint1 point2: aPoint2 )! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 5/29/2009 23:23'!invalidMarkDiamondAt: aWorldPoint	| aRectangle |	aRectangle := GeometryUtils 		lookupDataBounds: (			self pixelPointsOfDiamondPointAt:  aWorldPoint pixelUnit: 10).	self invalidRect: aRectangle.! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 11/24/2009 15:29'!updateBoundsFromPoint1: aPoint1 point2: aPoint2	| upBounds p1 p2 left top right bottom |	p1 := self activeViewport xy2hv: aPoint1.	p2 := self activeViewport xy2hv: aPoint2.	left := p1 x min: p2 x.	top := p1 y min: p2 y.	right := p1 x max: p2 x.	bottom := p1 y max: p2 y.	upBounds := Rectangle left: left right: right top: top bottom: bottom.		upBounds := upBounds expandBy: 20.	upBounds := upBounds translateBy: self pixelBounds origin.	^upBounds! !!GdsStructureViewMorph methodsFor: 'damage control' stamp: 'kf 11/5/2008 17:16'!updateBoundsFromWorldRectangle: aRectangle	^self updateBoundsFromPoint1: aRectangle origin point2: aRectangle corner.! !!GdsStructureViewMorph methodsFor: 'private' stamp: 'kf 9/26/2008 23:42'!pixelBounds	^self innerBounds! !!GdsStructureViewMorph methodsFor: 'private' stamp: 'kf 8/16/2009 17:54'!referenceEnabledStructureNames	^ self model referenceEnabledStructureNames! !!GdsStructureViewMorph methodsFor: 'private' stamp: 'kf 11/11/2009 11:49'!removeCachedCanvas	self removeOffCanvas.! !!GdsStructureViewMorph methodsFor: 'private' stamp: 'kf 11/11/2009 11:46'!removeOffCanvas	offCanvas := nil.! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewFit	self viewport ifNil: [^self].	self viewport viewFit! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewMoveDown	self viewport ifNil: [^self].	self viewport viewMove: (0.0@self viewMoveRatio negated).! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewMoveLeft	self viewport ifNil: [^self].	self viewport viewMove: (self viewMoveRatio negated@0.0).! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 11/28/2009 23:04'!viewMoveRatio	^0.2! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewMoveRight	self viewport ifNil: [^self].	self viewport viewMove: (self viewMoveRatio@0.0).! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewMoveUp	self viewport ifNil: [^self].	self viewport viewMove: (0.0@self viewMoveRatio).! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewZoomDouble	self viewport ifNil: [^self].	self viewport zoom: 2.0! !!GdsStructureViewMorph methodsFor: 'viewing navigation' stamp: 'kf 12/4/2009 14:37'!viewZoomHalf	self viewport ifNil: [^self].	self viewport zoom: 0.5! !!GdsStructureViewMorph methodsFor: 'appearance' stamp: 'kf 11/10/2009 17:49'!visiblePenColor	^self color luminance > 0.7		ifTrue: [Color black] ifFalse: [Color lightGray]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsStructureViewMorph class	instanceVariableNames: ''!!GdsStructureViewMorph class methodsFor: 'as yet unclassified' stamp: 'kf 9/23/2008 18:09'!exampleMorphOnly	"GdsStructureMorph exampleMorphOnly"	| window |	window := self new openInWindowLabeled: 'GDSII'.	"why Color to white"	(window submorphOfClass: self) color: Color black.! !GdsStructureViewMorph subclass: #GdsStructureEditorMorph	instanceVariableNames: 'tool feedbackCanvas markerPoints showsElementKey lastSessionsGrid lastPoint previewMap viewingCursorForm'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStructureEditorMorph commentStamp: 'kf 11/19/2009 10:54' prior: 0!A GdsStructureEditorMorph is GDSII structures editor view morph.Instance Variables	feedbackCanvas:	<FormCanvas>	tool:						<GdsNullTool>	lastSessionsGrid	<GdsGrid>	markerPoints 		<Array<Point>>	lastPoint 				<Point>feedbackCanvas	- xxxxxtool	- xxxxx!!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/13/2009 15:43'!allLocationPanes	^{self locationPane . self deltaLocationPane . self referenceLocationPane }! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 12:03'!clearMarker	self setVisible: false forKey:  #mark.		markerPoints := nil.	self showsElementKey: false.	self changed.! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/19/2009 16:02'!color: aColor	super color: aColor.	(self allLocationPanes reject: [:each | each isNil])		do: [:each | self setVisibleBorder: each ].! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/14/2009 19:02'!gridLayer	^(self layerForKey: #grid)! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 12:03'!mark: aPoint	markerPoints ifNil: [markerPoints := OrderedCollection new.].	(markerPoints includes: aPoint)		ifFalse: [			markerPoints add: aPoint].	self setVisible: true forKey:  #mark.	! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 12:03'!markerPoints	markerPoints ifNil: [markerPoints := OrderedCollection new.].	^markerPoints asArray.! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/14/2009 19:04'!mouseLayer	^(self layerForKey: #mouse)! !!GdsStructureEditorMorph methodsFor: 'accessing' stamp: 'kf 11/11/2009 12:05'!showsElementKey: aBoolean	showsElementKey := aBoolean.! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 11/11/2009 12:55'!canGridDraw	^self activeViewport canGridDraw.	! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 11/11/2009 12:55'!canGriddedCursor	^true.! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 2/2/2011 20:36'!holdsElement.	self structure ifNil: [^false].	^self structure currentItem holdsElement.! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 11/11/2009 11:21'!holdsReference	^self holdsElement and: [self structure currentItem elementClass isReference]! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 2/1/2011 22:49'!idNotEmpty	self structure ifNil: [^false].	^self structure idSelection notEmpty.! !!GdsStructureEditorMorph methodsFor: 'testing' stamp: 'kf 11/11/2009 12:05'!showsElementKey	showsElementKey ifNil: [showsElementKey := false].	^showsElementKey! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 2/2/2011 20:39'!ceEnabled	self structure ifNil: [^false].	self currentTool currentItem elementClass ifNil: [^false].	((self currentTool currentItem isReferenceType) and: [self currentTool currentItem structureName isEmpty])		ifTrue: [^false].	^self getElementEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!chooseLayerEnabled	self structure ifNil: [^false].	^self structure currentItem layerEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!choosePathTypeEnabled	self structure ifNil: [^false].	^self structure currentItem pathTypeEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!chooseStructureNameEnabled	self structure ifNil: [ ^ false ].	self referenceEnabledStructureNames ifEmpty: [ ^ false ].	^ self structure currentItem isReferenceType! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 2/2/2011 20:35'!confirmWipeEnabled	self structure ifNil: [^false].	^self structure currentItem wipeEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!everyEnabled	^ true! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 2/2/2011 20:35'!getElementEnabled	self structure ifNil: [^false].	^self structure currentItem getEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!holdsPrimitive	^self holdsElement and: [self holdsReference not].! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!idClearEnabled	^self idNotEmpty! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!idDeleteEnabled	^self idNotEmpty! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 2/2/2011 20:39'!itemDeleteVertexEnabled	self structure ifNil: [^false].	self holdsReference		ifTrue: [^false].	self holdsPrimitive		ifTrue: [^self structure currentItem vertexCount > self structure currentItem editElement class requiredVertexCount].	^self structure currentItem isEmpty not.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!itemMoveEnabled	^self holdsElement.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!itemMovePointEnabled	^self holdsPrimitive.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!itemReverseEnabled	self structure ifNil: [ ^ false ].	^ self structure currentItem itemReverseEnabled! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!itemStretchEnabled	^self holdsPrimitive.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!requestAngleEnabled	self structure ifNil: [^false].	^self structure currentItem isReferenceType.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 2/2/2011 20:36'!requestArrayShapeEnabled	self structure ifNil: [^false].	self structure currentItem ashapeInstalled ifFalse: [^false].	^self structure currentItem elementType = #aref! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!requestGridScaleEnabled	^true! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:48'!requestMagEnabled	self structure ifNil: [^false].	^self structure currentItem isReferenceType.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!requestWidthEnabled	self structure ifNil: [^false].	^self structure currentItem widthEnabled.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:48'!toggleReflectEnabled	self structure ifNil: [^false].	^self structure currentItem isReferenceType.! !!GdsStructureEditorMorph methodsFor: 'testing-enabled' stamp: 'kf 11/11/2009 10:56'!unIdEnabled	^self idNotEmpty! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/4/2009 00:07'!changeCursorToCross	self cursorForm: Cursor crossHair asCursorForm.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/4/2009 00:07'!changeCursorToViewing	self cursorForm: self viewingCursorForm.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 15:26'!createLocationPane	| sm |	sm := self locationPaneClass contents: ''.	self setVisibleBorder: sm.	sm font: GdsToolsBuilder locationCaptionFont.	sm emphasis: ((GdsFeelMorphic borderedSensorDisplay) ifTrue: [0] ifFalse: [1]) .	^sm! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/4/2009 14:45'!createSensorLayer	| m sm |	m := self layerForKey: #mouse.	m model: self.	m clipSubmorphs: true.	m setProperty: #cursorForm toValue: self createViewingCursorForm.		"Realtime"	sm := self createLocationPane. 	m addMorph: sm. 	m setProperty: #locationPane toValue: sm.	"reference point"	sm := self createLocationPane. 	m addMorph: sm. 	m setProperty: #referenceLocationPane toValue: sm.	sm visible: false.		"reference point"	sm := self createLocationPane. 	m addMorph: sm. 	m setProperty: #deltaLocationPane toValue: sm.	sm visible: false.		^m! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/4/2009 00:02'!createViewingCursorForm	^(CursorWithMask derivedFrom:  GdsToolsBuilder createViewingBaseForm ) asCursorForm .	! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:00'!createViewport	| vp |	vp := super createViewport.	lastSessionsGrid ifNotNil: [vp grid: lastSessionsGrid].	^vp! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/3/2009 23:37'!cursorForm	^self mouseLayer valueOfProperty: #cursorForm ifAbsent: [Cursor crossHair asCursorForm.].! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/3/2009 23:37'!cursorForm: aForm	self mouseLayer setProperty: #cursorForm toValue: aForm.	! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/12/2009 11:20'!initialize	super initialize.	self initializeLayers.	self clearMarker.	self borderWidth: 0.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 11:26'!initializeContainerChooserLayer	self initializeLibraryChooserLayer.	self initializeStructureChooserLayer. ! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:24'!initializeContentsLayer	| layer |	layer := self layerForKey: #contents.	layer setDrawOnBlock: [:localCanvas :morph |		(self viewport isNil  or: [self structure isNil ]) 			ifFalse: [self drawContentsOn: localCanvas]]! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:40'!initializeGridLayer	| layer |	layer :=self layerForKey: #grid.	layer setDrawOnBlock: [:localCanvas :morph |		self drawGridOn:  localCanvas layerMorph: morph]! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:23'!initializeIdLayer	| layer |	layer := self layerForKey: #id.	layer setDrawOnBlock: [:localCanvas :morph |		(self viewport isNil  or: [self structure isNil ]) 			ifFalse: [self drawIdFeedbackOn: localCanvas]]! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:25'!initializeItemLayer	| layer |	layer := self layerForKey: #item.	layer setDrawOnBlock: [:localCanvas :morph |		(self viewport isNil  or: [self structure isNil ]) 			ifFalse: [self drawItemFeedbackOn: localCanvas]]! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 11:25'!initializeLayers	self initializeGridLayer.	self initializeIdLayer.	self initializeItemLayer.	self initializeMarkLayer.	self initializeSensorLayer.	self initializeContainerChooserLayer.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 11:27'!initializeLibraryChooserLayer	| layer |	layer :=self layerForKey: #libraryChooser.	layer color: Color darkGray.	self setupChooserLayout: layer.	layer visible: true.	"layer addMorphCentered: RectangleMorph new."! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:23'!initializeMarkLayer	| layer |	layer := self layerForKey: #mark.	layer setDrawOnBlock: [:localCanvas :morph |		(self viewport isNil  or: [self structure isNil ]) 			ifFalse: [				self showsElementKey 					ifTrue: [self drawElementKeysOn: localCanvas].								self drawMarksOn: localCanvas]]! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/13/2009 13:34'!initializeSensorLayer	| m |	m := self createSensorLayer .	m setDrawOnBlock: [:localCanvas :morph |		self sensorDrawOn: localCanvas layerMorph:  morph].	m setStepBlock: [:morph |		self stepSensorLayerMorph: morph].	m stepTime: 180.	! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 11:27'!initializeStructureChooserLayer	| layer |	layer :=self layerForKey: #structureChooser.	layer color: Color lightBlue. 	self setupChooserLayout: layer.	layer visible: false.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 19:05'!locationPane 	^self mouseLayer valueOfProperty: #locationPane ifAbsent: nil ! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 15:25'!locationPaneClass	GdsFeelMorphic borderedSensorDisplay		ifTrue: [^BorderedStringMorph].	^StringMorph! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 19:04'!referenceLocationPane 	^self mouseLayer valueOfProperty: #referenceLocationPane ifAbsent: nil ! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:48'!release	tool := nil.	feedbackCanvas := nil.	lastSessionsGrid := nil.	lastPoint := nil.	previewMap := nil.	super release.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/14/2009 15:28'!setVisibleBorder:  aStringMorph	aStringMorph color: self visibleLocationColor.	(GdsFeelMorphic borderedSensorDisplay)		ifTrue: [				aStringMorph 				borderColor: (					aStringMorph color = Color black 						ifTrue: [Color white] ifFalse:[Color black])].	! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 11/11/2009 13:56'!setupChooserLayout: aMorph	aMorph changeTableLayout.	aMorph minCellSize: 45@20.	aMorph cellSpacing: 20.	aMorph cellInset: 10.	aMorph cellPositioning: #center.	aMorph wrapCentering: #center.	aMorph listCentering: #center.	aMorph listDirection: #leftToRight.	aMorph wrapDirection: #topToBottom.! !!GdsStructureEditorMorph methodsFor: 'initialization' stamp: 'kf 12/4/2009 00:05'!viewingCursorForm	viewingCursorForm ifNil: [viewingCursorForm := self createViewingCursorForm ].	^viewingCursorForm.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!chooseLayer	| number |	number := self privateChooseLayer.	number ifNil:[^self].		self structure currentItem layerNumber: number.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!choosePathType	| number |	number := self privateChoosePathType.	number ifNil:[^self].		self structure currentItem pathtype: number.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!chooseStructureName	| sname number |	sname := self privateChooseStructureName.	sname ifNil:[^self].		self structure currentItem structureName: sname.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!confirmWipe	| reply |	reply := UIManager default confirm: 'Are you sure ?'.	reply ifFalse: [^self].	self structure currentItem wipe.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!exploreItem	self structure currentItem explore.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!itemReverse	self structure currentItem reverseVertices.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!requestAngle	| angleExpr values |	angleExpr := self structure currentItem angle asString.	values :=self privateExpInput: 'Enter Angle in Degrees: ' defaults: angleExpr.	values ifEmpty: [^self].	self structure currentItem angle: values first.	! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 11:02'!requestArrayShape	|  ashapeExpr values |	self structure currentItem ashapeInstalled ifFalse: [^self].	ashapeExpr := self  structure currentItem ashape asRequestString.	values :=self 		privateExpInput: 			'cols rows [colSpacing rowSpacing]' 				expandMacros		defaults: ashapeExpr.	values ifEmpty: [^self].		(#(2 4) includes: values size) ifFalse: [^self].		values size = 2		ifTrue: [			| xStep yStep placeStructure |			placeStructure := self  structure database structureNamed: self  structure currentItem structureName.			xStep := placeStructure dataExtentForElements  width.			yStep := placeStructure dataExtentForElements height.			values := values, {xStep . yStep}].				self  structure currentItem ashape values: values.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!requestEnterText	|reply default|	default := self structure currentItem text.	reply := self privateByteStringInput: 'Enter Text String:' defaults: default.	reply ifEmpty: [^self].	 self structure currentItem text: reply.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/27/2009 15:55'!requestGridDisplayMultiply	|  scaleExpr values |	scaleExpr := self  viewport grid displayMultiply asString.	values :=self 		privateExpInput: 			'display multiply' 				expandMacros		defaults: scaleExpr.	values ifEmpty: [^self].			self  viewport grid displayMultiply: values first.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!requestGridScale	|  scaleExpr values |	scaleExpr := self  viewport grid asRequestString.	values :=self 		privateExpInput: 			'xyScale<n>or<n>xScale yScale<n>or<n>xOffset yOffset xScale yScale' 				expandMacros		defaults: scaleExpr.	values ifEmpty: [^self].			self  viewport grid values: values.! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!requestMag	| magExpr values |	magExpr := self structure currentItem mag asString.	values :=self privateExpInput: 'Enter Magnification: ' defaults: magExpr.	values ifEmpty: [^self].				self structure currentItem mag: values first abs.	! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!requestWidth	| widthExpr values |	widthExpr := self structure currentItem width asString.	values :=self privateExpInput: 'width:' defaults: widthExpr.	values ifEmpty: [^self].				self structure currentItem width: values first abs.	! !!GdsStructureEditorMorph methodsFor: 'command-handler' stamp: 'kf 11/11/2009 10:48'!toggleReflect	self structure currentItem toggleReflect! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!chooseLayerLabel	^self makeLabel: 'LAYER' withValue: self structure currentItem layerNumber.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!choosePathTypeLabel	^self makeLabel: 'PATHTYPE' withValue: self structure currentItem pathtype.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!chooseStructureNameLabel	^self makeLabel: 'SNAME' withValue: self structure currentItem structureName.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!requestAngleLabel	^self makeLabel: 'ANGLE' withValue: self structure currentItem angle.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/12/2009 13:25'!requestArrayShapeLabel	|ashape |	ashape := self structure currentItem ashape.	^self makeLabel: 'ASHAPE' withValue: ('{1}x{2}' format: {ashape columnCount . ashape rowCount}). ! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/27/2009 15:51'!requestGridDisplayMultiplyLabel	^self makeLabel: 'GRID' withValue: self  viewport grid displayMultiply asString .! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/27/2009 14:45'!requestGridScaleLabel	^self makeLabel: 'GSCALE' withValue: self  viewport grid asRequestString .! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!requestMagLabel	^self makeLabel: 'MAG' withValue: self structure currentItem mag.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!requestWidthLabel	^self makeLabel: 'WIDTH' withValue: self structure currentItem width.! !!GdsStructureEditorMorph methodsFor: 'label' stamp: 'kf 11/11/2009 10:58'!toggleReflectLabel	^self 		makeLabel: 'REFL' 		withValue: (self structure currentItem isReflected ifTrue: ['Y'] ifFalse: ['N']).! !!GdsStructureEditorMorph methodsFor: 'tools' stamp: 'kf 11/11/2009 10:52'!clearTool	tool := nil.! !!GdsStructureEditorMorph methodsFor: 'tools' stamp: 'kf 11/11/2009 10:52'!currentTool	tool ifNil: [		self currentToolClass: self defaultToolClass].	^tool.! !!GdsStructureEditorMorph methodsFor: 'tools' stamp: 'kf 11/11/2009 10:53'!currentToolClass: aToolClass	self currentToolClass: aToolClass userInfo: nil.! !!GdsStructureEditorMorph methodsFor: 'tools' stamp: 'kf 12/4/2009 12:04'!currentToolClass: aToolClass userInfo: aObject	tool := aToolClass new setMorph: self.	tool userInfo: aObject.	tool toolDidChange.	tool changeCursor.! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/14/2009 15:20'!colorForElement: aGdsElement	(aGdsElement state = #inItem or: [aGdsElement state = #inId]) 		ifTrue: [^self visiblePickingColor].	^super  colorForElement: aGdsElement		! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 15:21'!drawContentsOn: aCanvas		"Dummy"	! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 21:22'!drawGridOn: aCanvas	| xSteps ySteps |	self activeViewport canGridDraw		ifFalse: [^self].	xSteps := self activeViewport lookupHorizontalGridSteps.	ySteps := self activeViewport lookupVerticalGridSteps.	(xSteps isEmpty and: [ySteps isEmpty])		ifTrue: [^self].	self 		penColor: self gridColor		during: [			ySteps do: [:y |				xSteps do: [:x |					self drawOn: aCanvas pointAt: x@y]]].			! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 10/14/2012 17:01'!drawOffOn: aCanvas		| newFillImage |	super drawOffOn: 	aCanvas.				feedbackCanvas 		ifNotNil: [			newFillImage := ColorForm 				mappingWhiteToTransparentFrom:  feedbackCanvas form   				blackAsColor: self visiblePickingColor . 			aCanvas image: newFillImage form at:  self pixelBounds origin sourceRect: newFillImage form boundingBox rule: Form reverse.].	! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/14/2009 22:33'!drawOn: aCanvas	| drawingBlock |	self viewport ifNil: [^super drawOn: aCanvas].	drawingBlock := [self drawInlineOn: aCanvas].	self profileEnabled		ifTrue: [			Cursor wait 				showWhile: [					(MessageTally  respondsTo: #spyOn:toFileNamed:)						ifTrue: [							MessageTally spyOn: drawingBlock toFileNamed: self profileName]						ifFalse: [							MessageTally spyOn: drawingBlock]].			self profileOff]		ifFalse: [drawingBlock value].! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/13/2009 13:43'!gridColor	^self visibleGridColor.		! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 20:45'!profileEnabled	^self valueOfProperty: #profileEnabled ifAbsent: [false]! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 11:43'!removeFeedbackCanvas	feedbackCanvas := nil.! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/14/2009 19:04'!removeGridCanvas	self gridLayer setProperty: #gridOff toValue: nil. ! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 11:46'!removeOffCanvas	super removeOffCanvas.	feedbackCanvas := nil.! !!GdsStructureEditorMorph methodsFor: 'drawing' stamp: 'kf 11/11/2009 13:58'!toolFeedbackEnabled	^(self currentTool isNil not and: 		[(self structure currentItem holdsElement) or: 		[self structure currentItem vertices isEmpty not] ])! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 13:52'!crossHandCursor	^self canGriddedCursor ifTrue: [Cursor blank] ifFalse: [Cursor crossHair].! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 14:55'!keyStroke: anEvent	GdsFeel ifDebugOn: [ :s | 		s nextPutAll: anEvent asString].	(self viewMoveHandled: anEvent) ifTrue: [^self].	(self viewZoomHandled: anEvent) ifTrue: [^self].		(self viewFitHandled: anEvent) ifTrue: [^self].		! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 13:54'!mouseDown: anEvent	self currentTool mouseDown: anEvent! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/14/2009 19:07'!mouseEnter: anEvent	super mouseEnter: anEvent.	GdsFeel ifDebugOn: [:s | 		s nextPutAll: 'mouseEnter: ' .		s nextPutAll: (anEvent printString)].	self startStepping.	self mouseLayer startStepping.	ActiveHand showTemporaryCursor: self crossHandCursor..! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/14/2009 19:07'!mouseLeave: anEvent	super mouseLeave: anEvent.	ActiveHand showTemporaryCursor: nil.	self mouseLayer stopStepping.	self stopStepping.! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 10/14/2012 16:48'!rubberbandPoint: aPoint 	feedbackCanvas ifNil: 		[ feedbackCanvas := FormCanvas 			extent: self pixelBounds extent			depth: 1 ].	feedbackCanvas fillColor: Color white.	self 		penColor: Color black		during: [			self currentTool 				drawRubberBandOn: feedbackCanvas				currentPoint: aPoint].					lastPoint := aPoint copy! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 10/14/2012 16:25'!step	| wp2 |	self viewport ifNil: [^self].	offCanvas ifNil:[^self].	(self bounds containsPoint: Sensor cursorPoint) 		ifTrue: [			self activeHand keyboardFocus == self				ifFalse: [					self activeHand newKeyboardFocus: self]]. 	self activeHand showTemporaryCursor: self crossHandCursor.	Sensor redButtonPressed ifTrue: [^self].	wp2 := self viewport snapedWorldPointFromGlobal: (Sensor cursorPoint).	lastPoint ifNil: [lastPoint := wp2 copy].	(lastPoint = wp2) ifTrue: [^self].	self currentTool rubberBandEnabled 		ifTrue: [self rubberbandPoint: wp2].! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/11/2009 13:43'!stepTime	"| max |	max := 100000.	viewport ifNil: [^max].	offCanvas ifNil:[^max]."	^200.! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/13/2009 13:25'!viewFitHandled: anEvent	| kc doFit |	kc := anEvent keyCharacter.	doFit := (kc caseOf: {		[ Character home ] -> [ true].	} otherwise: [ nil ]).	doFit ifNil: [^false].	self viewport viewFit.	^true.		! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 10/13/2012 10:50'!viewMoveHandled: anEvent	| kc fractionPoint |	kc := anEvent keyCharacter.	fractionPoint := (kc caseOf: {		[ Character arrowDown ] -> [ 0.0 @ -0.2 ].		[ Character arrowUp ] -> [ 0.0 @ 0.2 ].		[ Character arrowLeft ] -> [ -0.2 @ 0.0 ].		[ Character arrowRight ] -> [ 0.2 @ 0.0 ].	} otherwise: [ nil ]).	fractionPoint ifNil: [^false].	self viewport viewMove: fractionPoint.	^true.! !!GdsStructureEditorMorph methodsFor: 'event handling' stamp: 'kf 11/13/2009 13:27'!viewZoomHandled: anEvent	| kc zoomFactor |	kc := anEvent keyCharacter.	zoomFactor := (kc caseOf: {		[ Character pageDown ] -> [ 0.5 ].		[ Character pageUp ] -> [ 2.0 ].	} otherwise: [ nil ]).	zoomFactor ifNil: [^false].	self viewport zoom: zoomFactor.	^true.		! !!GdsStructureEditorMorph methodsFor: 'defaults' stamp: 'kf 12/4/2009 14:44'!defaultToolClass	^ GdsViewingTool! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/14/2009 19:06'!deltaLocationPane 	^self mouseLayer valueOfProperty: #deltaLocationPane ifAbsent: nil ! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/13/2009 15:19'!hideLocationPane: aMorph	aMorph contents: ''.	aMorph visible: false.! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/13/2009 15:20'!hideRubberbandLocationPanes	{self deltaLocationPane . self referenceLocationPane }		do: [:each | self hideLocationPane: each].! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/13/2009 15:53'!showLocationPane: aMorph at: aWorldPoint 	self showLocationPane: aMorph at: aWorldPoint contents: nil.! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/24/2009 15:28'!showLocationPane: aMorph at: aWorldPoint contents: anObject	| loc  text |	self viewport ifNil: [^self].	text := anObject		ifNil: [aWorldPoint x asString, ' ', aWorldPoint y asString]		ifNotNil: [anObject asString].	aMorph contents: text.	aMorph setProperty: #worldPoint toValue: aWorldPoint copy.	loc := (self activeViewport xy2hv: aWorldPoint) + self bounds origin + (5 asPoint).	aMorph position: loc.	aMorph visible ifFalse: [aMorph visible: true].! !!GdsStructureEditorMorph methodsFor: 'rubberband' stamp: 'kf 11/13/2009 16:35'!stepSensorLayerMorph: aMorph	| oldP p |	self viewport ifNil: [^self].	p := self viewport snapedWorldPointFromGlobal: Sensor cursorPoint.	oldP := aMorph valueOfProperty: #worldPoint ifAbsent: 0@0. 	oldP = p ifTrue: [^self].	aMorph setProperty: #worldPoint toValue: p copy.	self showLocationPane:  self locationPane at: p.	self referenceLocationPane visible		ifTrue: [			self 				showLocationPane:  self referenceLocationPane 				at: (self referenceLocationPane valueOfProperty: #worldPoint).].		aMorph invalidRect: (self updateBoundsFromPoint1: oldP point2: p).! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/27/2009 10:14'!drawElementKeysOn: aLocalCanvas	self 		penColor: self visibleMarkerColor		during: [			self visibleElements do: [:e |				self drawOn: aLocalCanvas text: e keyNumber asString at: e xy]].		! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 21:19'!drawIdFeedbackOn: aLocalCanvas	self 		penColor: self visiblePickingColor		during: [ 				self 				drawOn: aLocalCanvas 				elements: self structure idSelection elements				drawingSelector: #strokeOutlineOn:.					(self currentTool isNil not and: [self structure idSelection notEmpty]) 					ifTrue: [						self currentTool drawFeedbackOn: aLocalCanvas]].		! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 21:25'!drawItemFeedbackOn: aLocalCanvas	self 		penColor: self visiblePickingColor		during: [			self 				drawOn: aLocalCanvas 				elements: self structure currentItem feedbackElements				drawingSelector: #drawItemFeedbackOn:.					self toolFeedbackEnabled 				ifTrue: [					self currentTool drawFeedbackOn: aLocalCanvas].			self drawItemVertexNumbersOn: aLocalCanvas.]	! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemLineSegmentsOn: aLocalCanvas	self drawItemLineSegmentsOn: aLocalCanvas width: 1! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemLineSegmentsOn: aLocalCanvas width: aWidth	| points |	points := (self model currentItem vertices).	points ifEmpty: [^self.].		self drawOn: aLocalCanvas polyLineVertices: points  width: aWidth! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemReferencesOn: aLocalCanvas	(self model currentItem vertices)		ifNotEmpty: [			self model currentItem vertices				do: [:p |					self drawOn: aLocalCanvas markDiamondPointAt: p.]].		! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemVertexNumbersOn: aLocalCanvas	self drawItemVertexNumbersOn: aLocalCanvas zeroBased: false! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemVertexNumbersOn: aLocalCanvas zeroBased: aBoolean	| index points |	index := aBoolean ifTrue: [0] ifFalse: [1].	points := self model currentItem verticesWithoutClosePoint.	(points size >= 2)		ifTrue: [			points				do: [:p |					| indexStr |					indexStr := '({1})' format: {index}.					self drawOn: aLocalCanvas text: indexStr at: p.					index := index + 1]].		! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/11/2009 12:50'!drawItemVerticesOn: aLocalCanvas	(self model currentItem vertices)		ifNotEmpty: [			self drawOn: aLocalCanvas markDiamondPointAt: self model currentItem vertices first.			self model currentItem vertices allButFirst				do: [:p |					self drawOn: aLocalCanvas markPointAt: p]].		! !!GdsStructureEditorMorph methodsFor: 'drawing-feedback' stamp: 'kf 11/27/2009 10:12'!drawMarksOn: aLocalCanvas	self 		penColor: self visibleMarkerColor		during: [			self markerPoints do: [:each |			self 				drawOn: aLocalCanvas				markDiamondPointAt: each ]]! !!GdsStructureEditorMorph methodsFor: 'drawing-pluggable-block' stamp: 'kf 11/13/2009 13:40'!drawGridOn: localCanvas layerMorph: morph 	| gridOff |	self viewport ifNil: [^self].	self viewport canGridDraw ifFalse: [^self].		gridOff :=morph valueOfProperty: #gridOff ifAbsent: nil.	gridOff 		ifNil: [			gridOff := FormCanvas extent: morph extent.			self drawGridOn: gridOff.			morph setProperty:  #gridOff toValue: gridOff].	localCanvas paintImage: gridOff form at: 0@0.! !!GdsStructureEditorMorph methodsFor: 'drawing-pluggable-block' stamp: 'kf 12/3/2009 23:39'!sensorDrawOn: localCanvas layerMorph: morph 	| p hvPoint cursorForm |	self viewport ifNil: [^self].	p := morph valueOfProperty: #worldPoint ifAbsent: 0@0.	hvPoint := self activeViewport xy2hv: p.	cursorForm := self cursorForm.	localCanvas 		paintImage:  cursorForm 		at: hvPoint + (cursorForm offset).		"self locationPane ifNil: [^self]."	"localCanvas 		drawString: self locationPane 		contents  at: (hvPoint + (50@50)) 		font: nil 		color: self visibleGridColor. "					"self penColor: self visiblePenColor during: [			self drawOn: localCanvas markDiamondPointAt: p ]".! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!exportPictureBaseName	self structure ifNil: [^nil].	^self structure name.! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fileOutPicture	self exportPictureBaseName		ifNotNil: [			self fileOutPictureBaseNamed: self exportPictureBaseName]! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fileOutPictureBaseNamed: aBaseName	self fileOutPictureBaseNamed: aBaseName intoFolderPath: GdsFeel pathToSelf.! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fileOutPictureBaseNamed: aBaseName intoFolderPath: path	| fName  |	fName := (FileDirectory on: path) nextNameFor: aBaseName extension: 'png'.	PNGReadWriter putForm: self imageForm onFileNamed: (path, FileDirectory slash , fName).! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fileOutPictureEnabled	^self exportPictureBaseName isNil not! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fileOutPreview	self structure ifNil: [^nil].	(FileDirectory default fileExists: self fullPathForPreview )		ifFalse: [^self privateFileOutPreview.].	(self structure dirty)		ifTrue: [^self privateFileOutPreview.].				"Debug:	(canvas form  magnifyBy: 0.25)  asMorph openInWorld."! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!fullPathForPreview	| folderFd |	folderFd := self structure fileDirectoryForPreview . 	^folderFd fullNameFor: 'preview.png'.	! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!privateFileOutPreview	| folderFd fullName visibleStateMap canvas vp |	folderFd := self structure fileDirectory. 	fullName := self fullPathForPreview.	"save layer state"	visibleStateMap := Dictionary new.	layerMap keys do: [:each |		visibleStateMap at: each put: (self layerForKey: each) visible.].	"hide all layers"	layerMap keys do: [:each |		self setVisible: false forKey: each.].	vp := self createViewport.		vp viewFit.	"self toggleBackgroundColor."	self pushViewport: vp.	self removeOffCanvas.	self changed.	canvas := FormCanvas extent: self bounds extent.	canvas translateBy: self bounds origin negated during: [:localCanvas |		self drawOn: localCanvas].	self popViewport.		"self toggleBackgroundColor."	self removeOffCanvas.	self changed.		(FileDirectory default fileExists: fullName)		ifTrue: [FileDirectory  deleteFilePath: fullName].	PNGReadWriter putForm: canvas form onFileNamed: fullName.		"restore layer state"	layerMap keys do: [:each |		self setVisible: (visibleStateMap at: each) forKey: each ].	"Debug:	(canvas form  magnifyBy: 0.25)  asMorph openInWorld."! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!profileName	^FileDirectory default nextNameFor: 'drawing_profile_'  ,self structure name extension: 'log'.! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!profileOff	self setProperty: #profileEnabled toValue: false.! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 11:32'!profileOn	self setProperty: #profileEnabled toValue: true.! !!GdsStructureEditorMorph methodsFor: 'documentation-support' stamp: 'kf 11/11/2009 20:40'!runProfile	self profileOn.	self removeCachedCanvas.	self changed.	! !!GdsStructureEditorMorph methodsFor: 'utility' stamp: 'kf 11/11/2009 11:18'!makeLabel: aLabel withValue: aValueOrBlock	| optionalLabel |	optionalLabel := aValueOrBlock value asString.	optionalLabel ifEmpty: [^aLabel localizedGdsCaption].	^String streamContents: [:stream |		stream nextPutAll: aLabel localizedGdsCaption.		self structure ifNotNil: [			stream nextPutAll: ' ('.			stream nextPutAll: optionalLabel.			stream nextPutAll: ')']]! !!GdsStructureEditorMorph methodsFor: 'utility' stamp: 'kf 11/12/2009 20:58'!privateByteStringInput: aMessage defaults: aDefault	|  reply  ok |	ok := false.	reply := ''.	[ok]		whileFalse: 			[reply := UIManager default request: aMessage initialAnswer: aDefault.			reply isEmptyOrNil ifTrue: [^''].			ok := reply isByteString].	^reply asByteString.! !!GdsStructureEditorMorph methodsFor: 'utility' stamp: 'kf 11/11/2009 11:18'!privateExpInput: aMessage defaults: aDefault	|  reply separatedItems values |	reply := UIManager default request: aMessage initialAnswer: aDefault.	reply ifEmpty: [^Array new].	separatedItems := reply findTokens: ' '.	separatedItems ifEmpty: [^Array new].	values :=  separatedItems  collect: [:each | Float readFrom: each ].	^values asArray.! !!GdsStructureEditorMorph methodsFor: 'private' stamp: 'kf 11/11/2009 10:53'!privateChooseLayer	| numbers layerLabels chooseIndex |	numbers := GdsCompatibility default layerNumberRange asArray.	layerLabels := numbers collect: [:number | ' ', number asString, ' '].	chooseIndex := UIManager default chooseFrom: layerLabels.	^chooseIndex = 0 		ifTrue: [nil]				ifFalse: [numbers at: chooseIndex].	! !!GdsStructureEditorMorph methodsFor: 'private' stamp: 'kf 11/11/2009 10:53'!privateChoosePathType	| numbers layerLabels chooseIndex |	numbers := #(0 2).	layerLabels := numbers collect: [:number | ' ', number asString, ' '].	chooseIndex := UIManager default chooseFrom: layerLabels.	^chooseIndex = 0 		ifTrue: [nil]				ifFalse: [numbers at: chooseIndex].	! !!GdsStructureEditorMorph methodsFor: 'private' stamp: 'kf 11/11/2009 10:53'!privateChooseStructureName	| snames chooseIndex |	snames := self referenceEnabledStructureNames.	chooseIndex := UIManager default chooseFrom: snames.	^ chooseIndex = 0 		ifTrue: [ nil ]		ifFalse: [ snames at: chooseIndex ]! !!GdsStructureEditorMorph methodsFor: 'private' stamp: 'kf 11/11/2009 11:49'!removeCachedCanvas	super  removeCachedCanvas.	self removeGridCanvas.! !!GdsStructureEditorMorph methodsFor: 'container chooser' stamp: 'kf 11/11/2009 11:38'!setupLibraryChooser: aGdsStation	(self layerForKey: #libraryChooser)		ifNotNilDo: [:chooserMorph |			chooserMorph removeAllMorphs. 			GdsLibrary baseNames				do: [:each | | button|					button := PluggableButtonMorph new label: each font: GdsToolsBuilder  controlCaptionFont .					button model: aGdsStation.					button action: #openLibraryNamed:.					button arguments: (Array with: each).					chooserMorph addMorphBack: button]].	self setVisible: true forKey: #libraryChooser.! !!GdsStructureEditorMorph methodsFor: 'container chooser' stamp: 'kf 11/11/2009 11:38'!setupStructureChooser: aGdsStation	aGdsStation library ifNil: [^self].	previewMap ifNil: [previewMap := Dictionary new.].	(self layerForKey: #structureChooser)		ifNotNilDo: [:chooserMorph |			chooserMorph removeAllMorphs. 			aGdsStation library structureNames				do: [:each | | button cellMorph img struc imagePath |					button := PluggableButtonMorph new label: each font: GdsToolsBuilder  controlCaptionFont .					button model: aGdsStation.					button action: #openStructureNamed:.					button arguments: (Array with: each).					cellMorph := button.					"(previewMap includesKey: each)						ifFalse: [							struc := aGdsStation library structureNamed: each.							imagePath := (struc fileDirectoryFoPreview) fullNameFor: 'preview.png'.							(FileDirectory default fileExists: imagePath)								ifTrue: [ 									img := nil.									[img := ImageReadWriter formFromFileNamed: imagePath] 										on: Error do: [:ex | img := nil].									img ifNotNil: [previewMap at: each put: img]]].					img := previewMap at: each ifAbsent: [nil].					img ifNotNil: [						cellMorph := AlignmentMorph newColumn.						cellMorph addMorphBack: (img magnifyBy: 0.125) asMorph.						cellMorph addMorphBack: button]."							 					chooserMorph addMorphBack: cellMorph]].	self setVisible: true forKey: #structureChooser.! !!GdsStructureEditorMorph methodsFor: 'as yet unclassified' stamp: 'kf 11/14/2009 19:11'!structureDidBind	viewport := self createViewport.				lastSessionsGrid ifNotNil: [viewport grid: lastSessionsGrid].	viewport grid addDependent: self.	self model layers addDependent: self.	self portStack add: viewport.								self startStepping.	self mouseLayer startStepping.	self setVisible: false forKey: #libraryChooser.	self setVisible: false forKey: #structureChooser.! !!GdsStructureEditorMorph methodsFor: 'as yet unclassified' stamp: 'kf 11/14/2009 18:45'!structureDidChanged	super structureDidChanged.	self clearTool.	self clearMarker.	self changed: #fileOutPictureEnabled.! !!GdsStructureEditorMorph methodsFor: 'as yet unclassified' stamp: 'kf 11/19/2009 15:56'!structureDidUnbind	self viewport 		ifNotNil: [			lastSessionsGrid := self viewport grid copy.			lastSessionsGrid removeDependent: self.].		self releaseViewports.	self stopStepping.	self mouseLayer stopStepping.	self setupStructureChooser: (self ownerThatIsA: GdsStationUI) model.	self setVisible: true forKey: #structureChooser! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/14/2009 19:03'!toggleBackgroundColor	self color: (self visiblePenColor = Color black		ifTrue:[Color black]		ifFalse:[Color white]).	self gridLayer invalidRect: self gridLayer bounds.! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/11/2009 13:57'!toggleBackgroundColorEnabled	^true! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/14/2009 15:20'!visibleGridColor	^self color luminance > 0.7		ifTrue: [Color black] ifFalse: [Color white]! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/19/2009 16:03'!visibleLocationColor	|test |	test := self color luminance < 0.7.	(GdsFeelMorphic borderedSensorDisplay)		ifTrue: [test := test not].	^test ifTrue: [Color white] ifFalse: [Color black]! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/27/2009 10:12'!visibleMarkerColor	^self visibleGridColor! !!GdsStructureEditorMorph methodsFor: 'appearance' stamp: 'kf 11/14/2009 15:21'!visiblePickingColor	^self color luminance > 0.7		ifTrue: [Color darkGray ] ifFalse: [Color white]! !!GdsStructureEditorMorph methodsFor: 'updating' stamp: 'kf 12/8/2009 16:23'!update: anObject	GdsFeel ifDebugOn: [:s |		s nextPutAll:  self class printString.		s nextPutAll: ' recieve: '.		s nextPutAll: anObject printString.].	(#(gridScale gridOffset gridDisplayMultiply) includes: anObject)		ifTrue: [			self removeGridCanvas.			self changed: #requestGridScaleLabel.			self changed: #requestGridDisplayMultiplyLabel.			self changed].	(anObject == #put)		ifTrue: [			self currentTool				ifNotNil: [					self currentTool autoFinishAfterPut 						ifTrue: [							self clearTool.							self hideRubberbandLocationPanes]]].	({ #geometry . #color . #idDelete . #layerState . #kindState} includes: anObject)		ifTrue: [			(anObject = #geometry) ifTrue: [self owner model changed: #relabel].			self removeOffCanvas.			^self changed].	(anObject = #dirty)		ifTrue: [self owner model changed: #relabel].	^super update: anObject.! !SystemWindow subclass: #GdsStationUI	instanceVariableNames: 'structureMorph station floatingWindowMap'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStationUI commentStamp: 'kf 11/14/2008 20:17' prior: 0!A GdsStationUI is xxxxxxxxx.Instance Variables	libraryToolsPane:		<Morph>	station:		<GdsStation>	structureMorph:		<GdsStructureMorph>	structureToolsPane:		<Morph>libraryToolsPane	- xxxxxstation	- xxxxxstructureMorph	- xxxxxstructureToolsPane	- xxxxx!!GdsStationUI methodsFor: 'top window' stamp: 'kf 11/25/2008 11:53'!activate	super activate.	self flotingToolsToFront.	self fixFloatingToolsLocations.	self model changed: #ostructEnabled.! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 11/21/2008 20:57'!comeToFront	super comeToFront.	self flotingToolsToFront.! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 11/25/2008 11:53'!fixFloatingToolsLocations	| flaotings |	flaotings := self floatingToolMorphs .	flaotings ifNotNil: [flaotings do: [:each | each position:  each position ]].	! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 11/25/2008 11:20'!floatingToolMorphs	| windows |	windows := self floatingToolMorphsOfOwner: self world .	windows ifEmpty: [		windows := self floatingToolMorphsOfOwner: self].	^windows.! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 11/25/2008 11:35'!floatingToolMorphsOfOwner: aMorph	^aMorph submorphs select: [:m | (GdsToolsBuilder gdsWindowClass: m) = #floating  ].! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 10/9/2009 14:26'!flotingToolsToFront	(self floatingToolMorphs) 		ifNotNilDo: [:flaotings |			flaotings do: [:each | 				each visible: each contentRegion submorphCount > 0. 				each comeToFront ]].! !!GdsStationUI methodsFor: 'top window' stamp: 'kf 10/9/2009 14:23'!passivate	| flaotings |	flaotings := self floatingToolMorphs .	flaotings 		ifNotNil: [			flaotings do: [:each |				each setProperty: #gdsVisibleState toValue: each visible. 				each visible: false.]].	super passivate.! !!GdsStationUI methodsFor: 'updating' stamp: 'kf 6/8/2009 16:52'!activateTool: toolsPane activate: aBoolean	aBoolean 		ifFalse: [			toolsPane removeButtons]		ifTrue: [			toolsPane fillButtons].	toolsPane visible: aBoolean.! !!GdsStationUI methodsFor: 'updating' stamp: 'kf 11/13/2009 21:16'!changeStructure	structureMorph model: station structure.	station structure 		ifNotNil: 			[structureMorph viewport viewFit.].	((self structureContextToolKeys 		collect: [:key | self floatingWindowNamed: key ])		reject: [:each | each isNil])		do: [:each |  self activateTool: each activate: station structure isNil not].	self changed! !!GdsStationUI methodsFor: 'updating' stamp: 'kf 12/8/2009 16:04'!structureContextToolKeys	^{ 'id' . 'item' . 'goodies' . 'layers' .  'kinds' . 'digitize' .  'viewing'} ! !!GdsStationUI methodsFor: 'updating' stamp: 'kf 11/13/2009 21:18'!update: aParameter 	GdsFeel ifDebugOn: [:s |		s nextPutAll:  self class printString.		s nextPutAll: ' recieve: '.		s nextPutAll: aParameter printString.].	aParameter = #structure		ifTrue: [self changeStructure].	aParameter = #newLayer		ifTrue: [			(self floatingWindowNamed: 'layers')				ifNotNilDo: [:layersTools |					layersTools fillButtons]].	aParameter = #elementType		ifTrue: [			(self floatingWindowNamed: 'digitize')				ifNotNilDo: [:tools |					tools visible: (station structure currentItem isPrimitiveType )]].	super update: aParameter.	! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 12/8/2009 16:03'!buildTools	GdsFeelMorphic goodiesEnabled		ifTrue: [			(self newFloatingWindowNamed: 'goodies')				fillSelector: #fillGoodiesTools].				((self newFloatingWindowNamed: 'library')		fillSelector: #fillLibraryContextTools) 		contentRegion fillLibraryContextTools.	(self newFloatingWindowNamed: 'item')			fillSelector: #filltemContextTools.			(self newFloatingWindowNamed: 'id')		fillSelector: #fillIdContextTools.			(self newFloatingWindowNamed: 'layers')		fillSelector: #fillLayers.	(self newFloatingWindowNamed: 'kinds')		fillSelector: #fillKinds.	(self newFloatingWindowNamed: 'digitize')		fillSelector: #fillDigitizingTools.	(self newFloatingWindowNamed: 'viewing')		fillSelector: #fillViewingTools.! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/22/2009 15:47'!createContentsMorph	| contentsMorph statusBarMorph |	contentsMorph := RectangleMorph new.	contentsMorph color: structureMorph color copy.	contentsMorph changeTableLayout.	structureMorph hResizing: #spaceFill.	structureMorph vResizing: #spaceFill.	contentsMorph addMorphBack: structureMorph. 	statusBarMorph := self createStatusBarMorph .	contentsMorph addMorphBack: statusBarMorph. 	^contentsMorph	! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/22/2009 16:03'!createStatusBarMorph	| statusBarMorph aButton viewingPane |	statusBarMorph := RectangleMorph new.	statusBarMorph color: Color lightGray lighter.	statusBarMorph borderWidth: 2.	statusBarMorph borderRaised.		statusBarMorph hResizing: #spaceFill.	statusBarMorph vResizing: #rigid.	viewingPane := AlignmentMorph newRow.	aButton := IconicButton new target: structureMorph;		borderWidth: 0;		labelGraphic: (GdsToolsBuilder createZoomHalfForm);		color: Color transparent; 		actWhen: #buttonUp;		actionSelector: #viewZoomHalf;		yourself.	aButton setBalloonText: 'Click here to zoom view 0.5'.	viewingPane addMorphBack: aButton.		aButton := IconicButton new target: structureMorph;		borderWidth: 0;		labelGraphic: (GdsToolsBuilder createZoomFitForm);		color: Color transparent; 		actWhen: #buttonUp;		actionSelector: #viewFit;		yourself.	aButton setBalloonText: 'Click here to fitting view'.	viewingPane addMorphBack: aButton.	aButton := IconicButton new target: structureMorph;		borderWidth: 0;		labelGraphic: (GdsToolsBuilder createZoomDoubleForm);		color: Color transparent; 		actWhen: #buttonUp;		actionSelector: #viewZoomDouble;		yourself.	aButton setBalloonText: 'Click here to zoom view double'.	viewingPane addMorphBack: aButton.		statusBarMorph addMorphBack: viewingPane.	statusBarMorph height: (aButton height + statusBarMorph borderWidth) .	^statusBarMorph	! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/25/2008 11:16'!floatingWindowNamed: aString	^floatingWindowMap at: aString ifAbsent: [nil].! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/25/2008 11:15'!newFloatingWindowNamed: aString	| floatingWinow |	floatingWinow := GdsToolsMorph newFloatingWindowNamed: aString.	floatingWinow contentRegion: (self newToolsGroupPane).	floatingWindowMap at: aString put: floatingWinow.	^floatingWinow! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/12/2008 21:26'!newToolsGroupPane	^ self newToolsGroupPaneForKey: nil.! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/12/2008 21:25'!newToolsGroupPaneForKey: aSymbol	| groupPane |	groupPane := GdsStationUIToolsMorph fromStationUI: self.	aSymbol ifNotNil: [groupPane groupKey: aSymbol].	^ groupPane! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/22/2009 15:44'!openInSystemWindow: aToolMenuBlock 	| backupColor  contentsMorph |	structureMorph := GdsFeelMorphic structureScreenClass new.	structureMorph addDependent: self.	self model: station.	structureMorph setupLibraryChooser:  station.	backupColor := structureMorph color.		self usingStatusBar 		ifTrue: [			contentsMorph := self createContentsMorph.			contentsMorph color: backupColor]		ifFalse: [			contentsMorph := structureMorph].		self 		addMorph: contentsMorph		frame: (0@ 0 corner: 1 @ 1).	self buildTools.	aToolMenuBlock value.			structureMorph color: backupColor.	self usingStatusBar 		ifTrue: [				contentsMorph  color: Color green].	self model changed: #relabel.	self openInWorld.	self restoreWindowBounds.	structureMorph borderWidth: 0.	(floatingWindowMap values		reject: [:each | each isNil]) do: [:each | each openInWorld].	self structureContextToolKeys 		do: [:key |			(self floatingWindowNamed: key) 				ifNotNilDo: [:obj | obj visible: false]].	self restoreFloatingWindowPosition.	! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 6/15/2009 17:41'!openStationContextInSystemWindow	"GdsStationUI new openStationContextInSystemWindow"	self openInSystemWindow: [self model openDefault]! !!GdsStationUI methodsFor: 'building-ui' stamp: 'kf 11/26/2009 10:06'!usingStatusBar	^GdsFeelMorphic usingStatusBar! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 10/28/2009 14:47'!confirmClose	floatingWindowMap at: 'library' ifAbsent:  [^self].	(floatingWindowMap at: 'library') ifNil: [^self].	model library ifNil: [^self].	model structure 		ifNotNil: [			model structure closeEnabled				ifFalse: [^self error: 'LIBRARY NOT CLOSABLE. ANY DATA GOTTEN']].	(floatingWindowMap at: 'library') contentRegion closelib.! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 11/1/2009 16:15'!delete	[self confirmClose] on: Error do: [:ex | ^self inform: ex messageText].	self saveWindowBounds.	self saveFloatingWindowPosition.	self deleteToolsPane.	ActiveHand showTemporaryCursor: nil.	super delete.! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 11/19/2009 15:15'!deleteToolsPane	floatingWindowMap keysDo: [:key |		(floatingWindowMap at: key)			ifNotNilDo: [:win | win delete].		 (floatingWindowMap at: key put: nil)]! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 11/25/2008 11:14'!initialize	super initialize.	station := GdsStation new.	floatingWindowMap := Dictionary new.! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 2/1/2011 22:44'!release	station release.	station := nil.	floatingWindowMap := nil.	self submorphsDo: [:each | each release].	structureMorph		ifNotNil: [			structureMorph removeDependent: self.			structureMorph release.			structureMorph := nil].	super release.! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 10/13/2012 21:01'!restoreFloatingWindowPosition	self floatingToolMorphs do: 		[ :m | 		| offset name |		name := m externalName.		offset := GdsFeelMorphic typedMap 			pointFor: ('floating.' , name)			default: 0 @ 0.		m position: self position + offset ]! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 11/2/2009 11:55'!restoreWindowBounds	| pos ext templateBounds |	pos := GdsFeelMorphic typedMap		pointFor: 'window.position' 		default: 0 @ 0.	ext := GdsFeelMorphic  typedMap		pointFor: 'window.extent' 		default: 512@342.	templateBounds := self lookupFullScreenBounds.	self position: (templateBounds origin max: pos).	self extent: (templateBounds extent min: ext).! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 10/13/2012 21:01'!saveFloatingWindowPosition	self floatingToolMorphs do: 		[ :m | 		| offset name |		name := m externalName.		offset := m position - self position.		GdsFeelMorphic typedMap 			pointFor: ('floating.' , name)			value: offset ]! !!GdsStationUI methodsFor: 'initialization' stamp: 'kf 11/2/2009 11:54'!saveWindowBounds	GdsFeelMorphic typedMap		pointFor: 'window.position'		value: self position.	GdsFeelMorphic  typedMap		pointFor: 'window.extent'		value: self extent.		! !!GdsStationUI methodsFor: 'testing' stamp: 'kf 11/29/2009 23:17'!dragWithTools	^ GdsFeelMorphic dragWithTools! !!GdsStationUI methodsFor: 'menu' stamp: 'kf 6/5/2009 10:50'!fullScreen	self bounds: self lookupFullScreenBounds.! !!GdsStationUI methodsFor: 'menu' stamp: 'kf 10/13/2012 11:18'!lookupFullScreenBounds	"@see SystemWindow fullScreen"	| left right possibleBounds clazzFlaps clazzProject|	left := right := 0.	self paneMorphs		do: [:pane | ((pane isKindOf: ScrollPane)					and: [pane retractableScrollBar])				ifTrue: [pane scrollBarOnLeft						ifTrue: [left := left max: pane scrollBarThickness]						ifFalse: [right := right max: pane scrollBarThickness]]].	possibleBounds := (RealEstateAgent maximumUsableAreaInWorld: self world)				insetBy: (left @ 0 corner: right @ 0).	"Fix: Pharo 1.4"				clazzFlaps := Smalltalk at: #Flaps ifAbsent: [nil].	clazzProject := Smalltalk at: #Project ifAbsent: [nil].	(clazzFlaps notNil and: [clazzProject notNil])		ifTrue: [			((clazzFlaps sharedFlapsAllowed				and: [clazzProject current flapsSuppressed not])				or: [Preferences fullScreenLeavesDeskMargins])					ifTrue: [possibleBounds := possibleBounds insetBy: 22].].	^possibleBounds! !!GdsStationUI methodsFor: 'events' stamp: 'kf 11/29/2009 23:17'!mouseMove: evt 	self dragWithTools ifFalse: [ ^ super mouseMove: evt ].	self tempOwnFloatings.	super mouseMove: evt.	self floatingToolMorphs do: [ :each | self world addMorph: each ].	self fixFloatingToolsLocations! !!GdsStationUI methodsFor: 'events' stamp: 'kf 11/25/2008 10:45'!tempOwnFloatings	| col |	col := self floatingToolMorphs.	col ifNotEmpty: [		col do: [:each | self addMorph: each ]].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsStationUI class	instanceVariableNames: ''!!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 6/17/2009 22:44'!checkForBetaFolder	GdsTransientBetaLibrary hasBetaFolder		ifTrue: [^self error: 'Needs Upgrade'].	! !!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 11/5/2008 09:40'!noGarbageTargetInstances	^self allInstances reject: [:m | m owner isNil].! !!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 11/4/2009 11:15'!open	GdsFeelMorphic loadLocalizeEnvirons.	[self checkForBetaFolder] on: Error do: [:ex | ^self inform: 'GdsLibrary upgrade. first']. 	self openWithInform: true.	! !!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 11/4/2009 11:15'!openWithInform: aBoolean	"GdsStationUI open"	| stationUI |	Smalltalk garbageCollect.	stationUI  := nil.	self noGarbageTargetInstances 		ifNotEmpty: [			stationUI := self noGarbageTargetInstances first].		stationUI ifNotNil:[				aBoolean 			ifTrue: [				UIManager default inform: 'GdsStaionUI already opend'].		stationUI openInWorld.		stationUI comeToFront.		stationUI isCollapsed ifTrue: [stationUI expand]. 		^self.].	self privateOpen.! !!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 5/21/2009 17:54'!privateOpen	self new openStationContextInSystemWindow! !!GdsStationUI class methodsFor: 'as yet unclassified' stamp: 'kf 6/17/2009 22:42'!warningForBetaFolder	GdsTransientBetaLibrary hasBetaFolder		ifTrue: [].	! !MorphicModel subclass: #GdsStateMorph	instanceVariableNames: 'labelMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:09'!addLabelMorph	| cellSize |	cellSize := 16.	labelMorph := StringMorph new		contents: '--';		extent: cellSize asPoint.	GdsToolsBuilder changeControlCaptionFont: labelMorph.	self addMorphBack: labelMorph.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:08'!addStateCheckBoxes	| outerMorph button |	outerMorph := self newOuterMorph.	button := self visibleCheckbox.	outerMorph addMorphBack: button.		self usingSelectable		ifTrue: [			button := self selectableCheckbox.			outerMorph addMorphBack: button].		self addMorphBack: outerMorph! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:11'!bold: aBoolean	labelMorph emphasis:  (aBoolean ifTrue: [1] ifFalse: [0])! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:06'!initialize	super initialize.	self changeTableLayout.	self listDirection: #leftToRight.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.		self borderWidth: 1.		self color: Color white.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:59'!labelString	^model asString.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:07'!newOuterMorph	| outerMorph |	outerMorph := AlignmentMorph newRow.	outerMorph hResizing: #shrinkWrap.	outerMorph vResizing: #shrinkWrap.		outerMorph color: Color white.	^outerMorph! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:15'!newSelectableCheckbox	^self theme 		newCheckboxIn: self 		for: self 		getSelected: #selectableValue 		setSelected: #selectableValue: 		getEnabled: nil 		label: ''		help: nil! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:02'!newVisibleCheckbox	^self theme 		newCheckboxIn: self 		for: self 		getSelected: #visibleValue 		setSelected: #visibleValue: 		getEnabled: nil 		label: ''		help: nil! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:15'!oldSelectableCheckbox	| button |	button := UpdatingThreePhaseButtonMorph checkBox.	button 		target: self;		actionSelector: #toggleSelectableValue;		getSelector: #selectableValue.	^button.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:02'!oldVisibleCheckbox	| button |	button := UpdatingThreePhaseButtonMorph checkBox.	button 		target: self;		actionSelector: #toggleVisibleValue;		getSelector: #visibleValue.	^button.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:15'!selectableCheckbox	^(Smalltalk includesKey: #CheckboxMorph )		ifTrue: [self newSelectableCheckbox]		ifFalse: [self oldSelectableCheckbox]		! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:47'!selectableValue	model ifNil: [^false].	^model isSelectable.	! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:47'!selectableValue: aBoolean	model ifNil: [^self].	model setSelectable: aBoolean.	self changed: self updateSelector.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/9/2009 14:29'!toggleSelectableValue	model ifNil: [^self].	model setSelectable: model isSelectable not.	self changed: self updateSelector.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/9/2009 14:29'!toggleVisibleValue	model ifNil: [^self].	model setVisible: model isVisible not.	self changed: self updateSelector.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:53'!update	model ifNil: [ ^ self ].	labelMorph contents: self labelString.	self changed: #visibleValue.	self changed: #selectableValue! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:47'!updateSelector	^self subclassResponsibility.! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:06'!usingSelectable	^false! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 14:03'!visibleCheckbox	^(Smalltalk includesKey: #CheckboxMorph )		ifTrue: [self newVisibleCheckbox]		ifFalse: [self oldVisibleCheckbox]		! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:47'!visibleValue	model ifNil: [^false].	^model isVisible.	! !!GdsStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:47'!visibleValue: aBoolean	model ifNil: [^self].	model setVisible: aBoolean.	self changed: self updateSelector.! !!GdsStateMorph methodsFor: 'accessing' stamp: 'kf 12/8/2009 15:40'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ Color black! !GdsStateMorph subclass: #GdsKindStateMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsKindStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:10'!initialize	super initialize.	self addLabelMorph.	self addStateCheckBoxes.! !!GdsKindStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 16:15'!kind: aGdsKind	super model: aGdsKind.	labelMorph setBalloonText: aGdsKind longDescription.	self update.! !!GdsKindStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 16:05'!labelString	^(model key asString)padded: #left to: 3  with: Character space.		! !!GdsKindStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:45'!updateSelector	^#kindState.! !GdsStateMorph subclass: #GdsLayerStateMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 10/29/2009 10:48'!colorSwatch	^UpdatingRectangleMorph new		target: self ;		getSelector: #colorValue;		putSelector: #colorValue:;		extent: 16@16;		setBalloonText: 'click here to change the color' translated;		yourself.! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:51'!colorValue	model ifNil: [^self missingColor].	^model color! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 21:10'!initialize	super initialize.	self addLabelMorph.	self addStateCheckBoxes.	self addMorphBack: self  colorSwatch .		! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:54'!labelString	^(model layerNumber asString )padded: #left to: 3  with: Character space.			! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:54'!layer: aGdsLayer	super model: aGdsLayer.	self update.! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 11/12/2009 10:16'!missingColor	^Color lightGray.! !!GdsLayerStateMorph methodsFor: 'as yet unclassified' stamp: 'kf 12/8/2009 15:46'!updateSelector	^#layerState.! !!GdsLayerStateMorph methodsFor: 'accessing' stamp: 'kf 12/8/2009 15:58'!colorValue: aColor	| newColor |	model ifNil: [^self].	model color = aColor ifTrue: [^self].	newColor := self perfectWhiteAllowed 		ifTrue: [aColor] ifFalse: [aColor = Color white ifTrue: [self missingColor ] ifFalse: [aColor]].	model color: newColor.	self changed: self updateSelector.		! !!GdsLayerStateMorph methodsFor: 'testing' stamp: 'kf 11/12/2009 10:16'!perfectWhiteAllowed	^false! !GdsToolsMorph subclass: #GdsHcFillPatMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!!GdsHcFillPatMorph commentStamp: 'kf 5/9/2009 13:27' prior: 0!A GdsHcFillPatMorph is HyperCard's Pattern chooser window.!!GdsHcFillPatMorph methodsFor: 'accessing' stamp: 'kf 11/25/2008 22:47'!cellExtent	^17@12.! !!GdsHcFillPatMorph methodsFor: 'accessing' stamp: 'kf 11/26/2008 13:39'!fixedExtent	^((self cellExtent x  + 1)* 4)@((self cellExtent y + 1)* 10)	 + (self borderWidth@self borderWidth).	! !!GdsHcFillPatMorph methodsFor: 'geometry' stamp: 'kf 11/26/2008 11:57'!extent	^self fixedExtent	! !!GdsHcFillPatMorph methodsFor: 'geometry' stamp: 'kf 11/25/2008 22:23'!extent: aPoint	super extent: self fixedExtent.	! !!GdsHcFillPatMorph methodsFor: 'initialization' stamp: 'kf 11/26/2008 11:56'!initialize	super initialize.	self changeTableLayout.	self wrapDirection: #leftToRight.	self borderColor: Color black.	self initializePatterns.	self borderWidth: 1.	self extent: self fixedExtent.	self cellInset: 1@1.	self color: Color black.	! !!GdsHcFillPatMorph methodsFor: 'initialization' stamp: 'kf 11/26/2008 11:56'!initializePatterns	| hcPatIndex |	hcPatIndex := 0.	QDPattern hcFillStyles do: [:fill |		| m |		hcPatIndex := hcPatIndex + 1.		m :=RectangleMorph new color: fill.		m setNameTo: hcPatIndex asString.		m borderWidth: 0.		m extent: self cellExtent.		self addMorphBack: m.].	! !Object subclass: #GdsToolsBuilder	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsToolsBuilder class	instanceVariableNames: ''!!GdsToolsBuilder class methodsFor: 'instance creation' stamp: 'kf 11/12/2008 15:12'!buttonNamed: aName		^self extendedButtonNamed: aName.	! !!GdsToolsBuilder class methodsFor: 'instance creation' stamp: 'kf 11/14/2009 20:48'!extendedButtonNamed: aName	| button |	button := GdsToolButtonMorph new label: aName.	button color: Color white.	button onColor: Color lightGray offColor: Color white.	button hResizing: #spaceFill.	^button! !!GdsToolsBuilder class methodsFor: 'utility' stamp: 'kf 11/2/2009 10:09'!changeControlCaptionFont: aStringMorph	| font |	font := self controlCaptionFont.	font 		ifNotNil:[			aStringMorph font: font].	! !!GdsToolsBuilder class methodsFor: 'utility' stamp: 'kf 11/2/2009 09:27'!changeToolsFontInside: aMorph	(self stringMorphsOf: aMorph) do: [:each | self changeControlCaptionFont: each]. 	! !!GdsToolsBuilder class methodsFor: 'utility' stamp: 'kf 11/12/2008 15:27'!changeToolsGroup: aGroupPane	aGroupPane changeTableLayout.	aGroupPane color: Color white.	aGroupPane borderWidth: 1.	aGroupPane borderColor: Color lightGray.	aGroupPane hResizing: #spaceFill.	aGroupPane vResizing: #shrinkWrap.! !!GdsToolsBuilder class methodsFor: 'utility' stamp: 'kf 11/21/2008 17:51'!gdsFamilyMorphs	"GdsToolsBuilder gdsFamilyMorphs"	^ActiveWorld submorphs select: [:m |		m owner class = PasteUpMorph and: 			[m class name asString beginsWith: 'Gds']]. ! !!GdsToolsBuilder class methodsFor: 'utility' stamp: 'kf 11/12/2008 15:04'!stringMorphsOf: aMorph	^aMorph allMorphs select: [:each | each isKindOf: StringMorph].! !!GdsToolsBuilder class methodsFor: 'deprecated' stamp: 'kf 11/12/2008 21:07'!changeSmallFont: aStringMorph	| font |	(aStringMorph font name beginsWith: self smallUIFontName) ifTrue: [^self].	font := self favoritFont.	font 		ifNotNil:[			aStringMorph font: font].	! !!GdsToolsBuilder class methodsFor: 'deprecated' stamp: 'kf 11/12/2008 21:05'!favoritFont	| textStyle |	textStyle := TextStyle named: self smallUIFontName .	textStyle ifNil: [textStyle := TextStyle default].	^textStyle fontOfPointSize: 9.! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:50'!controlCaptionFont	| textStyle |	textStyle := TextStyle named: GdsFeelMorphic controlCaptionFontName  .	textStyle ifNil: [textStyle := TextStyle default].	^textStyle fontOfPointSize: GdsFeelMorphic controlCaptionFontSize.! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:50'!controlCaptionFontName	^[GdsFeelMorphic controlCaptionFontName] ifError: [:error :receiver | self smallUIFontName].! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/2/2009 10:19'!controlCaptionFontSize	^[GdsFeel controlCaptionFontSize] ifError: [:error :receiver | 9].! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/25/2008 11:22'!gdsWindowClass: aMorph	^aMorph valueOfProperty: #gdsWindowClass ifAbsent: [#none].! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/25/2008 14:47'!hcFillPatIndexMatrix	^{ {20 . }}! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/13/2009 17:14'!locationCaptionFont	| textStyle |	textStyle := TextStyle named: self smallUIFontName.	textStyle ifNil: [textStyle := TextStyle default].	^textStyle fontOfPointSize: (Display height <= 600 ifTrue: [9] ifFalse: [12]).! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 11/12/2008 21:04'!smallUIFontName	^'Accumon'.! !!GdsToolsBuilder class methodsFor: 'accessing' stamp: 'kf 5/13/2009 09:23'!toolWindowGripFill	^(BitmapFillStyle fromForm: (QDPattern formAt: 24)).	! !!GdsToolsBuilder class methodsFor: 'form factory' stamp: 'kf 10/13/2012 21:10'!createViewingBaseForm	"self createViewingBaseForm display"	^  (Form	extent: 16 @ 16	depth: 1	fromArray: #(		16rE000000		16r31800000		16r40400000		16r40400000		16r80200000		16r80200000		16r80200000		16r40600000		16r40400000		16r31E00000		16rF700000		16r380000		16r1C0000		16rE0000		16r70000		16r30000)	offset: -5 @ -5)! !!GdsToolsBuilder class methodsFor: 'form factory' stamp: 'kf 11/22/2009 15:34'!createZoomDoubleForm	"self createZoomDoubleForm display"	^Form	extent: 16@16	depth: 1	fromArray: #(		16r0		16r0		16r0		16r0		16r0		16r80000		16r1C0000		16r3E0000		16r7E0000		16r20FE0000		16r71FE0000		16r7BFE0000		16r7FFE0000		16r7FFE0000		16r0		16r0)	offset: 0@0! !!GdsToolsBuilder class methodsFor: 'form factory' stamp: 'kf 11/22/2009 15:33'!createZoomFitForm	"self createZoomFitForm display"	^ Form	extent: 16@16	depth: 1	fromArray: #(		16rF00F0000		16rC0030000		16rA0050000		16r90090000		16r8100000		16r0		16r0		16r0		16r0		16r0		16r0		16r8100000		16r90090000		16rA0050000		16rC0030000		16rF00F0000)	offset: 0@0! !!GdsToolsBuilder class methodsFor: 'form factory' stamp: 'kf 11/22/2009 15:33'!createZoomHalfForm	"self createZoomHalfForm display"	^ Form	extent: 16@16	depth: 1	fromArray: #(		16r0		16r0		16r0		16r0		16r0		16r0		16r0		16r0		16r800000		16r1C00000		16rBE00000		16r1FF00000		16r0		16r0		16r0		16r0)	offset: 0@0! !Object subclass: #GdsFeelMorphic	instanceVariableNames: ''	classVariableNames: 'LocalizeMap TypedMap'	poolDictionaries: ''	category: 'GdsFeel-Morphic-UI'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsFeelMorphic class	instanceVariableNames: ''!!GdsFeelMorphic class methodsFor: 'as yet unclassified' stamp: 'kf 11/19/2009 10:52'!structureScreenClass	^ GdsStructureEditorMorph! !!GdsFeelMorphic class methodsFor: 'as yet unclassified' stamp: 'kf 11/2/2009 13:20'!typedMap	TypedMap ifNil: [ TypedMap := TypedConfigulation new ].	^ TypedMap! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/14/2009 15:16'!borderedSensorDisplay 	^self typedMap booleanFor: #borderedSensorDisplay default: false.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/14/2009 15:25'!borderedSensorDisplay: aBoolean 	^self typedMap booleanFor: #borderedSensorDisplay value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 10/13/2012 21:31'!clickSoundEnabled 	^self typedMap booleanFor: #clickSoundEnabled default: false.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!clickSoundEnabled: aBoolean	self typedMap booleanFor: #clickSoundEnabled value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/26/2009 10:10'!colorRiseToolsGroup	^self typedMap booleanFor: #colorRiseToolsGroup default: false.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/26/2009 10:10'!colorRiseToolsGroup: aBoolean	self typedMap booleanFor: #colorRiseToolsGroup value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!controlCaptionFontName 	^self typedMap stringFor: #controlCaptionFontName default: 'Accumon'.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!controlCaptionFontName: aString 	^self typedMap stringFor: #controlCaptionFontName value: aString asString.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!controlCaptionFontSize 	^self typedMap numberFor: #controlCaptionFontSize default: 9.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!controlCaptionFontSize: anInteger 	^self typedMap numberFor: #controlCaptionFontSize value: anInteger.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/29/2009 23:17'!dragWithTools	^ self typedMap 		booleanFor: #dragWithTools		default: false! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/29/2009 23:18'!dragWithTools: aBoolean 	self typedMap 		booleanFor: #dragWithTools		value: aBoolean! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/14/2009 15:49'!fittingRatio	^GdsFeel fittingRatio.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/14/2009 15:49'!fittingRatio: aFloat	^GdsFeel fittingRatio: aFloat.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!goodiesEnabled	^self typedMap booleanFor: #goodiesEnabled default: false.! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/2/2009 11:47'!goodiesEnabled: aBoolean	"GdsFeel goodiesEnabled: true."	self typedMap booleanFor: #goodiesEnabled value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 12/4/2009 14:38'!usingStatusBar	^self typedMap booleanFor: #usingStatusBar default: true.	! !!GdsFeelMorphic class methodsFor: 'accessing' stamp: 'kf 11/26/2009 10:10'!usingStatusBar: aBoolean	self typedMap booleanFor: #usingStatusBar value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:44'!debugFindElement	^self typedMap booleanFor: #debugFindElement.! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:44'!debugFindElement: aBoolean	self typedMap booleanFor: #debugFindElement value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:44'!debugPathBoundary	^self typedMap booleanFor: #debugPathBoundary.! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:44'!debugPathBoundary: aBoolean	self typedMap booleanFor: #debugPathBoundary value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:43'!debugStretchFeedback	^self typedMap booleanFor: #debugStretchFeedback.! !!GdsFeelMorphic class methodsFor: 'debug-flags' stamp: 'kf 11/2/2009 13:43'!debugStretchFeedback: aBoolean	self typedMap booleanFor: #debugStretchFeedback value: aBoolean.	! !!GdsFeelMorphic class methodsFor: 'initializing' stamp: 'kf 11/2/2009 14:05'!initialize	"self initialize"	self openReadMe.	! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/5/2009 10:40'!loadLocalizeEnvirons	| csvPath localizeMap parser converter |	LocalizeMap := nil.	self localizeCsvName		ifEmpty: [			^self].	csvPath := GdsFeel fileDirectory fullNameFor: self localizeCsvName.	(FileDirectory default fileExists: csvPath)		ifFalse: [			^self].	localizeMap := Dictionary new.	converter := UTF8TextConverter new.	StandardFileStream readOnlyFileNamed: csvPath  do: [:s | 		parser := CSVParser on: s.		parser 			rowsDo: [:row | | convertedRow |				convertedRow := row collect: [:each | each convertFromWithConverter: converter]. 				self readRow: convertedRow intoMap: localizeMap]].	localizeMap keys ifEmpty: [localizeMap := nil].	LocalizeMap := localizeMap.! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/4/2009 10:29'!localizeCsvName	^GdsFeelMorphic typedMap stringFor: #localizeCsvName 	! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/4/2009 13:06'!localizeCsvName: aCsvFilename	self typedMap stringFor: #localizeCsvName value: aCsvFilename	! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/4/2009 10:40'!localizeMap	^LocalizeMap! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/4/2009 13:37'!localizedCaption: aKey	| map |	GdsFeelMorphic localizeMap ifNil: [^aKey].	map := GdsFeelMorphic localizeMap at: aKey ifAbsent: [^aKey].	^map at: #captionName ifAbsent: [aKey].! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/4/2009 13:38'!localizedHelpText: aKey	| map |	GdsFeelMorphic localizeMap ifNil: [^''].	map := GdsFeelMorphic localizeMap at: aKey ifAbsent: [^''].	^map at: #toolTipText ifAbsent: [''].	! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 10/12/2012 20:14'!readLine: aString intoMap: aDictionary	| items |	aString ifEmpty: [^self].	items := aString splitOn: ','.	items size < 2 ifTrue: [^self].	items := items collect: [:each | each trimOutsideSpace ].	self readRow: items intoMap: aDictionary.! !!GdsFeelMorphic class methodsFor: 'localize' stamp: 'kf 11/5/2009 10:42'!readRow: aCollection intoMap: aDictionary	|   map |	aCollection size < 2 ifTrue: [^self].	map := Dictionary new.	map at: #gdsName put: aCollection first.	map at: #captionName put: aCollection second.	aCollection size >= 3		ifTrue: [ map at: #toolTipText put: aCollection third].	aDictionary at: (map at: #gdsName) put: map. ! !!GdsFeelMorphic class methodsFor: 'deprecated' stamp: 'kf 11/5/2009 09:59'!loadLocalizeEnvironsOld	| csvPath localizeMap|	LocalizeMap := nil.	self localizeCsvName		ifEmpty: [			^self].	csvPath := GdsFeel fileDirectory fullNameFor: self localizeCsvName.	(FileDirectory default fileExists: csvPath)		ifFalse: [			^self].	localizeMap := Dictionary new.	FileStream readOnlyFileNamed: csvPath  do: [:s | 		[s atEnd]			whileFalse: [				self readLine: s nextLine intoMap: localizeMap]].	localizeMap keys ifEmpty: [localizeMap := nil].	LocalizeMap := localizeMap.	"LocalizeMap explore."! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/2/2009 13:48'!openReadMe	"self openReadMe."	"| window |	window := SystemWindow allSubInstances 						detect: [:w | w label sameAs: self readMeTitle] ifNone: [nil].	window ifNotNil: [window owner ifNotNil: [^self]]."	(StringHolder new contents: self readMeContents)		openLabel: self readMeTitle.! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/27/2009 10:18'!readMeContents	^self readMeV005. ! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/2/2009 14:04'!readMeTitle	^'README - ', (((self category asString splitOn: '-') allButLast) joinUsing: '-')! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/2/2009 13:48'!readMeV001	^'Evalute this:-------------------GdsStationUI open.V001--------fix: playSoundNamed: problem on Pharo. ' ! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/2/2009 13:48'!readMeV002	^'Evalute this:-------------------GdsStationUI open.V002--------add: [pathtype] to tool palete.automatic layer color allocate.' ! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/2/2009 14:34'!readMeV003	^'Change button font example:-----------------------------GdsFeelMorphic controlCaptionFontSize: 18.GdsFeelMorphic controlCaptionFontName: ''BitstreamVeraSansMono''Evalute this:-------------------GdsStationUI open.Restore original or Narrow screen:-----------------------------GdsFeelMorphic controlCaptionFontSize: 9.GdsFeelMorphic controlCaptionFontName: ''Accumon''This update clear class variables. if set goodiesEnabled:-----------------------------GdsFeelMorphic goodiesEnabled: true.V003--------add class named: GdsFeelMorphicand provides: - #controlCaptionFontSize - #controlCaptionFontSize: - #controlCaptionFontName - #controlCaptionFontName: move from GdsFeel classmethods:- #goodiesEnabled- #goodiesEnabled:- #debugStretchFeedback - #debugStretchFeedback: - #debugFindElement - #debugFindElement: - #debugPathBoundary: - #clickSoundEnabled - #clickSoundEnabled: - #debugPathBoundary '! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/11/2009 16:51'!readMeV004	^'- add [REFL].- swap reserved color map. Perfect white -> id, item, Generic white (visible pen color)-> lightGray.- small refactoring.'! !!GdsFeelMorphic class methodsFor: 'documentation' stamp: 'kf 11/15/2009 09:23'!readMeV005	^'	FIX:------- MessageNotUndestood>>UndefindObject>>visible.- freeze on click [DRAW PROFILE].- Missing cross cursor.- [ENTERTEXT] illigal color.ADD FUTURE:---------------------- Sensor location Morph defalts now StringMorph wthout BorderdStringMorph.turn to original appearance: GdsFeelMorphic borderedSensorDisplay: true.- display fitting ratio control. defaut is 0.98. between 0.5 and 1.0.  GdsFeelMorphic fittingRatio: 0.8.rectangular rubberband enhance:------------------------------------------------- reference point.- delta size, length. W: ##.# H: ##.# L: ##.#- snaped sensor point.tool palette layout:----------------------------- separate ''digitizing tools''.'! !GdsFeelMorphic initialize!