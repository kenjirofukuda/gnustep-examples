Object subclass: #TTBoxTextContext	instanceVariableNames: 'string morphicBounds borderWidth borderColor fillColor fontDescription aaLevel ttBounds transform isPixelWidth'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Core'!!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:24'!aaLevel	^4	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:57'!aaLevel: aLevel	aaLevel := aLevel.	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/9/2009 18:07'!apiWidth	transform ifNil: [^borderWidth].	 transform a11 isZero ifTrue: [^borderWidth].	isPixelWidth ifTrue: [^(borderWidth / transform a11) rounded].	^borderWidth	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:25'!borderColor	^borderColor	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:17'!borderColor:  aColor	borderColor := aColor.	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:24'!borderWidth	^borderWidth	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:17'!borderWidth:  anInteger	borderWidth := anInteger.	self calcContext.	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 23:11'!borderWidthAsKeepTrueTypeValue	isPixelWidth := false.	self calcContext.	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 23:11'!borderWidthAsPixelValue	isPixelWidth := true.	self calcContext.! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:21'!bounds	^morphicBounds	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:25'!fillColor	^fillColor	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:17'!fillColor:  aColor	fillColor := aColor.	! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:19'!fontDescription	^fontDescription! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:19'!string	^string! !!TTBoxTextContext methodsFor: 'accessing' stamp: 'kf 5/6/2009 18:15'!string: aString	string := aString.	self calcContext.	! !!TTBoxTextContext methodsFor: 'geometry' stamp: 'kf 5/6/2009 18:15'!bounds:  aRefctangle	morphicBounds := aRefctangle.	self calcContext.	! !!TTBoxTextContext methodsFor: 'private' stamp: 'kf 5/6/2009 23:20'!calcContext	ttBounds := TTBoxTextPrimitive 		calcBoundsString: self string		fontDescription: self fontDescription.	transform := TTBoxTextPrimitive 		computeTransform: self bounds		ttBounds: ttBounds		ttBorderWidth: self borderWidth! !!TTBoxTextContext methodsFor: 'drawing' stamp: 'kf 5/7/2009 09:25'!drawOn: aCanvas string: aString bounds: aBounds 	string := aString asString.	morphicBounds := aBounds.	self calcContext.	TTBoxTextPrimitive 		drawOn: aCanvas		string: string		fontDescription: self fontDescription		fillColor: self fillColor		borderColor: self borderColor		ttBorderWidth: self apiWidth		transform: transform		aaLevel: self aaLevel! !!TTBoxTextContext methodsFor: 'drawing' stamp: 'kf 5/7/2009 09:25'!strokeClasicalOn: aCanvas string: aString bounds: aBounds	string :=  aString asString.	morphicBounds := aBounds.	self calcContext.	TTBoxTextPrimitive strokeClasicalOn: aCanvas string: string fontDescription: self fontDescription fillColor:  self fillColor borderColor: self borderColor borderWidth: self borderWidth transform: transform.! !!TTBoxTextContext methodsFor: 'drawing' stamp: 'kf 5/7/2009 09:25'!strokeOn: aCanvas string: aString bounds: aBounds	string :=  aString asString.	morphicBounds := aBounds.	self calcContext.	TTBoxTextPrimitive strokeOn: aCanvas string: string fontDescription: self fontDescription fillColor:  self fillColor borderColor: self borderColor borderWidth: self apiWidth transform: transform  aaLevel: self aaLevel.! !!TTBoxTextContext methodsFor: 'initialization' stamp: 'kf 5/7/2009 09:24'!initialize	super initialize.	string := SystemVersion current version.	morphicBounds := 0@0extent:Display extent.	isPixelWidth := true.	borderWidth := 0.	borderColor := Color black.	fillColor := Color black.	fontDescription := TTFontDescription default.	aaLevel := 4.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TTBoxTextContext class	instanceVariableNames: ''!!TTBoxTextContext class methodsFor: 'as yet unclassified' stamp: 'kf 5/6/2009 18:36'!example	"self example"	|context |	context := TTBoxTextContext new.	context drawOn: Display getCanvas string: Time now bounds: Rectangle fromUser.! !Object subclass: #TTBoxTextPrimitive	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Core'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TTBoxTextPrimitive class	instanceVariableNames: ''!!TTBoxTextPrimitive class methodsFor: 'analysis' stamp: 'kf 5/6/2009 17:52'!calcBoundsString: aString fontDescription: aTTFontDescription	"import from TTFontDescription's  initializeString"	"	self calcBoundsString: 'UNTITLED' fontDescription: TTFontDescription default.	"	| xStart char glyph ttBounds |	xStart := 0.	ttBounds := 0@0 corner: 0@0.	1 to: aString size do:		[:i |		char := aString at: i.		glyph := aTTFontDescription at: char.		ttBounds := ttBounds quickMerge: (glyph bounds translateBy: xStart@0).		xStart := xStart + glyph advanceWidth].	^ttBounds! !!TTBoxTextPrimitive class methodsFor: 'analysis' stamp: 'kf 5/6/2009 23:23'!computeTransform: aMorphicBounds ttBounds: aDescriptionBounds ttBorderWidth: aTTwidth 	"WARNING: aTTborderWidth is not a final pixel width"	"import from TTSampleStringMorph's  computeTransform"	| cy transform |	cy := (aMorphicBounds origin y + aMorphicBounds corner y) * 0.5.	transform := MatrixTransform2x3 		transformFromLocal: (aDescriptionBounds insetBy: aTTwidth negated)		toGlobal: aMorphicBounds.	transform := transform composedWithGlobal: (MatrixTransform2x3 withOffset: 0 @ cy negated).	transform := transform composedWithGlobal: (MatrixTransform2x3 withScale: 1.0 @ -1.0).	transform := transform composedWithGlobal: (MatrixTransform2x3 withOffset: 0 @ cy).	^ transform! !!TTBoxTextPrimitive class methodsFor: 'drawing' stamp: 'kf 5/6/2009 23:23'!drawOn: aCanvas string: aString fontDescription: aTTFontDescription fillColor: aFillColor borderColor: aBorderCollor ttBorderWidth: aTTborderWidth transform: aTransform aaLevel: anAALebel 	"WARNING: aTTborderWidth is not a final pixel width"	"import from TTSimpleStringMorph's  drawOn:"	| xStart glyph |	xStart := 0.	aCanvas asBalloonCanvas preserveStateDuring: 		[ :balloonCanvas | 		balloonCanvas transformBy: aTransform.		balloonCanvas aaLevel: anAALebel.		aString do: 			[ :char | 			glyph := aTTFontDescription at: char.			balloonCanvas preserveStateDuring: 				[ :subCanvas | 				subCanvas transformBy: (MatrixTransform2x3 withOffset: xStart @ 0).				subCanvas 					drawGeneralBezierShape: glyph contours					color: aFillColor					borderWidth: aTTborderWidth					borderColor: aBorderCollor ].			xStart := xStart + glyph advanceWidth ] ]! !!TTBoxTextPrimitive class methodsFor: 'drawing' stamp: 'kf 11/11/2009 10:01'!strokeClasicalOn: aCanvas string: aString fontDescription: aTTFontDescription fillColor: aFillColor borderColor: aBorderCollor borderWidth: aBorderWidth transform: aTransform	"import from TTSimpleStringMorph's  drawOn:"	| xStart glyph  glyphTrans pointTransBlock|	xStart := 0.	aString do:[:char|		glyph := aTTFontDescription at: char.		glyphTrans := aTransform composedWithLocal: (MatrixTransform2x3 withOffset: xStart@0).		pointTransBlock := [:ttPoint | glyphTrans localPointToGlobal: ttPoint].		glyph contours do:[:ptArray|			1 to: ptArray size by: 3 do:[:i|				| fromPt toPt |				fromPt := pointTransBlock value: (ptArray at: i).				toPt := pointTransBlock value: (ptArray at:(i+2)).				aCanvas line: fromPt					to: toPt					width: aBorderWidth color: aBorderCollor]].		xStart := xStart + glyph advanceWidth].! !!TTBoxTextPrimitive class methodsFor: 'drawing' stamp: 'kf 5/6/2009 22:45'!strokeClasicalOn: aCanvas string: aString fontDescription: aTTFontDescription fillColor: aFillColor borderColor: aBorderCollor borderWidth: aBorderWidth transform: aTransform aaLevel: anAALebel	"import from TTSimpleStringMorph's  drawOn:"	| xStart glyph  |	xStart := 0.	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		balloonCanvas transformBy: aTransform.		balloonCanvas aaLevel: anAALebel.		aString do:[:char|			glyph := aTTFontDescription at: char.			balloonCanvas preserveStateDuring:[:subCanvas|				subCanvas transformBy: (MatrixTransform2x3 withOffset: xStart@0).				glyph displayOn: subCanvas divided: 1 width: aBorderWidth color: aBorderCollor.].			xStart := xStart + glyph advanceWidth]].! !!TTBoxTextPrimitive class methodsFor: 'drawing' stamp: 'kf 5/6/2009 23:26'!strokeOn: aCanvas string: aString fontDescription: aTTFontDescription fillColor: aFillColor borderColor: aBorderCollor borderWidth: aBorderWidth transform: aTransform aaLevel: anAALebel	"import from TTSimpleStringMorph's  drawOn:"	| xStart glyph |	xStart := 0.	"asPixelWidth := (aBorderWidth / aTransform a11) rounded."	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		balloonCanvas transformBy: aTransform.		balloonCanvas aaLevel: anAALebel.		aString do:[:char|			glyph := aTTFontDescription at: char.			balloonCanvas preserveStateDuring:[:subCanvas|				subCanvas transformBy: (MatrixTransform2x3 withOffset: xStart@0).				glyph displayOn: subCanvas divided: 1 width: aBorderWidth color: aBorderCollor.].			xStart := xStart + glyph advanceWidth]].! !!TTBoxTextPrimitive class methodsFor: 'examples' stamp: 'kf 5/6/2009 23:22'!example1	"Display restoreAfter: [self example1]"	| string ttBounds morphicBounds transform borderWidth borderColor fillColor canvas fontDescription aaLevel |	string := SystemVersion current version.	morphicBounds := Rectangle fromUser.	borderWidth := 10.	borderColor := Color red.	fillColor := Color blue.	canvas := Display getCanvas.	fontDescription := TTFontDescription default.	aaLevel := 4.	ttBounds := TTBoxTextPrimitive 		calcBoundsString: string		fontDescription: fontDescription.	transform := TTBoxTextPrimitive 		computeTransform: morphicBounds		ttBounds: ttBounds		ttBorderWidth: borderWidth.	TTBoxTextPrimitive 		drawOn: canvas		string: string		fontDescription: fontDescription		fillColor: fillColor		borderColor: borderColor		ttBorderWidth: borderWidth		transform: transform		aaLevel: aaLevel! !!TTBoxTextPrimitive class methodsFor: 'drawing-damaged' stamp: 'kf 11/11/2009 10:01'!fillClasicalOn: aCanvas string: aString fontDescription: aTTFontDescription fillColor: aFillColor borderColor: aBorderCollor borderWidth: aBorderWidth transform: aTransform	| xStart glyph  glyphTrans pointTransBlock glyphForm |	xStart := 0.	aString do:[:char|		glyph := aTTFontDescription at: char.		glyphTrans := aTransform composedWithLocal: (MatrixTransform2x3 withOffset: xStart@0).		pointTransBlock := [:ttPoint | glyphTrans localPointToGlobal: ttPoint].		glyphForm := glyph asFormWithScale: glyphTrans a11 ascender: aTTFontDescription ascender descender: aTTFontDescription descender		"glyph contours do:[:ptArray|			1 to: ptArray size by: 3 do:[:i|				| fromPt toPt |				fromPt := pointTransBlock value: (ptArray at: i).				toPt := pointTransBlock value: (ptArray at:(i+2)).				aCanvas line: fromPt					to: toPt					width: aBorderWidth color: aBorderCollor]]".		xStart := xStart + glyph advanceWidth].! !Object subclass: #QDPattern	instanceVariableNames: ''	classVariableNames: 'Form8x8Array HcForm8x8Array'	poolDictionaries: ''	category: 'KFImaging-Core'!!QDPattern commentStamp: 'kf 10/21/2008 14:01' prior: 0!QDPatternAuther:			gdsfeel_doit@me.comDescription: 	QuickDraw pattern into Squeak environment.Testing Environment: Squeak3.5 #5180Please allow awkward English.See: http://developer.apple.com/documentation/mac/QuickDraw/QuickDraw-177.htmlif you needs display like as [Figure 3-28  Standard patterns]  of  that URL contents.evalute next line	 QDPattern example.this implemetation dose not use primitive api call. original pattern data source from MPW (Macintosh Programers Workshop) Rez command source format. Then platform indipendent. Toolbox call:	GetIndPattern(&pat, sysPatListID, patIndex);Squeak call:	pat := QDPattern formAt: patIndex.using pattern:	In MVC: 	(fill Form object using InfinitForm)				| pat targetForm fillerForm kIconSize |		...		targetForm := Form extent: (kIconSize @ kIconSize).		fillerForm := InfiniteForm with: (QDPattern formAt: patIndex).		fillerForm displayOn: targetForm.		...			In Morphic:		| tagetMorph fillStyle |		...		fillStyle := BitmapFillStyle fromForm: (QDPattern formAt: patIndex).		fillStyle origin: tagetMorph bounds origin.		tagetMorph fillStyle: fillStyle.		...pattern access by name (constant):	Toolbox call:		qdGlobals.gray, qdGlobals.ltGray, qdGlobals.dkGray ..	Squeak call:		QDPattern gray, QDPattren lightGray , QDPattren darkGray ...	A future view:	1. pattern picker.	2. pattern editor.!!QDPattern methodsFor: 'look in class' stamp: 'kf 10/25/2008 08:56'!seeClassSide	"All the code for QDPattern is on the class side"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QDPattern class	instanceVariableNames: ''!!QDPattern class methodsFor: 'example' stamp: 'KJ 6/6/2004 18:28'!allForms	"QDPattern allForms"	| f pat col filler |		col := OrderedCollection new.	1 to: QDPattern size do: [ :patIndex |		pat := QDPattern formAt: patIndex.		filler := InfiniteForm with: pat.		f := Form extent: (self exampleIconSize@self exampleIconSize).		filler displayOn: f.		col add: f.	].	^col asArray.	! !!QDPattern class methodsFor: 'example' stamp: 'KJ 6/6/2004 18:46'!example	"self example"	Smalltalk isMorphic		ifTrue: [self examplePatternTableMorph openInWorld]		ifFalse: [self examplePatternTableForm display]! !!QDPattern class methodsFor: 'example' stamp: 'KJ 6/6/2004 18:26'!exampleIconSize	^32	! !!QDPattern class methodsFor: 'example' stamp: 'kf 10/19/2008 10:51'!examplePatternTableForm	"QDPattern examplePatternTableForm display."	| margin sampleSize viewWidth viewHeight numColumn numRow panelForm iRow iCol h v |	sampleSize := self exampleIconSize.	margin := 5.	viewWidth := (Display width * 0.8) asInteger.	numColumn := viewWidth - margin // (sampleSize + margin).	numRow := QDPattern size // numColumn.	QDPattern size \\ numColumn = 0		ifFalse: [numRow := numRow + 1].	viewWidth := sampleSize + margin * numColumn + margin.	viewHeight := numRow * (sampleSize + margin) + margin.	panelForm := Form extent: viewWidth @ viewHeight depth: 32.	self allForms		doWithIndex: [:f :patIndex | 			iCol := patIndex - 1 \\ numColumn.			iRow := patIndex - 1 // numColumn.			h := margin + (iCol * (sampleSize + margin)).			v := margin + (iRow * (sampleSize + margin)).			f displayOn: panelForm at: h @ v.			panelForm				border: (Rectangle origin: (h @ v) - 1 extent: f extent + 1)				width: 1].	^ panelForm! !!QDPattern class methodsFor: 'example' stamp: 'kf 10/19/2008 10:49'!examplePatternTableMorph	"self examplePatternTableMorph openInWorld"	| icons panel panelSize box |	icons := self allForms				collect: [:form | form asMorph ].	icons size = 0		ifTrue: [^ self].	panel := ImageTable createIconPanelMorph.	panelSize := icons size sqrt ceiling asInteger * self exampleIconSize.	panelSize := panelSize + (self exampleIconSize // 3).	panel width: panelSize.	panel height: panelSize.	panel addAllMorphs: icons.	box := panel boundingBoxOfSubmorphs.	panel width: box width.	panel height: box height.	^ panel! !!QDPattern class methodsFor: 'constants' stamp: 'KJ 6/4/2004 21:40'!black	^self formAt: 1.! !!QDPattern class methodsFor: 'constants' stamp: 'KJ 6/4/2004 21:42'!darkGray	^self formAt: 3.! !!QDPattern class methodsFor: 'constants' stamp: 'KJ 6/4/2004 21:41'!gray	^self formAt: 4.! !!QDPattern class methodsFor: 'constants' stamp: 'KJ 6/4/2004 21:42'!lightGray	^self formAt: 23.! !!QDPattern class methodsFor: 'constants' stamp: 'KJ 6/4/2004 21:41'!white	^self formAt: 20.! !!QDPattern class methodsFor: 'class initialization' stamp: 'kf 10/12/2012 20:15'!bytesFromRezData: aRezString	| input line bytes bit16items|	bytes := OrderedCollection new.	input := ReadStream on: aRezString.	[ input atEnd ] whileFalse: 		[ line := (input upTo: Character cr) trimOutsideSpace.		(line beginsWith: '$"') ifTrue: [			bit16items := (line allButFirst findTokens: ' ').			bit16items do: [:each | | bit16|				bit16 := each select: [:c | c isAlphaNumeric ].				bytes add: ('16r',(bit16 copyFrom: 1 to: 2)) asNumber.				bytes add: ('16r',(bit16 copyFrom: 3 to: 4)) asNumber.]]].	^bytes asArray! !!QDPattern class methodsFor: 'class initialization' stamp: 'kf 10/12/2012 21:08'!formsFromRez: aRezString	| input line nibbleArray forms f|	(aRezString trimOutsideSpace beginsWith: 'data')		ifTrue: [			^self formsFromRezData: aRezString].	forms := OrderedCollection new.		input := ReadStream on: aRezString.	[ input atEnd ] whileFalse: 		[ line := (input upTo: Character cr) trimOutsideSpace.		(line beginsWith: '$"') ifTrue: 			[			nibbleArray := QDPattern rezHexStringToNibbleArray: line.			f := Form 				extent: 8 @ 8				fromArray: (self nibbleArrayTo32bitIntegerArray: nibbleArray)				offset: 0 @ 0.			forms add: f ] ].	^forms asArray! !!QDPattern class methodsFor: 'class initialization' stamp: 'kf 11/25/2008 20:35'!formsFromRezData: aRezString	|forms bytes numPat rest |	forms := OrderedCollection new.		bytes := self bytesFromRezData: aRezString.	numPat := (bytes first bitShift: 8) bitOr: bytes second.	rest := bytes allButFirst: 2.	self assert: [rest size // numPat = 8].	0 to: (numPat - 1)		do: [:patIndex | 			forms add: 				(Form 					extent: 8 @ 8					fromArray: ((rest copyFrom: (patIndex * 8) + 1 to: (patIndex * 8) + 8)				 		collect: [:byte | byte bitShift: 24])						offset: 0 @ 0).].	^forms asArray.! !!QDPattern class methodsFor: 'class initialization' stamp: 'kf 11/25/2008 14:58'!initialize	"QDPattern initialize"	Form8x8Array := self formsFromRez: QDPattern qdPatternResourceRezFormat.	HcForm8x8Array := self formsFromRez: QDPattern hcPatternResourceRezFormat	! !!QDPattern class methodsFor: 'accessing' stamp: 'KJ 6/4/2004 21:25'!formAt: anIndex		^Form8x8Array at: anIndex.! !!QDPattern class methodsFor: 'accessing' stamp: 'kf 11/25/2008 21:45'!hcFillStyles	^self hcForms collect: [:f | BitmapFillStyle fromForm: f].! !!QDPattern class methodsFor: 'accessing' stamp: 'kf 11/25/2008 21:42'!hcForms	HcForm8x8Array ifNil: [		HcForm8x8Array := self formsFromRez: QDPattern hcPatternResourceRezFormat].	^HcForm8x8Array	copy! !!QDPattern class methodsFor: 'accessing' stamp: 'KJ 6/6/2004 19:58'!infiniteFormAt: anIndex		^InfiniteForm with: (self formAt: anIndex).! !!QDPattern class methodsFor: 'accessing' stamp: 'KJ 6/6/2004 18:11'!size	^Form8x8Array size.! !!QDPattern class methodsFor: 'objects from disk' stamp: 'kf 11/25/2008 14:48'!hcPatternResourceRezFormat^'data ''PAT#'' (128, "HyperPats", purgeable) {	$"0028 0000 0000 0000 0000 8000 0000 0800"            	$"0000 8800 2200 8800 2200 8888 2222 8888"            	$"2222 88AA 22AA 88AA 22AA CCAA 33AA CCAA"            	$"33AA EEAA BBAA EEAA BBAA EEBB BBEE EEBB"            	$"BBEE FFBB FFEE FFBB FFEE FFBB FFFF FFBB"            	$"FFFF 8010 0220 0108 4004 FFFF FFFF FFFF"            	$"FFFF 8822 8822 8822 8822 1122 4488 1122"            	$"4488 C480 0C68 4302 3026 B130 031B D8C0"            	$"0C8D AA00 AA00 AA00 AA00 8822 5522 8822"            	$"5522 8855 2255 8855 2255 77DD 77DD 77DD"            	$"77DD 8000 0000 0000 0000 AA55 AA55 AA55"            	$"AA55 0384 4830 0C02 0101 8244 3944 8201"            	$"0101 8814 2241 8841 2214 8080 413E 0808"            	$"14E3 2204 8C74 2217 9810 BE80 8808 EB08"            	$"8880 25C8 3289 6424 4C92 A29C 41BE 2AC9"            	$"14EB 40A0 0000 040A 0000 8040 2000 0204"            	$"0800 AA00 8000 8800 8000 FF80 8080 8080"            	$"8080 081C 22C1 8001 0204 FF80 8080 FF08"            	$"0808 F874 2247 8F17 2271 BF00 BFBF B0B0"            	$"B0B0 FF7F BE5D A241 8000 FAF5 FAF5 A050"            	$"A050"                                               };'! !!QDPattern class methodsFor: 'objects from disk' stamp: 'kf 11/6/2008 15:14'!nibbleArrayTo32bitIntegerArray: aNibbleArray 	| integer32 col |	col := OrderedCollection new.	aNibbleArray doWithIndex: 		[ :nibble :index | 		index odd 			ifTrue: [ integer32 := nibble bitShift: 28 ]			ifFalse: 				[ integer32 := integer32 bitOr: (nibble bitShift: 24).				col add: integer32 ] ].	^ col asArray! !!QDPattern class methodsFor: 'objects from disk' stamp: 'KJ 6/4/2004 21:57'!qdPatternResourceRezFormat	"from MPW DeRez Command result.	see: http://http://developer.apple.com/tools/mpw-tools/commandref/derez.html "	^'resource ''PAT#'' (0, purgeable) {	{	/* array PatArray: 38 elements */		/* [1] */		$"FFFF FFFF FFFF FFFF",		/* [2] */		$"DDFF 77FF DDFF 77FF",		/* [3] */		$"DD77 DD77 DD77 DD77",		/* [4] */		$"AA55 AA55 AA55 AA55",		/* [5] */		$"55FF 55FF 55FF 55FF",		/* [6] */		$"AAAA AAAA AAAA AAAA",		/* [7] */		$"EEDD BB77 EEDD BB77",		/* [8] */		$"8888 8888 8888 8888",		/* [9] */		$"B130 031B D8C0 0C8D",		/* [10] */		$"8010 0220 0108 4004",		/* [11] */		$"FF88 8888 FF88 8888",		/* [12] */		$"FF80 8080 FF08 0808",		/* [13] */		$"80",		/* [14] */		$"8040 2000 0204 08",		/* [15] */		$"8244 3944 8201 0101",		/* [16] */		$"F874 2247 8F17 2271",		/* [17] */		$"55A0 4040 550A 0404",		/* [18] */		$"2050 8888 8888 0502",		/* [19] */		$"BF00 BFBF B0B0 B0B0",		/* [20] */		$"",		/* [21] */		$"8000 0800 8000 08",		/* [22] */		$"8800 2200 8800 22",		/* [23] */		$"8822 8822 8822 8822",		/* [24] */		$"AA00 AA00 AA00 AA",		/* [25] */		$"FF00 FF00 FF00 FF",		/* [26] */		$"1122 4488 1122 4488",		/* [27] */		$"FF00 0000 FF",		/* [28] */		$"0102 0408 1020 4080",		/* [29] */		$"AA00 8000 8800 80",		/* [30] */		$"FF80 8080 8080 8080",		/* [31] */		$"081C 22C1 8001 0204",		/* [32] */		$"8814 2241 8800 AA",		/* [33] */		$"40A0 0000 040A",		/* [34] */		$"0384 4830 0C02 0101",		/* [35] */		$"8080 413E 0808 14E3",		/* [36] */		$"1020 54AA FF02 0408",		/* [37] */		$"7789 8F8F 7798 F8F8",		/* [38] */		$"0008 142A 552A 1408"	}};'! !!QDPattern class methodsFor: 'objects from disk' stamp: 'kf 11/6/2008 15:14'!rezHexStringToNibbleArray: aRez8ByteHexString 	"$"	"FFFF FFFF FFFF FFFF"	""	| col rest |	col := OrderedCollection new.	(aRez8ByteHexString asArray select: [ :ch | ch isAlphaNumeric ]) do: [ :c | col add: ('16r' , c asString) asNumber ].	rest := 16 - col size.	rest > 0 ifTrue: [ rest timesRepeat: [ col add: 0 ] ].	^ col asArray! !Object subclass: #FormSupport	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Core'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FormSupport class	instanceVariableNames: ''!!FormSupport class methodsFor: 'service' stamp: 'kf 4/30/2009 22:17'!convertToMonocroFilmForm: aForm	| dstForm newColor |	dstForm := aForm asGrayScale as8BitColorForm.	dstForm colorsUsed		do: [ :oldColor |			newColor := (Color gray: 0.0) alpha: ( 1 - oldColor brightness ).			dstForm replaceColor: oldColor with: newColor].	^dstForm."Example:""	| f |	Display depth = 32 ifFalse: [^self].	f := Form fromUser.	f := self convertToMonocroFilmForm: f.	Display restoreAfter: [		false ifTrue: [Display fillWhite].		f displayOn: Display at: (0@0) rule: Form blend]."! !!FormSupport class methodsFor: 'service' stamp: 'kf 4/30/2009 22:17'!convertToMonocroFilmMorph: aForm	^(self convertToMonocroFilmForm: aForm) asMorph."Example:""	| f |	Display depth = 32 ifFalse: [^self].	f := Form fromUser.	(self convertToMonocroFilmMorph: f)		openInWorld."! !!FormSupport class methodsFor: 'service' stamp: 'KJ 6/24/2004 21:45'!fillForm: aBaseForm withMask: aFormOrColor	| newForm  toneForm rule |	newForm := aBaseForm deepCopy.	aBaseForm depth = 1		ifTrue: [			rule := Form and.]		ifFalse: [			rule := Form under.].	toneForm := self makeHalftoneMaskForm: aBaseForm pattern: aFormOrColor.	toneForm displayOn: newForm at: (0@0) rule: rule.	^ newForm.! !!FormSupport class methodsFor: 'service' stamp: 'KJ 6/7/2004 17:31'!hexStringOf32BitInteger: aNumber	"Transcript cr; show: (self hexStringOf32BitInteger: -1)"	| r16 str |	r16 := aNumber radix: 16.	str := r16 copyReplaceAll: '16r' with: ''. 	(8 - (str size)) timesRepeat: [		str := '0', str.	]. 	str := '16r', str.	^str.	! !!FormSupport class methodsFor: 'service' stamp: 'KJ 6/24/2004 21:06'!makeHalftoneMaskForm: aBaseForm pattern: aFormOrColor	| bwHalfToneForm |	bwHalfToneForm := Form extent: aBaseForm extent depth: 1.	aFormOrColor class = Color		ifTrue: [bwHalfToneForm fillWithColor: aFormOrColor].	aFormOrColor class = InfiniteForm		ifTrue: [aFormOrColor displayOn: bwHalfToneForm].	aFormOrColor class = Form		ifTrue: [(InfiniteForm with: aFormOrColor) displayOn: bwHalfToneForm].	^bwHalfToneForm.! !!FormSupport class methodsFor: 'service' stamp: 'KJ 6/7/2004 16:46'!tallyUniqPixelValuesOf: aForm	| set |	set := Set new.	aForm tallyPixelValues do: [ : value |		set add: value].	^set.		! !!FormSupport class methodsFor: 'service' stamp: 'kf 4/30/2009 22:18'!usedColorsPanelFrom: aForm 	| top colors |	top := AlignmentMorph newColumn.	top beTransparent.	top layoutPolicy: TableLayout new.	top clipSubmorphs: false.	top borderWidth: 0.	top extent: 50 @ 100.	top vResizing: #shrinkWarp.	top hResizing: #shrinkWarp.	top setProperty: #modelForm toValue: aForm.	colors := ColorSupport sortByLuminanceColors: (aForm colorsUsed ) .	top setProperty: #colorsUsed toValue: colors.	top addAllMorphs:		(ColorSupport sampleMorphsOfColors: colors).	top changed.	top openInWorld! !Object subclass: #ColorSupport	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Core'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ColorSupport class	instanceVariableNames: ''!!ColorSupport class methodsFor: 'service' stamp: 'KJ 6/8/2004 23:16'!codeGenarateOn: aStream colors:  aColorArray varNamePrefix: aPrefix		aStream		cr;		nextPutAll: '| '.	(1 to: aColorArray size) do: [ :index |		aStream nextPutAll: aPrefix, (index printString), ' ' ].	aStream		nextPutAll: '|';		cr.	(self hexStringArrayFromColors: aColorArray)		doWithIndex: [ :hexColorExpr :index |			aStream				nextPutAll: aPrefix, (index printString);				nextPutAll: ' := ';				nextPutAll: 'Color fromString: ', hexColorExpr, '.';				cr.			].	aStream cr; flush.! !!ColorSupport class methodsFor: 'service' stamp: 'KJ 6/8/2004 22:26'!hexStringArrayFromColors: aColorArray	^aColorArray		collect: [ :color | '#', color hex].! !!ColorSupport class methodsFor: 'service' stamp: 'kf 9/27/2008 13:19'!mergeByLuminanceColors: aColorArray1 withColors: aColorArray2 	| colorSet colors |	colorSet := Set new.	colorSet addAll: aColorArray1.	colorSet addAll: aColorArray2.	colors := SortedCollection new.	colors		sortBlock: [:c1 :c2 | c1 luminance < c2 luminance].	colors addAll: colorSet.	^ colors asArray.! !!ColorSupport class methodsFor: 'service' stamp: 'KJ 6/17/2004 19:16'!pureColorOf: aColor	aColor isGray		ifTrue: [			aColor luminance <= 0.5				ifTrue: [^Color black]				ifFalse: [^Color white].]		ifFalse: [^Color h: (aColor hue ) s: 1.0 v: 1.0].! !!ColorSupport class methodsFor: 'service' stamp: 'KJ 6/8/2004 22:41'!sampleMorphOfColor: aColor 	"(self sampleMorphOfColor: Color blue) openInWorld."	| r |		r := RectangleMorph new.	r hResizing: #spaceFill.	r vResizing: #spaceFill.	r minimumExtent: 10 @ 10.	r borderWidth: 0.	r color: aColor.	r name: '#' , aColor hex.	^ r! !!ColorSupport class methodsFor: 'service' stamp: 'KJ 6/8/2004 22:44'!sampleMorphsOfColors: aColorArray 	^aColorArray		collect: [ :color | self sampleMorphOfColor: color].! !!ColorSupport class methodsFor: 'service' stamp: 'kf 9/27/2008 13:19'!sortByLuminanceColors: aColorArray	| colorSet colors |	colorSet := Set new.	colorSet addAll: aColorArray.	colors := SortedCollection new.	colors		sortBlock: [:c1 :c2 | c1 luminance < c2 luminance].	colors addAll: colorSet.	^ colors asArray.! !Object subclass: #KFSlideshow	instanceVariableNames: 'isAbortBlock displayBounds'	classVariableNames: ''	poolDictionaries: ''	category: 'KFImaging-Core'!!KFSlideshow commentStamp: 'kf 9/29/2009 23:39' prior: 0!A KFSlideshow is xxxxxxxxx.Instance Variables	isAbortBlock:		<BlockContext>isAbortBlock	- must be Boolean result return block.!!KFSlideshow methodsFor: 'initialize-release' stamp: 'kf 9/30/2009 14:15'!abortWhenCursorTop	^Sensor cursorPoint y <= 20.	! !!KFSlideshow methodsFor: 'initialize-release' stamp: 'kf 9/29/2009 22:38'!initialize	super initialize.	self setupDefaultAbortBlock.	! !!KFSlideshow methodsFor: 'initialize-release' stamp: 'kf 9/29/2009 22:38'!setupDefaultAbortBlock	self isAbortBlock: [self abortWhenCursorTop]	! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/29/2009 23:52'!didDisplayImage: aImage! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 14:43'!displayFull: aForm	self class displayFull: aForm inBounds: self displayBounds.	! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 00:00'!displayImage: aForm	self willDisplayImage: aForm.	self privateDisplayImage: aForm.	self didDisplayImage: aForm.	! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 00:04'!displayLoop	| imageStream abort |	imageStream := self imageStream.	abort := false.	[imageStream atEnd or: [abort]]		whileFalse: [			abort := self oneFrameDisplayImage: imageStream next].! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 00:05'!imageStream	^ReadStream on: #().		! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 00:00'!oneFrameDisplayImage: aImage	self isAbort ifTrue: [^true].	self displayImage: aImage.	self isAbort ifTrue: [^true].	^false! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/30/2009 14:43'!privateDisplayImage: aForm	self displayFull: aForm.	! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/29/2009 23:49'!privateShowImages: aImages preDisplayBlock: aPerDisplayBlock 	aImages do: 		[ :img | 		self isAbort ifTrue: [^self].		aPerDisplayBlock value.		self isAbort ifTrue: [^self].		self displayImage: img.		self isAbort ifTrue: [^self].]! !!KFSlideshow methodsFor: 'private' stamp: 'kf 9/29/2009 23:52'!willDisplayImage: aImage! !!KFSlideshow methodsFor: 'accessing' stamp: 'kf 9/30/2009 14:25'!displayBounds	displayBounds ifNil: [displayBounds := Display boundingBox].	^displayBounds	! !!KFSlideshow methodsFor: 'accessing' stamp: 'kf 9/30/2009 14:28'!displayBounds: aRectangle	self assert: [aRectangle width > 0 and: [aRectangle height > 0]].	displayBounds := aRectangle.! !!KFSlideshow methodsFor: 'accessing' stamp: 'kf 9/29/2009 22:32'!isAbortBlock: aBooleanAbortBlock	isAbortBlock := aBooleanAbortBlock	! !!KFSlideshow methodsFor: 'testing' stamp: 'kf 9/29/2009 22:42'!isAbort	isAbortBlock 		ifNotNil: [ | abort |			abort := false.			[abort := isAbortBlock value. ^abort] 				on: Error do: [:ex | ^false]].	^false.! !!KFSlideshow methodsFor: 'service' stamp: 'kf 8/22/2008 14:15'!pngImagesFromPath: aDirectoryPath limit: aLimitCount	|col |	col := OrderedCollection new.	(((FileDirectory on: aDirectoryPath) 		fileNames select: [ :n | n asLowercase endsWith: '.png']) 		collect: [ :n2 | (FileDirectory on: aDirectoryPath) fullNameFor: n2])		do: [ :path |			(col size <= aLimitCount)				ifTrue:[					col add: (ImageReadWriter formFromFileNamed: path)]].	^col asArray.! !!KFSlideshow methodsFor: 'service' stamp: 'kf 9/29/2009 22:18'!showImages: aImages delay: aDelay	self deprecated: 'use #showImages:delaySeconds:'.	self showImages: aImages delaySeconds: aDelay.! !!KFSlideshow methodsFor: 'service' stamp: 'kf 9/30/2009 14:35'!showImages: aImages delaySeconds: aDelaySeconds 	self 		showImages: aImages		preDisplayBlock: [ (Delay forSeconds: aDelaySeconds) wait]! !!KFSlideshow methodsFor: 'service' stamp: 'kf 9/29/2009 22:28'!showImages: aImages preDisplayBlock: aPerDisplayBlock 	self 		privateShowImages: aImages		preDisplayBlock: aPerDisplayBlock.	aPerDisplayBlock value.	Display restore! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!KFSlideshow class	instanceVariableNames: ''!!KFSlideshow class methodsFor: 'sampling' stamp: 'kf 5/3/2009 22:00'!cursorForms 	^(Cursor class allMethodsInCategory: #constants ) collect: [:sel |Cursor perform: sel]! !!KFSlideshow class methodsFor: 'accessing' stamp: 'kf 9/30/2009 14:31'!displayFull: aImage	self displayFull: aImage inBounds: Display boundingBox.! !!KFSlideshow class methodsFor: 'accessing' stamp: 'kf 9/30/2009 14:21'!displayFull: aImage inBounds: aRectangle	| scaledImage |	scaledImage := aImage scaledToSize: aRectangle extent.		Display fadeImageHorFine: scaledImage at: ((aRectangle extent // 2) - (scaledImage extent // 2) + aRectangle origin).! !!KFSlideshow class methodsFor: 'examples' stamp: 'kf 9/29/2009 23:05'!example	"KFSlideshow example."	| fd slideShow images |	fd := UIManager default chooseDirectory.	fd ifNil: [ ^ self ].	slideShow := KFSlideshow new.	images := slideShow 		pngImagesFromPath: fd pathName		limit: 20.	slideShow 		showImages: images		delaySeconds: 3! !!KFSlideshow class methodsFor: 'examples' stamp: 'kf 9/30/2009 14:37'!exampleCursor	"KFSlideshow exampleCursor."	| slideShow images |	slideShow := KFSlideshow new.	slideShow displayBounds: Rectangle fromUser.	images := self cursorForms.	slideShow 		showImages: images		delaySeconds: 1! !!KFSlideshow class methodsFor: 'class initialization' stamp: 'kf 10/7/2009 10:55'!initialize	"self openReadMe"	self openReadMe. ! !!KFSlideshow class methodsFor: 'testing' stamp: 'kf 8/23/2008 23:37'!isHighQuorityImage: aForm	^((aForm extent y) > (aForm extent x))		ifTrue: [(aForm extent y >= 640) and: [aForm extent x >= 480]]		ifFalse: [(aForm extent y >= 480) and: [aForm extent x >= 640]].! !!KFSlideshow class methodsFor: 'documentation' stamp: 'kf 10/7/2009 10:46'!openReadMe	"self openReadMe."	| window |	window := SystemWindow allSubInstances 						detect: [:w | w label sameAs: self readMeTitle] ifNone: [nil].	window ifNotNil: [window owner ifNotNil: [^self]].	(StringHolder new contents: self readMeContents)		openLabel: self readMeTitle. ! !!KFSlideshow class methodsFor: 'documentation' stamp: 'kf 10/7/2009 10:48'!readMeContents	^self readMeV001! !!KFSlideshow class methodsFor: 'documentation' stamp: 'kf 10/7/2009 10:46'!readMeTitle	^'README - ', 'KFImaging'.! !!KFSlideshow class methodsFor: 'documentation' stamp: 'kf 10/7/2009 10:50'!readMeV001	^'kf 10/7/2009 10:49remove assignment for closure variable.(Syntax error on Pharo) '! !QDPattern initialize!KFSlideshow initialize!