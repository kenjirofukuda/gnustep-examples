Object subclass: #GdsElementDrawer	instanceVariableNames: 'element morph'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsElementDrawer commentStamp: 'kf 11/14/2008 20:10' prior: 0!A GdsElementDrawer is xxxxxxxxx.Instance Variables	element:		<GdsElement>	fillImage:		<Form>	fillMaskImage:		<Form>	morph:		<GdsStructureMorph>	strokeImage:		<Form>	strokeMaskImage:		<Form>element	- xxxxxfillImage	- xxxxxfillMaskImage	- xxxxxmorph	- xxxxxstrokeImage	- xxxxxstrokeMaskImage	- xxxxx!!GdsElementDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 20:50'!canDisplayKindForKey: aKey 	^ (element owner kinds atKey: aKey) isVisible! !!GdsElementDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 17:01'!canDisplayOrigin	^false! !!GdsElementDrawer methodsFor: 'testing' stamp: 'kf 11/17/2009 14:04'!canFill	^true! !!GdsElementDrawer methodsFor: 'testing' stamp: 'kf 11/26/2009 13:37'!isDrawableElement: aGdsElement 	| longSide pixelSize |	aGdsElement isReference ifTrue: [ ^ true ].	longSide := aGdsElement dataBounds width max: aGdsElement dataBounds height.	pixelSize := self pixelSize: longSide.	^pixelSize > 2.0! !!GdsElementDrawer methodsFor: 'testing' stamp: 'kf 11/26/2009 13:29'!pixelSize: worldSize 	^morph activeViewport pixelSize: worldSize abs asPoint! !!GdsElementDrawer methodsFor: 'defaults' stamp: 'kf 10/26/2008 11:57'!defaultQDPatternIndex	^26.! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 5/12/2009 15:52'!drawItemFeedbackOn: aCanvas	self subclassResponsibility	! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 12/8/2009 17:49'!drawOriginOn: aCanvas	| origin |	element vertices ifEmpty: [^self].	origin := element xy.	morph penColor: morph visibleMarkerColor during: [		morph drawOn: aCanvas markDiamondPointAt: origin].! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 5/13/2009 13:28'!fillOutlineOn: aCanvas	self subclassResponsibility! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:30'!fullDrawOn: aCanvas	element isReference		ifFalse: [morph insideViewLevels ifFalse: [^self]]. 	element state = #inStructure 		ifTrue: [ 			self canFill				ifTrue: [					self fillOutlineOn: aCanvas] ].	self strokeOutlineOn: aCanvas.	self optionalDrawOn: aCanvas! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:30'!optionalDrawOn: aCanvas	self canDisplayOrigin		ifTrue: [self drawOriginOn: aCanvas].! !!GdsElementDrawer methodsFor: 'drawing' stamp: 'kf 5/13/2009 13:25'!strokeOutlineOn: aCanvas	self subclassResponsibility! !!GdsElementDrawer methodsFor: 'accessing' stamp: 'kf 5/13/2009 15:40'!element: aGdsElement	element := aGdsElement.! !!GdsElementDrawer methodsFor: 'accessing' stamp: 'kf 11/22/2009 22:51'!elementFill	self useFlatFill		ifTrue: [^self flatFill].	^BitmapFillStyle fromForm: self petternForFill! !!GdsElementDrawer methodsFor: 'accessing' stamp: 'kf 11/22/2009 22:50'!flatFill	^morph colorForElement: element.! !!GdsElementDrawer methodsFor: 'accessing' stamp: 'kf 9/28/2008 20:21'!morph: aMorph	morph := aMorph.! !!GdsElementDrawer methodsFor: 'accessing' stamp: 'kf 11/22/2009 23:04'!useFlatFill	^false! !!GdsElementDrawer methodsFor: 'drawing-attribute' stamp: 'kf 5/13/2009 13:45'!petternForFill	^ ColorForm 		mappingWhiteToTransparentFrom: (QDPattern formAt: self defaultQDPatternIndex)		blackAsColor: (morph colorForElement: element)! !!GdsElementDrawer methodsFor: 'drawing-utility' stamp: 'kf 5/13/2009 13:31'!strokeVerticesOn: aCanvas	self strokeVerticesOn: aCanvas points:  element vertices.! !!GdsElementDrawer methodsFor: 'drawing-utility' stamp: 'kf 11/22/2009 22:28'!strokeVerticesOn: aCanvas points: aPoints 	morph drawOn: aCanvas polyLineVertices: aPoints.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsElementDrawer class	instanceVariableNames: ''!!GdsElementDrawer class methodsFor: 'as yet unclassified' stamp: 'kf 11/17/2009 21:00'!drawerClassForItemContext: aGdsItemContext 	^aGdsItemContext elementClass drawerClass! !!GdsElementDrawer class methodsFor: 'deprecated MVC style' stamp: 'kf 11/17/2009 20:59'!fromElement: aGdsElement morph: aMorph	| drawer |	drawer := aGdsElement drawerClass new.	drawer element: aGdsElement.	drawer morph: aMorph.	^drawer! !GdsElementDrawer subclass: #GdsPrimitiveDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsPrimitiveDrawer methodsFor: 'drawing' stamp: 'kf 5/12/2009 15:52'!drawItemFeedbackOn: aCanvas	morph drawItemLineSegmentsOn: aCanvas.! !!GdsPrimitiveDrawer methodsFor: 'drawing' stamp: 'kf 11/22/2009 22:48'!fillOutlineOn: aCanvas 	morph 		penColor:  self elementFill		during: [			morph 				drawOn: aCanvas				fillPolyLineVertices: element dataOutlinePoints].! !!GdsPrimitiveDrawer methodsFor: 'drawing' stamp: 'kf 5/13/2009 13:32'!strokeOutlineOn: aCanvas	self strokeVerticesOn: aCanvas! !GdsPrimitiveDrawer subclass: #GdsBoundaryDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!GdsElementDrawer subclass: #GdsReferenceDrawer	instanceVariableNames: 'structure'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/9/2009 15:28'!canDisplayExtent	^self subclassResponsibility! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 15:55'!drawExtentOn: aCanvas	morph penColor: morph visiblePenColor during: [		self strokeVerticesOn: aCanvas points: element dataOutlinePoints.]! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 5/15/2009 21:22'!drawItemFeedbackOn: aCanvas	self strokeOutlineOn: aCanvas.	element ifNotNil: [		morph drawOn: aCanvas markDiamondPointAt: element xy]! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 10/30/2009 14:31'!elementsDrawOn: aCanvas	self pushedPort: 		[ self visibleElements do: 			[ :each | 			morph 				drawOn: aCanvas				element: each ] ]! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 10/31/2009 23:44'!fillOutlineOn: aCanvas	self pushedPort: [self privateFillOutlineOn: aCanvas] ! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:32'!fullDrawOn: aCanvas	element state = #inStructure		ifTrue: [ 			self fillOutlineOn: aCanvas ]		ifFalse: [			self strokeOutlineOn: aCanvas].	self optionalDrawOn: aCanvas.	! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:33'!optionalDrawOn: aCanvas	super optionalDrawOn: aCanvas.	self canDisplayExtent 		ifTrue: [self drawExtentOn: aCanvas].! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 10/31/2009 23:46'!strokeEachColorOutlineOn: aCanvas	self structure ifNil: [^self].	self pushedPort: 		[ self privateStrokeOutlineOn: aCanvas color: nil ]	! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 10/31/2009 19:54'!strokeOutlineOn: aCanvas	self strokeSolidColorOutlineOn: aCanvas.! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 11/17/2009 12:54'!strokeSolidColorOutlineOn: aCanvas	| color |	self structure ifNil: [^self].	color := nil.	element		ifNotNil: [color := morph colorForElement: element].	self pushedPort: [		 self shallowStrokeOutlineOn: aCanvas color: color]. ! !!GdsReferenceDrawer methodsFor: 'drawing' stamp: 'kf 11/17/2009 13:37'!visibleElements	^self structure elements select: [:each | 		each isVisible and: [self isDrawableElement: each] ].			! !!GdsReferenceDrawer methodsFor: 'private' stamp: 'kf 11/1/2009 00:25'!privateFillOutlineOn: aCanvas	morph 		drawLocalIgnoreItemOn: aCanvas 		elements: self visibleElements 		drawBlock: [ :canvas :el | 			morph 				drawOn: aCanvas				element: el].! !!GdsReferenceDrawer methodsFor: 'private' stamp: 'kf 11/1/2009 00:25'!privateStrokeOutlineOn: aCanvas color: aColor	morph 		drawLocalIgnoreItemOn: aCanvas 		elements: self visibleElements 		drawBlock: [ :canvas :el | 			morph 				strokeOn: aCanvas				element: el 				color: aColor].	! !!GdsReferenceDrawer methodsFor: 'private' stamp: 'kf 11/1/2009 15:28'!pushedPort: aBlock	self assert: element isNil not.	morph pushTransform: element transform during: aBlock.! !!GdsReferenceDrawer methodsFor: 'private' stamp: 'kf 11/24/2009 15:05'!shallowStrokeOutlineOn: aCanvas color: aColor	morph 		drawLocalIgnoreItemOn: aCanvas 		elements: self visibleElements		drawBlock: [ :canvas :el | 			el isReference				ifTrue: [					morph penColor: aColor during: [						morph drawOn: aCanvas strokeBounds: el dataBounds]]				ifFalse: [					morph 						strokeOn: aCanvas						element: el 						color: aColor]].				! !!GdsReferenceDrawer methodsFor: 'accessing' stamp: 'kf 6/8/2009 16:15'!structure	structure ifNil: [		element ifNotNil: [			structure := morph model database 				structureNamed: element structureName.]].		^structure! !GdsReferenceDrawer subclass: #GdsStructureReferenceDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsStructureReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/9/2009 15:28'!canDisplayExtent	^self canDisplayKindForKey: 'SE'! !!GdsStructureReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 20:50'!canDisplayOrigin	^ self canDisplayKindForKey: 'SO'! !GdsStructureReferenceDrawer subclass: #GdsArrayedStructureReferenceDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsArrayedStructureReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/9/2009 15:27'!canDisplayBorder	^self canDisplayKindForKey: 'AB'! !!GdsArrayedStructureReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/9/2009 15:27'!canDisplayExtent	^self canDisplayKindForKey: 'AE'! !!GdsArrayedStructureReferenceDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 20:50'!canDisplayOrigin	^ self canDisplayKindForKey: 'AO'! !!GdsArrayedStructureReferenceDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:18'!drawBorderOn: aCanvas	self pushedPort: [		morph penColor: morph visiblePenColor during: [			|points|			"points := element dataOutlinePoints."			points :=  GeometryUtils verticesFromBounds: element  structure dataExtentForElements..			self strokeVerticesOn: aCanvas points: points.]].! !!GdsArrayedStructureReferenceDrawer methodsFor: 'drawing' stamp: 'kf 12/9/2009 16:32'!optionalDrawOn: aCanvas	super optionalDrawOn: aCanvas.	self canDisplayBorder 		ifTrue: [self drawBorderOn: aCanvas]		! !!GdsArrayedStructureReferenceDrawer methodsFor: 'private' stamp: 'kf 11/5/2009 17:38'!pushedPort: aBlock	| transforms |	self assert: element isNil not.	transforms := self repeatTransforms.	transforms do: [:each |			morph pushTransform: each during: aBlock]! !!GdsArrayedStructureReferenceDrawer methodsFor: 'as yet unclassified' stamp: 'kf 11/6/2009 14:12'!repeatTransforms	^element relativeTransforms collect: [:each | 		element transform copy composedWithLocal: each].	! !GdsPrimitiveDrawer subclass: #GdsBoxTextDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsBoxTextDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 20:50'!canDisplayOrigin	^ self canDisplayKindForKey: 'TO'! !!GdsBoxTextDrawer methodsFor: 'drawing' stamp: 'kf 5/15/2009 21:28'!drawItemFeedbackOn: aCanvas	self strokeOutlineOn: aCanvas.! !!GdsBoxTextDrawer methodsFor: 'drawing' stamp: 'kf 11/22/2009 22:25'!fillOutlineOn: aCanvas	"No Fill"! !!GdsBoxTextDrawer methodsFor: 'drawing' stamp: 'kf 12/8/2009 20:50'!strokeOutlineOn: aCanvas 	| savedColor |	(self canDisplayKindForKey: 'TX') ifFalse: [ ^ self ].	savedColor := morph penColor.	"morph penColor: self penColor."	morph 		drawOn: aCanvas		fittingStrokeString: element contents		bounds: element dataBounds.	morph penColor: savedColor! !GdsPrimitiveDrawer subclass: #GdsPathDrawer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Morphic-Drawer'!!GdsPathDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 16:45'!canFill	| pixelSize |	element width <= 0.0 ifTrue: [ ^ false ].	pixelSize := self pixelSize: element width.	^ pixelSize >= 3.0 and: [self canStrokePathBoundaryWithKind].! !!GdsPathDrawer methodsFor: 'testing' stamp: 'kf 11/26/2009 12:02'!canStrokePathBoundary	| pixelSize |	element width <= 0.0 ifTrue: [ ^ false ].	pixelSize := self pixelSize: element width.	^ pixelSize >= 2.0! !!GdsPathDrawer methodsFor: 'testing' stamp: 'kf 12/8/2009 16:41'!canStrokePathCenter	^(element owner kinds atKey: 'PC') isVisible or: [self canStrokePathBoundary not]	! !!GdsPathDrawer methodsFor: 'drawing' stamp: 'kf 12/8/2009 16:44'!canStrokePathBoundaryWithKind	^(self canStrokePathBoundary and: [(element owner kinds atKey: 'PB') isVisible])		! !!GdsPathDrawer methodsFor: 'drawing' stamp: 'kf 12/8/2009 16:44'!strokeOutlineOn: aCanvas	(self canStrokePathBoundaryWithKind)		ifTrue: [self strokePathBoundaryOn: aCanvas].			(self canStrokePathCenter)		ifTrue: [self strokePathCenterOn: aCanvas].		! !!GdsPathDrawer methodsFor: 'drawing-utility' stamp: 'kf 10/24/2008 09:51'!drawOn: strokeCanvas intersctAt: aPoint index: aIndex	morph drawOn: strokeCanvas markDiamondPointAt: aPoint.	morph drawOn: strokeCanvas text: aIndex at: aPoint..	! !!GdsPathDrawer methodsFor: 'drawing-utility' stamp: 'kf 11/22/2009 22:38'!strokePathBoundaryOn: aCanvas	self strokeVerticesOn: aCanvas points: element dataOutlinePoints ! !!GdsPathDrawer methodsFor: 'drawing-utility' stamp: 'kf 11/22/2009 22:39'!strokePathCenterOn: aCanvas	self strokeVerticesOn: aCanvas points: element vertices 	! !!GdsPathDrawer methodsFor: 'caliculate' stamp: 'kf 10/17/2008 22:55'!intersectionPoints: segs1 other: segs2	| col  p |	col := OrderedCollection new.	segs1 do: [:seg1 |		segs2 do: [:seg2 |			p := seg1 intersectionWith: seg2.			p ifNotNil: [col add: p].]].	^col asArray.! !!GdsPathDrawer methodsFor: 'caliculate' stamp: 'kf 10/24/2008 09:45'!outlineSegment: aLineSegment offsetRadians: offsetRadians r: r 	^element outlineSegmentsOf: aLineSegment offsetRadians: offsetRadians r: r.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsPathDrawer class	instanceVariableNames: ''!!GdsPathDrawer class methodsFor: 'as yet unclassified' stamp: 'kf 10/17/2008 20:24'!radiansFor45	^45 degreeSin! !!GdsPathDrawer class methodsFor: 'as yet unclassified' stamp: 'kf 10/17/2008 20:24'!radiansFor90	^90 degreeSin! !