Model subclass: #GdsGrid	instanceVariableNames: 'offsetX offsetY scaleX scaleY displayMultiply'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Viewing'!!GdsGrid commentStamp: 'kf 11/12/2008 11:58' prior: 0!A GdsGrid is Gridding attribute.Instance Variables	offsetX:		<Float>	offsetY:		<Float>	scaleX:		<Float>	scaleY:		<Float>offsetX	- xxxxxoffsetY	- xxxxxscaleX	- xxxxxscaleY	- xxxxx!!GdsGrid methodsFor: 'convert' stamp: 'kf 6/9/2009 10:50'!asAbbreviateArray	| values |	values := OrderedCollection new.	self isZeroOffset 		ifTrue: [			values add: scaleX.			self isSameScale 				ifFalse: [values add: scaleY]]		ifFalse: [			values addAll: self asArray].	^values asArray! !!GdsGrid methodsFor: 'convert' stamp: 'kf 6/9/2009 10:47'!asAbbreviateArrayDeprecated	| values |	values := OrderedCollection new.	self isZeroOffset 		ifTrue: [			values add: scaleX.			self isSameScale 				ifFalse: [values add: scaleY]]		ifFalse: [			values add: scaleX.			values add: scaleY.			values add: offsetX.			self isSameOffset				ifFalse: [values add: offsetY]].	^values asArray! !!GdsGrid methodsFor: 'convert' stamp: 'kf 6/9/2009 10:47'!asArray	^{ offsetX . offsetY . scaleX . scaleY }! !!GdsGrid methodsFor: 'convert' stamp: 'kf 6/9/2009 10:46'!asArrayDeprecated	^{ scaleX . scaleY . offsetX . offsetY }! !!GdsGrid methodsFor: 'convert' stamp: 'kf 11/20/2008 10:46'!asRequestString	^GdsFeel join:  (self asAbbreviateArray collect: [:each | each asString]) using: ' '.! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/10/2009 09:56'!displayMultiply	^displayMultiply	! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/10/2009 10:48'!displayMultiply: aValue	| value |	value := aValue asInteger .	value negative ifTrue: [^self].	displayMultiply := value.	self changed: #gridDisplayMultiply.	! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 11/17/2009 20:21'!offset	^offsetX@offsetY.! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/10/2009 10:02'!offset: aOffset	| p |	p := aOffset asPoint.	self setOffsetX: p x setOffsetY: p y. 	self changed: #gridOffset.	self displayMultiply: 1.		! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 11/17/2009 20:21'!scale	^scaleX@scaleY.! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/10/2009 10:02'!scale: aScale	| p |	p := aScale asPoint.	self setScaleX: p x setScaleY: p y. 	self changed: #gridScale.	self displayMultiply: 1.	! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/10/2009 10:02'!values: anArray	self assert: [anArray isNil not].	self assert: [anArray allSatisfy: [:each | each isNumber]].	self assert: [#(1 2 4) includes: anArray size].	anArray ifEmpty: [^self].	anArray size = 1		ifTrue: [			scaleX := anArray at: 1.			scaleY := anArray at: 1.].	anArray size = 2		ifTrue: [			scaleX := anArray at: 1.			scaleY := anArray at: 2.].	anArray size = 4		ifTrue: [			offsetX := anArray at: 1.			offsetY := anArray at: 2.			scaleX := anArray at: 3.			scaleY := anArray at: 4.].	self changed: #gridScale.	anArray size = 4 		ifTrue: [self changed: #gridOffset.].	self displayMultiply: 1.	! !!GdsGrid methodsFor: 'accessing' stamp: 'kf 6/9/2009 10:51'!valuesDeprecated: anArray	self assert: [anArray isNil not].	self assert: [anArray allSatisfy: [:each | each isNumber]].	self assert: [anArray size <= 4].	anArray ifEmpty: [^self].	anArray size >= 1 ifTrue: [scaleX := anArray at: 1].	anArray size >= 2 ifTrue: [scaleY := anArray at: 2].	anArray size >= 3 ifTrue: [offsetX := anArray at: 3].	anArray size = 4 ifTrue: [offsetY := anArray at: 4].	anArray size = 1 ifTrue: [scaleY := anArray at: 1].	anArray size = 3 ifTrue: [offsetY := anArray at: 3].		self changed: #gridScale.	anArray size >= 3 ifTrue: [self changed: #gridOffset.].! !!GdsGrid methodsFor: 'initialization' stamp: 'kf 6/10/2009 09:51'!initialize	offsetX := 0.0.	offsetY := 0.0.	scaleX := 10.0.	scaleY := 10.0.	displayMultiply := 1.	! !!GdsGrid methodsFor: 'testing' stamp: 'kf 11/20/2008 10:26'!isSameOffset	^offsetX = offsetY! !!GdsGrid methodsFor: 'testing' stamp: 'kf 11/20/2008 10:25'!isSameScale	^scaleX = scaleY! !!GdsGrid methodsFor: 'testing' stamp: 'kf 11/20/2008 10:40'!isZeroOffset	^self offset isZero! !!GdsGrid methodsFor: 'private' stamp: 'kf 9/26/2008 23:00'!setOffsetX: aX setOffsetY: aY	offsetX := aX.	offsetY := aY.	! !!GdsGrid methodsFor: 'private' stamp: 'kf 9/26/2008 23:01'!setScaleX: aX setScaleY: aY	scaleX := aX.	scaleY := aY.	! !!GdsGrid methodsFor: 'utility' stamp: 'kf 11/27/2009 13:21'!lookupGridStepsMin: aMin max: aMax gridScale: aGridScale gridOffset: aGridOffset	|  start end  values |	start :=  aMin roundTo: aGridScale.	end :=  aMax roundTo: aGridScale.	values := (self class lookupGridStepsMin: start max: end gridScale: aGridScale).	values := values select: [:each | | v | 		v := (each rem: aGridScale) abs roundTo: aGridScale.		v = 0.0 or: [v = aGridScale]].  	values := values collect: [:each | each + aGridOffset].	^values		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsGrid class	instanceVariableNames: ''!!GdsGrid class methodsFor: 'as yet unclassified' stamp: 'kf 11/16/2009 13:30'!lookupGridStepsMin: aMinValue max: aMaxValue gridScale: aGridScale	^((Interval 		from: ((aMinValue roundTo: aGridScale) -  aGridScale) 		to: ((aMaxValue roundTo: aGridScale) + aGridScale ) by: aGridScale) 			collect: [:each | each roundTo: aGridScale]) asArray.! !Model subclass: #GdsViewport	instanceVariableNames: 'wTrans scale grid viewCenter lastPoint pixelBoundsSelector pixelBoundsTarget model compositMatrix fittingRatio'	classVariableNames: ''	poolDictionaries: ''	category: 'GdsFeel-Model-Viewing'!!GdsViewport commentStamp: 'kf 11/14/2008 20:08' prior: 0!A GdsViewport is Pluggable coordinate transformer.Instance Variables	grid:		<GdsGrid>	lastPoint:		<Object>	model:		<Object>	pixelBoundsSelector:		<Symbol>	pixelBoundsTarget:		<Object>	scale:		<Float>	viewCenter:		<Point>	wTrans:		<MatrixTransform2x3>grid	- xxxxxlastPoint	- xxxxxmodel	- xxxxxpixelBoundsSelector	- xxxxxpixelBoundsTarget	- xxxxxscale	- xxxxxviewCenter	- xxxxxwTrans	- xxxxx!!GdsViewport methodsFor: 'testing' stamp: 'kf 11/26/2009 11:57'!canGridDraw	| pixelPitch |	self grid displayMultiply = 0 ifTrue: [^false].	pixelPitch :=   			(self gridScale x * self absoluteScale) asFloat		 *	 self grid displayMultiply.	(pixelPitch  <= 4.0)		ifTrue: [^false].	^true.	! !!GdsViewport methodsFor: 'initialization' stamp: 'kf 6/24/2009 17:47'!composeNewTransform: aMatrixTransform2x3	wTrans := self wTrans composedWithLocal: aMatrixTransform2x3.	compositMatrix :=  aMatrixTransform2x3.	 ! !!GdsViewport methodsFor: 'initialization' stamp: 'kf 6/24/2009 17:48'!compositMatrix	compositMatrix ifNil: [compositMatrix := MatrixTransform2x3 identity].	^compositMatrix.! !!GdsViewport methodsFor: 'initialization' stamp: 'kf 11/13/2009 21:47'!initialize	super initialize.	fittingRatio := self defaultFittingRatio.! !!GdsViewport methodsFor: 'initialization' stamp: 'kf 9/20/2008 13:45'!wTrans	wTrans ifNil: [wTrans := self worldTransform].	^wTrans	! !!GdsViewport methodsFor: 'drawing' stamp: 'kf 9/27/2008 00:12'!extent: aPoint	wTrans := nil.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/20/2008 11:26'!grid	grid ifNil: [grid := GdsGrid new].	^grid 			! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 6/9/2009 18:16'!gridOffset	^self grid offset.		! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/20/2008 11:26'!gridScale	^self grid scale.		! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/19/2009 11:31'!marginBounds: aBaseBounds	| growFactor growWidth growHeight|	growFactor := (self fittingRatio reciprocal) - 1.0.	growWidth := (aBaseBounds width * growFactor) * 0.5.	growHeight := (aBaseBounds height * growFactor) * 0.5.	^aBaseBounds expandBy: (growWidth@growHeight).	 ! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 5/28/2009 19:25'!maxScaleLimit	^1000.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 5/28/2009 19:09'!minScaleLimit	^self maxScaleLimit reciprocal asFloat.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/25/2008 23:29'!privateViewCenter: aPoint	viewCenter := aPoint.		wTrans := nil.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/17/2009 20:23'!privateViewMoveFractionX: aXfraction y: aYfraction	| xDelta yDelta newCenter |	xDelta := self worldViewWidth * aXfraction.	yDelta := self worldViewHeight * aYfraction.		newCenter := self viewCenter + (xDelta@yDelta).	self privateViewCenter: newCenter.	! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/25/2008 23:28'!privateViewScale: aScale	aScale < self minScaleLimit 		ifTrue: [			Transcript cr; show: '*** WARNING *** minimam scale limit.'.			^self].	aScale > self maxScaleLimit 		ifTrue: [			Transcript cr; show: '*** WARNING *** maximam scale limit.'.			^self].	scale := aScale.	wTrans := nil.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/19/2009 11:08'!viewBounds: aWorldBounds	| hRatio vRatio scalingFactor centerPoint |	hRatio := (self pixelBounds width / aWorldBounds width) asFloat.	vRatio := (self pixelBounds height / aWorldBounds height) asFloat.	scalingFactor := hRatio min: vRatio.	centerPoint := (aWorldBounds origin + aWorldBounds corner) / 2.0.		self privateViewScale: scalingFactor.	self privateViewCenter: centerPoint.	self changed.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/20/2008 18:28'!viewCenter	viewCenter ifNil: [viewCenter := 0.0@0.0].	^viewCenter.	! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/21/2008 21:52'!viewCenter: aPoint	self privateViewCenter: aPoint.	self changed.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 11/19/2009 11:30'!viewFit	self viewBounds: (self marginBounds: (model dataExtentForFittingView)).	 ! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/21/2008 21:14'!viewMove: aFractionPoint	self viewMoveFractionX: aFractionPoint x y: aFractionPoint y.	self changed..! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/21/2008 21:01'!viewMoveFractionX: aXfraction y: aYfraction		self privateViewMoveFractionX: aXfraction y: aYfraction..	! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/20/2008 15:57'!viewScale	scale ifNil: [scale := 1.0].	^scale.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/21/2008 20:59'!viewScale: aScale	self privateViewScale: aScale.	self changed.! !!GdsViewport methodsFor: 'viewing' stamp: 'kf 9/20/2008 15:58'!zoom: aNumber	self viewScale: self viewScale * aNumber.	! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 11/26/2009 11:57'!absoluteScale	^self wTrans a11 abs! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 11/13/2009 21:46'!fittingRatio	^fittingRatio! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 11/14/2009 15:42'!fittingRatio: aFloat	fittingRatio := (aFloat > 1.0 or: [aFloat < 0.5]) ifTrue: [self defaultFittingRatio] ifFalse: [aFloat].! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 9/20/2008 18:31'!grid: aGrid	grid := aGrid.	self changed.	! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 11/18/2008 21:16'!model: aModel	model := aModel.	self addDependent: model.		! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 9/27/2008 00:17'!pixelBoundsSelector: aSelector	pixelBoundsSelector := aSelector.		! !!GdsViewport methodsFor: 'accessing' stamp: 'kf 10/22/2008 13:41'!pixelBoundsTarget: aTarget	self assert: [aTarget isNil not].	pixelBoundsTarget := aTarget.	self addDependent: aTarget.		! !!GdsViewport methodsFor: 'lookup' stamp: 'kf 11/27/2009 13:25'!lookupHorizontalGridSteps	^self grid 		lookupGridStepsMin: self worldViewMinX 		max: self worldViewMaxX 		gridScale: (self gridScale x * self grid displayMultiply) gridOffset: self gridOffset x	! !!GdsViewport methodsFor: 'lookup' stamp: 'kf 11/27/2009 13:25'!lookupVerticalGridSteps	^self grid 		lookupGridStepsMin: self worldViewMinY 		max: self worldViewMaxY 		gridScale: (self gridScale y * self grid displayMultiply) gridOffset: self gridOffset y		! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 9/26/2008 23:44'!morhicPointFromGlobal:  aGlobalPoint	^aGlobalPoint - self pixelBounds origin.! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 11/26/2009 13:28'!pixelSize: aWorldSize	^(self xy2hv: aWorldSize asPoint) dist: (self xy2hv: 0 asPoint)! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 6/9/2009 18:17'!snapedWorldPoint:  aWorldPoint	^(GeometryUtils point: aWorldPoint roundTo: (self gridScale)) + self gridOffset.! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 10/3/2008 22:45'!snapedWorldPointFromGlobal:  aGlobalPoint	^self snapedWorldPoint: (self worldPointFromGlobal: aGlobalPoint).! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 9/20/2008 11:58'!verticalFlipTransform	^MatrixTransform2x3 withScale: (1.0@-1.0).		! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 11/13/2009 10:22'!worldPointFromGlobal:  aGlobalPoint	^self wTrans invertPoint: (self morhicPointFromGlobal: aGlobalPoint).! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 9/26/2008 23:46'!worldTransform	| m |	m := MatrixTransform2x3 new.	m setOffset: (0@self pixelBounds extent y).		m setScale: (1@-1).	m := m composedWithLocal: (MatrixTransform2x3 withOffset: ((self pixelBounds extent) / 2.0)).	m := m composedWithLocal: (MatrixTransform2x3 withScale: self viewScale asPoint).	m := m composedWithLocal: (MatrixTransform2x3 withOffset: self viewCenter negated).	^m	! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 7/9/2009 10:29'!xy2hv: aWorldPoint	^self xy2hv: aWorldPoint transform: self wTrans! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 11/17/2009 20:45'!xy2hv: aWorldPoint transform: aMatrixTransform2x3	| np1 |	np1 :=aMatrixTransform2x3 localPointToGlobal: aWorldPoint.	"np1 := GeometryUtils point: np1 roundTo: 1.0."	^GeometryUtils limitedPoint:  np1 rounded.	! !!GdsViewport methodsFor: 'transforms' stamp: 'kf 9/28/2008 20:48'!xy2hvPoints: aPointArray	^aPointArray collect: 		[:each | self xy2hv: each]. ! !!GdsViewport methodsFor: 'private' stamp: 'kf 9/27/2008 00:20'!pixelBounds	^pixelBoundsTarget perform: pixelBoundsSelector.! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 10/3/2008 23:31'!worldViewBounds	^Rectangle origin: self worldViewOrigin corner: self worldViewCorner.	! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/26/2008 23:46'!worldViewCorner	| globalPoint |	globalPoint := self pixelBounds right@self pixelBounds top.	^self worldPointFromGlobal: globalPoint.	! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/21/2008 19:58'!worldViewHeight	^self worldViewMaxY - self worldViewMinY.	! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/20/2008 16:28'!worldViewMaxX	^self worldViewCorner x.! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/20/2008 16:28'!worldViewMaxY	^self worldViewCorner y.! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/20/2008 16:28'!worldViewMinX	^self worldViewOrigin x.! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/20/2008 16:29'!worldViewMinY	^self worldViewOrigin y.! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/26/2008 23:45'!worldViewOrigin	| globalPoint |	globalPoint := self pixelBounds left@self pixelBounds bottom.	^self worldPointFromGlobal: globalPoint.	! !!GdsViewport methodsFor: 'world-geometry' stamp: 'kf 9/21/2008 19:58'!worldViewWidth	^self worldViewMaxX - self worldViewMinX.	! !!GdsViewport methodsFor: 'defaults' stamp: 'kf 11/14/2009 15:54'!defaultFittingRatio 	^GdsFeel fittingRatio.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GdsViewport class	instanceVariableNames: ''!!GdsViewport class methodsFor: 'as yet unclassified' stamp: 'kf 11/14/2009 15:43'!defaultFittingRatio 	^0.98.! !